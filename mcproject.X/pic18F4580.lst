

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sat Apr 22 11:15:39 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og9 
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    63  0000                     
    64                           ; Version 2.36
    65                           ; Generated 28/01/2022 GMT
    66                           ; 
    67                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution. Publication is not required when
    81                           ;        this file is used in an embedded application.
    82                           ; 
    83                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    84                           ;        software without specific prior written permission.
    85                           ; 
    86                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    87                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    88                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    89                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    90                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    91                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    92                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    93                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    94                           ; 
    95                           ; 
    96                           ; Code-generator required, PIC18F4580 Definitions
    97                           ; 
    98                           ; SFR Addresses
    99  0000                     
   100                           	psect	idataCOMRAM
   101  001B6C                     __pidataCOMRAM:
   102                           	callstack 0
   103                           
   104                           ;initializer for display_menu@flag
   105  001B6C  0001               	dw	1
   106                           
   107                           ;initializer for read_switches@once
   108  001B6E  01                 	db	1
   109                           
   110                           ;initializer for _str_user
   111  001B6F  30                 	db	48
   112  001B70  30                 	db	48
   113  001B71  31                 	db	49
   114  001B72  31                 	db	49
   115  001B73  00                 	db	0
   116                           
   117                           	psect	idataBANK0
   118  001546                     __pidataBANK0:
   119                           	callstack 0
   120                           
   121                           ;initializer for _menu
   122  001546  76                 	db	118
   123  001547  69                 	db	105
   124  001548  65                 	db	101
   125  001549  77                 	db	119
   126  00154A  20                 	db	32
   127  00154B  6C                 	db	108
   128  00154C  6F                 	db	111
   129  00154D  67                 	db	103
   130  00154E  20                 	db	32
   131  00154F  20                 	db	32
   132  001550  20                 	db	32
   133  001551  20                 	db	32
   134  001552  20                 	db	32
   135  001553  00                 	db	0
   136  001554  00                 	db	0
   137  001555  00                 	db	0
   138  001556  00                 	db	0
   139  001557  63                 	db	99
   140  001558  6C                 	db	108
   141  001559  65                 	db	101
   142  00155A  61                 	db	97
   143  00155B  72                 	db	114
   144  00155C  20                 	db	32
   145  00155D  6C                 	db	108
   146  00155E  6F                 	db	111
   147  00155F  67                 	db	103
   148  001560  20                 	db	32
   149  001561  20                 	db	32
   150  001562  20                 	db	32
   151  001563  20                 	db	32
   152  001564  20                 	db	32
   153  001565  20                 	db	32
   154  001566  20                 	db	32
   155  001567  00                 	db	0
   156  001568  73                 	db	115
   157  001569  65                 	db	101
   158  00156A  74                 	db	116
   159  00156B  20                 	db	32
   160  00156C  74                 	db	116
   161  00156D  69                 	db	105
   162  00156E  6D                 	db	109
   163  00156F  65                 	db	101
   164  001570  20                 	db	32
   165  001571  20                 	db	32
   166  001572  20                 	db	32
   167  001573  20                 	db	32
   168  001574  20                 	db	32
   169  001575  20                 	db	32
   170  001576  20                 	db	32
   171  001577  20                 	db	32
   172  001578  00                 	db	0
   173  001579  63                 	db	99
   174  00157A  68                 	db	104
   175  00157B  61                 	db	97
   176  00157C  6E                 	db	110
   177  00157D  67                 	db	103
   178  00157E  65                 	db	101
   179  00157F  20                 	db	32
   180  001580  70                 	db	112
   181  001581  77                 	db	119
   182  001582  64                 	db	100
   183  001583  20                 	db	32
   184  001584  20                 	db	32
   185  001585  20                 	db	32
   186  001586  20                 	db	32
   187  001587  20                 	db	32
   188  001588  20                 	db	32
   189  001589  20                 	db	32
   190  00158A  64                 	db	100
   191  00158B  6F                 	db	111
   192  00158C  77                 	db	119
   193  00158D  6E                 	db	110
   194  00158E  6C                 	db	108
   195  00158F  6F                 	db	111
   196  001590  61                 	db	97
   197  001591  64                 	db	100
   198  001592  20                 	db	32
   199  001593  6C                 	db	108
   200  001594  6F                 	db	111
   201  001595  67                 	db	103
   202  001596  20                 	db	32
   203  001597  20                 	db	32
   204  001598  20                 	db	32
   205  001599  20                 	db	32
   206  00159A  00                 	db	0
   207                           
   208                           ;initializer for _gear
   209  00159B  4F                 	db	79
   210  00159C  4E                 	db	78
   211  00159D  00                 	db	0
   212  00159E  4E                 	db	78
   213  00159F  55                 	db	85
   214  0015A0  00                 	db	0
   215  0015A1  47                 	db	71
   216  0015A2  31                 	db	49
   217  0015A3  00                 	db	0
   218  0015A4  47                 	db	71
   219  0015A5  32                 	db	50
   220  0015A6  00                 	db	0
   221  0015A7  47                 	db	71
   222  0015A8  33                 	db	51
   223  0015A9  00                 	db	0
   224  0015AA  47                 	db	71
   225  0015AB  34                 	db	52
   226  0015AC  00                 	db	0
   227  0015AD  47                 	db	71
   228  0015AE  35                 	db	53
   229  0015AF  00                 	db	0
   230  0015B0  52                 	db	82
   231  0015B1  47                 	db	71
   232  0015B2  00                 	db	0
   233  0015B3  43                 	db	67
   234  0015B4  4F                 	db	79
   235  0015B5  00                 	db	0
   236  0000                     _RCREG	set	4014
   237  0000                     _TXREG	set	4013
   238  0000                     _SPBRG	set	4015
   239  0000                     _SSPADD	set	4040
   240  0000                     _SSPCON1	set	4038
   241  0000                     _ADRESL	set	4035
   242  0000                     _ADRESH	set	4036
   243  0000                     _ABDOVF	set	32199
   244  0000                     _ACKSTAT	set	32302
   245  0000                     _CKE	set	32318
   246  0000                     _VCFG1	set	32269
   247  0000                     _GODONE	set	32273
   248  0000                     _TRISC	set	3988
   249  0000                     _TRISD	set	3989
   250  0000                     _ADCON1	set	4033
   251  0000                     _ADCON0	set	4034
   252  0000                     _RD7	set	31775
   253  0000                     _RC0	set	31760
   254  0000                     _RC2	set	31762
   255  0000                     _TXIF	set	31988
   256  0000                     _RB4	set	31756
   257  0000                     _RB3	set	31755
   258  0000                     _RB2	set	31754
   259  0000                     _RB1	set	31753
   260  0000                     _RB7	set	31759
   261  0000                     _RB6	set	31758
   262  0000                     _RB5	set	31757
   263  0000                     _ACKEN	set	32300
   264  0000                     _ACKDT	set	32301
   265  0000                     _RCEN	set	32299
   266  0000                     _RSEN	set	32297
   267  0000                     _PEN	set	32298
   268  0000                     _SEN	set	32296
   269  0000                     _SMP	set	32319
   270  0000                     _TRISC4	set	31908
   271  0000                     _GO	set	32273
   272  0000                     _ADON	set	32272
   273  0000                     _VCFG0	set	32268
   274  0000                     _ADCS2	set	32258
   275  0000                     _ADCS1	set	32257
   276  0000                     _ADCS0	set	32256
   277  0000                     _ACQT0	set	32259
   278  0000                     _ACQT1	set	32260
   279  0000                     _ACQT2	set	32261
   280  0000                     _PORTB	set	3969
   281  0000                     _TRISB	set	3987
   282  0000                     _TRISC3	set	31907
   283  0000                     _ADFM	set	32263
   284  0000                     _TRISD7	set	31919
   285  0000                     _TXIE	set	31980
   286  0000                     _SSPIF	set	31987
   287  0000                     _SSPBUF	set	4041
   288  0000                     _RBPU	set	32655
   289  0000                     _BCLIF	set	32011
   290  0000                     _SPEN	set	32095
   291  0000                     _CSRC	set	32103
   292  0000                     _PORTD	set	3971
   293  0000                     _RC1	set	31761
   294                           
   295                           	psect	smallconst
   296  000600                     __psmallconst:
   297                           	callstack 0
   298  000600  00                 	db	0
   299  000601                     STR_12:
   300  000601  4C                 	db	76	;'L'
   301  000602  6F                 	db	111	;'o'
   302  000603  67                 	db	103	;'g'
   303  000604  73                 	db	115	;'s'
   304  000605  20                 	db	32
   305  000606  61                 	db	97	;'a'
   306  000607  72                 	db	114	;'r'
   307  000608  65                 	db	101	;'e'
   308  000609  20                 	db	32
   309  00060A  44                 	db	68	;'D'
   310  00060B  6F                 	db	111	;'o'
   311  00060C  77                 	db	119	;'w'
   312  00060D  6E                 	db	110	;'n'
   313  00060E  6C                 	db	108	;'l'
   314  00060F  6F                 	db	111	;'o'
   315  000610  61                 	db	97	;'a'
   316  000611  64                 	db	100	;'d'
   317  000612  65                 	db	101	;'e'
   318  000613  64                 	db	100	;'d'
   319  000614  0A                 	db	10
   320  000615  0D                 	db	13
   321  000616  00                 	db	0
   322  000617                     STR_7:
   323  000617  50                 	db	80	;'P'
   324  000618  61                 	db	97	;'a'
   325  000619  73                 	db	115	;'s'
   326  00061A  73                 	db	115	;'s'
   327  00061B  77                 	db	119	;'w'
   328  00061C  6F                 	db	111	;'o'
   329  00061D  72                 	db	114	;'r'
   330  00061E  64                 	db	100	;'d'
   331  00061F  20                 	db	32
   332  000620  69                 	db	105	;'i'
   333  000621  73                 	db	115	;'s'
   334  000622  20                 	db	32
   335  000623  73                 	db	115	;'s'
   336  000624  65                 	db	101	;'e'
   337  000625  74                 	db	116	;'t'
   338  000626  20                 	db	32
   339  000627  20                 	db	32
   340  000628  00                 	db	0
   341  000629                     STR_8:
   342  000629  54                 	db	84	;'T'
   343  00062A  49                 	db	73	;'I'
   344  00062B  4D                 	db	77	;'M'
   345  00062C  45                 	db	69	;'E'
   346  00062D  20                 	db	32
   347  00062E  20                 	db	32
   348  00062F  20                 	db	32
   349  000630  20                 	db	32
   350  000631  20                 	db	32
   351  000632  45                 	db	69	;'E'
   352  000633  56                 	db	86	;'V'
   353  000634  20                 	db	32
   354  000635  20                 	db	32
   355  000636  52                 	db	82	;'R'
   356  000637  50                 	db	80	;'P'
   357  000638  4D                 	db	77	;'M'
   358  000639  20                 	db	32
   359  00063A  00                 	db	0
   360  00063B                     STR_6:
   361  00063B  45                 	db	69	;'E'
   362  00063C  6E                 	db	110	;'n'
   363  00063D  74                 	db	116	;'t'
   364  00063E  65                 	db	101	;'e'
   365  00063F  72                 	db	114	;'r'
   366  000640  20                 	db	32
   367  000641  50                 	db	80	;'P'
   368  000642  61                 	db	97	;'a'
   369  000643  73                 	db	115	;'s'
   370  000644  73                 	db	115	;'s'
   371  000645  77                 	db	119	;'w'
   372  000646  6F                 	db	111	;'o'
   373  000647  72                 	db	114	;'r'
   374  000648  64                 	db	100	;'d'
   375  000649  20                 	db	32
   376  00064A  20                 	db	32
   377  00064B  00                 	db	0
   378  00064C                     STR_10:
   379  00064C  44                 	db	68	;'D'
   380  00064D  6F                 	db	111	;'o'
   381  00064E  77                 	db	119	;'w'
   382  00064F  6E                 	db	110	;'n'
   383  000650  6C                 	db	108	;'l'
   384  000651  6F                 	db	111	;'o'
   385  000652  61                 	db	97	;'a'
   386  000653  64                 	db	100	;'d'
   387  000654  69                 	db	105	;'i'
   388  000655  6E                 	db	110	;'n'
   389  000656  67                 	db	103	;'g'
   390  000657  20                 	db	32
   391  000658  4C                 	db	76	;'L'
   392  000659  4F                 	db	79	;'O'
   393  00065A  47                 	db	71	;'G'
   394  00065B  53                 	db	83	;'S'
   395  00065C  00                 	db	0
   396  00065D                     STR_2:
   397  00065D  50                 	db	80	;'P'
   398  00065E  61                 	db	97	;'a'
   399  00065F  73                 	db	115	;'s'
   400  000660  73                 	db	115	;'s'
   401  000661  77                 	db	119	;'w'
   402  000662  6F                 	db	111	;'o'
   403  000663  72                 	db	114	;'r'
   404  000664  64                 	db	100	;'d'
   405  000665  20                 	db	32
   406  000666  45                 	db	69	;'E'
   407  000667  6E                 	db	110	;'n'
   408  000668  74                 	db	116	;'t'
   409  000669  65                 	db	101	;'e'
   410  00066A  72                 	db	114	;'r'
   411  00066B  65                 	db	101	;'e'
   412  00066C  64                 	db	100	;'d'
   413  00066D  00                 	db	0
   414  00066E                     STR_1:
   415  00066E  45                 	db	69	;'E'
   416  00066F  4E                 	db	78	;'N'
   417  000670  54                 	db	84	;'T'
   418  000671  45                 	db	69	;'E'
   419  000672  52                 	db	82	;'R'
   420  000673  20                 	db	32
   421  000674  50                 	db	80	;'P'
   422  000675  41                 	db	65	;'A'
   423  000676  53                 	db	83	;'S'
   424  000677  53                 	db	83	;'S'
   425  000678  57                 	db	87	;'W'
   426  000679  4F                 	db	79	;'O'
   427  00067A  52                 	db	82	;'R'
   428  00067B  44                 	db	68	;'D'
   429  00067C  00                 	db	0
   430  00067D                     STR_4:
   431  00067D  50                 	db	80	;'P'
   432  00067E  61                 	db	97	;'a'
   433  00067F  73                 	db	115	;'s'
   434  000680  73                 	db	115	;'s'
   435  000681  77                 	db	119	;'w'
   436  000682  6F                 	db	111	;'o'
   437  000683  72                 	db	114	;'r'
   438  000684  64                 	db	100	;'d'
   439  000685  20                 	db	32
   440  000686  57                 	db	87	;'W'
   441  000687  72                 	db	114	;'r'
   442  000688  6F                 	db	111	;'o'
   443  000689  6E                 	db	110	;'n'
   444  00068A  67                 	db	103	;'g'
   445  00068B  00                 	db	0
   446  00068C                     STR_13:
   447  00068C  4C                 	db	76	;'L'
   448  00068D  6F                 	db	111	;'o'
   449  00068E  67                 	db	103	;'g'
   450  00068F  73                 	db	115	;'s'
   451  000690  20                 	db	32
   452  000691  61                 	db	97	;'a'
   453  000692  72                 	db	114	;'r'
   454  000693  65                 	db	101	;'e'
   455  000694  20                 	db	32
   456  000695  3A                 	db	58	;':'
   457  000696  20                 	db	32
   458  000697  0A                 	db	10
   459  000698  0D                 	db	13
   460  000699  00                 	db	0
   461  00069A                     STR_3:
   462  00069A  53                 	db	83	;'S'
   463  00069B  75                 	db	117	;'u'
   464  00069C  63                 	db	99	;'c'
   465  00069D  63                 	db	99	;'c'
   466  00069E  65                 	db	101	;'e'
   467  00069F  73                 	db	115	;'s'
   468  0006A0  73                 	db	115	;'s'
   469  0006A1  66                 	db	102	;'f'
   470  0006A2  75                 	db	117	;'u'
   471  0006A3  6C                 	db	108	;'l'
   472  0006A4  6C                 	db	108	;'l'
   473  0006A5  79                 	db	121	;'y'
   474  0006A6  00                 	db	0
   475  0006A7                     STR_9:
   476  0006A7  4C                 	db	76	;'L'
   477  0006A8  4F                 	db	79	;'O'
   478  0006A9  47                 	db	71	;'G'
   479  0006AA  5F                 	db	95	;'_'
   480  0006AB  43                 	db	67	;'C'
   481  0006AC  4C                 	db	76	;'L'
   482  0006AD  45                 	db	69	;'E'
   483  0006AE  41                 	db	65	;'A'
   484  0006AF  52                 	db	82	;'R'
   485  0006B0  45                 	db	69	;'E'
   486  0006B1  44                 	db	68	;'D'
   487  0006B2  00                 	db	0
   488  0006B3                     STR_5:
   489  0006B3  54                 	db	84	;'T'
   490  0006B4  49                 	db	73	;'I'
   491  0006B5  4D                 	db	77	;'M'
   492  0006B6  45                 	db	69	;'E'
   493  0006B7  20                 	db	32
   494  0006B8  53                 	db	83	;'S'
   495  0006B9  45                 	db	69	;'E'
   496  0006BA  54                 	db	84	;'T'
   497  0006BB  00                 	db	0
   498  0006BC                     STR_11:
   499  0006BC  69                 	db	105	;'i'
   500  0006BD  6E                 	db	110	;'n'
   501  0006BE  20                 	db	32
   502  0006BF  55                 	db	85	;'U'
   503  0006C0  41                 	db	65	;'A'
   504  0006C1  52                 	db	82	;'R'
   505  0006C2  54                 	db	84	;'T'
   506  0006C3  00                 	db	0
   507  0006C4                     STR_15:
   508  0006C4  2A                 	db	42
   509  0006C5  20                 	db	32
   510  0006C6  00                 	db	0
   511  0006C7  00                 	db	0	; dummy byte at the end
   512  0000                     
   513                           ; #config settings
   514                           
   515                           	psect	cinit
   516  00168E                     __pcinit:
   517                           	callstack 0
   518  00168E                     start_initialization:
   519                           	callstack 0
   520  00168E                     __initialization:
   521                           	callstack 0
   522                           
   523                           ; Initialize objects allocated to BANK0 (112 bytes)
   524                           ; load TBLPTR registers with __pidataBANK0
   525  00168E  0E46               	movlw	low __pidataBANK0
   526  001690  6EF6               	movwf	tblptrl,c
   527  001692  0E15               	movlw	high __pidataBANK0
   528  001694  6EF7               	movwf	tblptrh,c
   529  001696  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   530  001698  6EF8               	movwf	tblptru,c
   531  00169A  EE00  F060         	lfsr	0,__pdataBANK0
   532  00169E  EE10 F070          	lfsr	1,112
   533  0016A2                     copy_data0:
   534  0016A2  0009               	tblrd		*+
   535  0016A4  CFF5 FFEE          	movff	tablat,postinc0
   536  0016A8  50E5               	movf	postdec1,w,c
   537  0016AA  50E1               	movf	fsr1l,w,c
   538  0016AC  E1FA               	bnz	copy_data0
   539                           
   540                           ; Initialize objects allocated to COMRAM (8 bytes)
   541                           ; load TBLPTR registers with __pidataCOMRAM
   542  0016AE  0E6C               	movlw	low __pidataCOMRAM
   543  0016B0  6EF6               	movwf	tblptrl,c
   544  0016B2  0E1B               	movlw	high __pidataCOMRAM
   545  0016B4  6EF7               	movwf	tblptrh,c
   546  0016B6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   547  0016B8  6EF8               	movwf	tblptru,c
   548  0016BA  EE00  F044         	lfsr	0,__pdataCOMRAM
   549  0016BE  EE10 F008          	lfsr	1,8
   550  0016C2                     copy_data1:
   551  0016C2  0009               	tblrd		*+
   552  0016C4  CFF5 FFEE          	movff	tablat,postinc0
   553  0016C8  50E5               	movf	postdec1,w,c
   554  0016CA  50E1               	movf	fsr1l,w,c
   555  0016CC  E1FA               	bnz	copy_data1
   556                           
   557                           ; Clear objects allocated to BANK1 (170 bytes)
   558  0016CE  EE01  F000         	lfsr	0,__pbssBANK1
   559  0016D2  0EAA               	movlw	170
   560  0016D4                     clear_0:
   561  0016D4  6AEE               	clrf	postinc0,c
   562  0016D6  06E8               	decf	wreg,f,c
   563  0016D8  E1FD               	bnz	clear_0
   564                           
   565                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   566  0016DA  6A4C               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   567                           
   568                           ; Clear objects allocated to COMRAM (32 bytes)
   569  0016DC  EE00  F024         	lfsr	0,__pbssCOMRAM
   570  0016E0  0E20               	movlw	32
   571  0016E2                     clear_1:
   572  0016E2  6AEE               	clrf	postinc0,c
   573  0016E4  06E8               	decf	wreg,f,c
   574  0016E6  E1FD               	bnz	clear_1
   575  0016E8                     end_of_initialization:
   576                           	callstack 0
   577  0016E8                     __end_of__initialization:
   578                           	callstack 0
   579  0016E8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   580  0016EA  6EF8               	movwf	tblptru,c
   581  0016EC  0100               	movlb	0
   582  0016EE  EF7F  F008         	goto	_main	;jump to C main() function
   583                           
   584                           	psect	bitbssCOMRAM
   585  000260                     __pbitbssCOMRAM:
   586                           	callstack 0
   587  000260                     password@flag:
   588                           	callstack 0
   589  000260                     	ds	1
   590                           
   591                           	psect	bssCOMRAM
   592  000024                     __pbssCOMRAM:
   593                           	callstack 0
   594  000024                     	ds	5
   595  000029                     _clock_reg:
   596                           	callstack 0
   597  000029                     	ds	3
   598  00002C                     _adc_reg_val:
   599                           	callstack 0
   600  00002C                     	ds	2
   601  00002E                     _returnvalue:
   602                           	callstack 0
   603  00002E                     	ds	2
   604  000030                     _log:
   605                           	callstack 0
   606  000030                     	ds	2
   607  000032                     _count:
   608                           	callstack 0
   609  000032                     	ds	2
   610  000034                     _delay:
   611                           	callstack 0
   612  000034                     	ds	2
   613  000036                     read_switches@key:
   614                           	callstack 0
   615  000036                     	ds	1
   616  000037                     _key:
   617                           	callstack 0
   618  000037                     	ds	1
   619  000038                     _time:
   620                           	callstack 0
   621  000038                     	ds	9
   622  000041                     _str:
   623                           	callstack 0
   624  000041                     	ds	3
   625                           
   626                           	psect	dataCOMRAM
   627  000044                     __pdataCOMRAM:
   628                           	callstack 0
   629  000044                     display_menu@flag:
   630                           	callstack 0
   631  000044                     	ds	2
   632  000046                     read_switches@once:
   633                           	callstack 0
   634  000046                     	ds	1
   635  000047                     _str_user:
   636                           	callstack 0
   637  000047                     	ds	5
   638                           
   639                           	psect	dataBANK0
   640  000060                     __pdataBANK0:
   641                           	callstack 0
   642  000060                     _menu:
   643                           	callstack 0
   644  000060                     	ds	85
   645  0000B5                     _gear:
   646                           	callstack 0
   647  0000B5                     	ds	27
   648                           
   649                           	psect	bssBANK1
   650  000100                     __pbssBANK1:
   651                           	callstack 0
   652  000100                     _event:
   653                           	callstack 0
   654  000100                     	ds	170
   655                           
   656                           	psect	cstackCOMRAM
   657  000001                     __pcstackCOMRAM:
   658                           	callstack 0
   659  000001                     ?_read_adc:
   660                           	callstack 0
   661  000001                     ?_my_strcmp:
   662                           	callstack 0
   663  000001                     ?___wmul:
   664                           	callstack 0
   665  000001                     ?___awdiv:
   666                           	callstack 0
   667  000001                     ?___awmod:
   668                           	callstack 0
   669  000001                     i2c_write@data:
   670                           	callstack 0
   671  000001                     my_strcmp@str1:
   672                           	callstack 0
   673  000001                     read_switches@detection_type:
   674                           	callstack 0
   675  000001                     putch@byte:
   676                           	callstack 0
   677  000001                     clcd_write@control_bit:
   678                           	callstack 0
   679  000001                     ___wmul@multiplier:
   680                           	callstack 0
   681  000001                     ___awdiv@dividend:
   682                           	callstack 0
   683  000001                     ___awmod@dividend:
   684                           	callstack 0
   685                           
   686                           ; 2 bytes @ 0x0
   687  000001                     	ds	1
   688  000002                     write_ds1307@data:
   689                           	callstack 0
   690  000002                     read_ds1307@address:
   691                           	callstack 0
   692  000002                     my_strcmp@str2:
   693                           	callstack 0
   694  000002                     clcd_write@byte:
   695                           	callstack 0
   696  000002                     write_external_eeprom@data:
   697                           	callstack 0
   698  000002                     read_external_eeprom@address:
   699                           	callstack 0
   700                           
   701                           ; 1 bytes @ 0x1
   702  000002                     	ds	1
   703  000003                     ??_read_adc:
   704  000003                     ??_my_strcmp:
   705  000003                     write_ds1307@address:
   706                           	callstack 0
   707  000003                     read_ds1307@data:
   708                           	callstack 0
   709  000003                     write_external_eeprom@address:
   710                           	callstack 0
   711  000003                     read_external_eeprom@data:
   712                           	callstack 0
   713  000003                     ___wmul@multiplicand:
   714                           	callstack 0
   715  000003                     ___awdiv@divisor:
   716                           	callstack 0
   717  000003                     ___awmod@divisor:
   718                           	callstack 0
   719                           
   720                           ; 2 bytes @ 0x2
   721  000003                     	ds	1
   722  000004                     init_ds1307@dummy:
   723                           	callstack 0
   724  000004                     ___lbdiv@divisor:
   725                           	callstack 0
   726  000004                     ___lbmod@divisor:
   727                           	callstack 0
   728                           
   729                           ; 1 bytes @ 0x3
   730  000004                     	ds	1
   731  000005                     ___awdiv@counter:
   732                           	callstack 0
   733  000005                     ___awmod@counter:
   734                           	callstack 0
   735  000005                     ___lbdiv@dividend:
   736                           	callstack 0
   737  000005                     ___lbmod@dividend:
   738                           	callstack 0
   739  000005                     read_adc@reg_val:
   740                           	callstack 0
   741  000005                     ___wmul@product:
   742                           	callstack 0
   743                           
   744                           ; 2 bytes @ 0x4
   745  000005                     	ds	1
   746  000006                     ___awdiv@sign:
   747                           	callstack 0
   748  000006                     ___awmod@sign:
   749                           	callstack 0
   750  000006                     ___lbdiv@counter:
   751                           	callstack 0
   752  000006                     ___lbmod@counter:
   753                           	callstack 0
   754                           
   755                           ; 1 bytes @ 0x5
   756  000006                     	ds	1
   757  000007                     ??_add_event:
   758  000007                     read_adc@channel:
   759                           	callstack 0
   760  000007                     ___lbdiv@quotient:
   761                           	callstack 0
   762  000007                     ___lbmod@rem:
   763                           	callstack 0
   764  000007                     puts@s:
   765                           	callstack 0
   766  000007                     clcd_print@data:
   767                           	callstack 0
   768  000007                     ___awdiv@quotient:
   769                           	callstack 0
   770                           
   771                           ; 2 bytes @ 0x6
   772  000007                     	ds	1
   773  000008                     ?___lwdiv:
   774                           	callstack 0
   775  000008                     convertval@rem:
   776                           	callstack 0
   777  000008                     clcd_putch@addr:
   778                           	callstack 0
   779  000008                     ___lwdiv@dividend:
   780                           	callstack 0
   781                           
   782                           ; 2 bytes @ 0x7
   783  000008                     	ds	1
   784  000009                     convertval@num:
   785                           	callstack 0
   786  000009                     clcd_print@addr:
   787                           	callstack 0
   788  000009                     clcd_putch@data:
   789                           	callstack 0
   790  000009                     add_event@i:
   791                           	callstack 0
   792                           
   793                           ; 2 bytes @ 0x8
   794  000009                     	ds	1
   795  00000A                     ??_clear_log:
   796  00000A                     ?_password:
   797                           	callstack 0
   798  00000A                     convertval@val:
   799                           	callstack 0
   800  00000A                     download_log@key:
   801                           	callstack 0
   802  00000A                     change_password@j:
   803                           	callstack 0
   804  00000A                     view_log@i:
   805                           	callstack 0
   806  00000A                     ___lwdiv@divisor:
   807                           	callstack 0
   808                           
   809                           ; 2 bytes @ 0x9
   810  00000A                     	ds	1
   811  00000B                     ??_set_time:
   812  00000B                     add_event@j:
   813                           	callstack 0
   814  00000B                     download_log@i:
   815                           	callstack 0
   816                           
   817                           ; 2 bytes @ 0xA
   818  00000B                     	ds	1
   819  00000C                     change_password@pwd_key:
   820                           	callstack 0
   821  00000C                     clear_log@clr:
   822                           	callstack 0
   823  00000C                     ___lwdiv@quotient:
   824                           	callstack 0
   825  00000C                     set_time@wait_209:
   826                           	callstack 0
   827  00000C                     password@str_pass:
   828                           	callstack 0
   829                           
   830                           ; 5 bytes @ 0xB
   831  00000C                     	ds	1
   832  00000D                     change_password@change:
   833                           	callstack 0
   834  00000D                     clear_log@i:
   835                           	callstack 0
   836                           
   837                           ; 2 bytes @ 0xC
   838  00000D                     	ds	1
   839  00000E                     ___lwdiv@counter:
   840                           	callstack 0
   841                           
   842                           ; 1 bytes @ 0xD
   843  00000E                     	ds	1
   844  00000F                     clear_log@j:
   845                           	callstack 0
   846                           
   847                           ; 2 bytes @ 0xE
   848  00000F                     	ds	1
   849  000010                     set_time@prekey:
   850                           	callstack 0
   851                           
   852                           ; 1 bytes @ 0xF
   853  000010                     	ds	1
   854  000011                     set_time@SEC:
   855                           	callstack 0
   856  000011                     password@wait:
   857                           	callstack 0
   858                           
   859                           ; 4 bytes @ 0x10
   860  000011                     	ds	1
   861  000012                     set_time@MIN:
   862                           	callstack 0
   863                           
   864                           ; 1 bytes @ 0x11
   865  000012                     	ds	1
   866  000013                     set_time@HOUR:
   867                           	callstack 0
   868                           
   869                           ; 1 bytes @ 0x12
   870  000013                     	ds	1
   871  000014                     set_time@key:
   872                           	callstack 0
   873                           
   874                           ; 1 bytes @ 0x13
   875  000014                     	ds	1
   876  000015                     set_time@secs:
   877                           	callstack 0
   878  000015                     password@wait_189:
   879                           	callstack 0
   880                           
   881                           ; 4 bytes @ 0x14
   882  000015                     	ds	1
   883  000016                     set_time@mins:
   884                           	callstack 0
   885                           
   886                           ; 1 bytes @ 0x15
   887  000016                     	ds	1
   888  000017                     set_time@hour:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x16
   892  000017                     	ds	1
   893  000018                     set_time@flag:
   894                           	callstack 0
   895                           
   896                           ; 4 bytes @ 0x17
   897  000018                     	ds	1
   898  000019                     password@key:
   899                           	callstack 0
   900                           
   901                           ; 1 bytes @ 0x18
   902  000019                     	ds	1
   903  00001A                     password@i:
   904                           	callstack 0
   905                           
   906                           ; 2 bytes @ 0x19
   907  00001A                     	ds	2
   908  00001C                     ??_display_menu:
   909                           
   910                           ; 1 bytes @ 0x1B
   911  00001C                     	ds	1
   912  00001D                     display_menu@lkey:
   913                           	callstack 0
   914                           
   915                           ; 1 bytes @ 0x1C
   916  00001D                     	ds	1
   917  00001E                     display_menu@key:
   918                           	callstack 0
   919                           
   920                           ; 1 bytes @ 0x1D
   921  00001E                     	ds	1
   922  00001F                     display_menu@i:
   923                           	callstack 0
   924                           
   925                           ; 2 bytes @ 0x1E
   926  00001F                     	ds	2
   927  000021                     ??_main:
   928                           
   929                           ; 1 bytes @ 0x20
   930  000021                     	ds	1
   931  000022                     main@i:
   932                           	callstack 0
   933                           
   934                           ; 2 bytes @ 0x21
   935  000022                     	ds	2
   936                           
   937 ;;
   938 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   939 ;;
   940 ;; *************** function _main *****************
   941 ;; Defined at:
   942 ;;		line 635 in file "main.c"
   943 ;; Parameters:    Size  Location     Type
   944 ;;		None
   945 ;; Auto vars:     Size  Location     Type
   946 ;;  i               2   33[COMRAM] int 
   947 ;; Return value:  Size  Location     Type
   948 ;;                  1    wreg      void 
   949 ;; Registers used:
   950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   951 ;; Tracked objects:
   952 ;;		On entry : 0/0
   953 ;;		On exit  : 0/0
   954 ;;		Unchanged: 0/0
   955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   956 ;;      Params:         0       0       0       0       0       0       0
   957 ;;      Locals:         2       0       0       0       0       0       0
   958 ;;      Temps:          1       0       0       0       0       0       0
   959 ;;      Totals:         3       0       0       0       0       0       0
   960 ;;Total ram usage:        3 bytes
   961 ;; Hardware stack levels required when called: 6
   962 ;; This function calls:
   963 ;;		___awdiv
   964 ;;		___awmod
   965 ;;		___lwdiv
   966 ;;		_add_event
   967 ;;		_clcd_print
   968 ;;		_clcd_write
   969 ;;		_display_menu
   970 ;;		_display_time
   971 ;;		_get_time
   972 ;;		_init_config
   973 ;;		_password
   974 ;;		_read_adc
   975 ;;		_read_switches
   976 ;; This function is called by:
   977 ;;		Startup code after reset
   978 ;; This function uses a non-reentrant model
   979 ;;
   980                           
   981                           	psect	text0
   982  0010FE                     __ptext0:
   983                           	callstack 0
   984  0010FE                     _main:
   985                           	callstack 25
   986                           
   987                           ;main.c: 638: init_config();
   988                           
   989                           ;incstack = 0
   990  0010FE  ECBE  F00C         	call	_init_config	;wreg free
   991  001102                     l3315:
   992                           
   993                           ;main.c: 641: {;main.c: 642: adc_reg_val = ((read_adc(0x04)) / 10);
   994  001102  0E04               	movlw	4
   995  001104  EC68  F00C         	call	_read_adc
   996  001108  C001  F008         	movff	?_read_adc,___lwdiv@dividend
   997  00110C  C002  F009         	movff	?_read_adc+1,___lwdiv@dividend+1
   998  001110  0E00               	movlw	0
   999  001112  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  1000  001114  0E0A               	movlw	10
  1001  001116  6E0A               	movwf	___lwdiv@divisor^0,c
  1002  001118  ECFD  F00B         	call	___lwdiv	;wreg free
  1003  00111C  C008  F02C         	movff	?___lwdiv,_adc_reg_val
  1004  001120  C009  F02D         	movff	?___lwdiv+1,_adc_reg_val+1
  1005                           
  1006                           ;main.c: 644: if(adc_reg_val >= 100)
  1007  001124  BE2D               	btfsc	(_adc_reg_val+1)^0,7,c
  1008  001126  D00A               	goto	l349
  1009  001128  502D               	movf	(_adc_reg_val+1)^0,w,c
  1010  00112A  E104               	bnz	u2620
  1011  00112C  0E64               	movlw	100
  1012  00112E  5C2C               	subwf	_adc_reg_val^0,w,c
  1013  001130  A0D8               	btfss	status,0,c
  1014  001132  D004               	goto	l349
  1015  001134                     u2620:
  1016                           
  1017                           ;main.c: 645: {;main.c: 646: adc_reg_val = 99;
  1018  001134  0E00               	movlw	0
  1019  001136  6E2D               	movwf	(_adc_reg_val+1)^0,c
  1020  001138  0E63               	movlw	99
  1021  00113A  6E2C               	movwf	_adc_reg_val^0,c
  1022  00113C                     l349:
  1023                           
  1024                           ;main.c: 647: };main.c: 649: str[2] = '\0';
  1025  00113C  0E00               	movlw	0
  1026  00113E  6E43               	movwf	(_str+2)^0,c
  1027                           
  1028                           ;main.c: 651: for(int i=1; i>=0; i--)
  1029  001140  0E00               	movlw	0
  1030  001142  6E23               	movwf	(main@i+1)^0,c
  1031  001144  0E01               	movlw	1
  1032  001146  6E22               	movwf	main@i^0,c
  1033  001148                     l3325:
  1034                           
  1035                           ;main.c: 652: {;main.c: 653: str[i] = (adc_reg_val % 10) + '0';
  1036  001148  5022               	movf	main@i^0,w,c
  1037  00114A  0F41               	addlw	low _str
  1038  00114C  6ED9               	movwf	fsr2l,c
  1039  00114E  6ADA               	clrf	fsr2h,c
  1040  001150  C02C  F001         	movff	_adc_reg_val,___awmod@dividend
  1041  001154  C02D  F002         	movff	_adc_reg_val+1,___awmod@dividend+1
  1042  001158  0E00               	movlw	0
  1043  00115A  6E04               	movwf	(___awmod@divisor+1)^0,c
  1044  00115C  0E0A               	movlw	10
  1045  00115E  6E03               	movwf	___awmod@divisor^0,c
  1046  001160  ECDB  F00A         	call	___awmod	;wreg free
  1047  001164  5001               	movf	?___awmod^0,w,c
  1048  001166  0F30               	addlw	48
  1049  001168  6EDF               	movwf	indf2,c
  1050                           
  1051                           ;main.c: 654: adc_reg_val = adc_reg_val / 10 ;
  1052  00116A  C02C  F001         	movff	_adc_reg_val,___awdiv@dividend
  1053  00116E  C02D  F002         	movff	_adc_reg_val+1,___awdiv@dividend+1
  1054  001172  0E00               	movlw	0
  1055  001174  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1056  001176  0E0A               	movlw	10
  1057  001178  6E03               	movwf	___awdiv@divisor^0,c
  1058  00117A  EC25  F00A         	call	___awdiv	;wreg free
  1059  00117E  C001  F02C         	movff	?___awdiv,_adc_reg_val
  1060  001182  C002  F02D         	movff	?___awdiv+1,_adc_reg_val+1
  1061  001186  0622               	decf	main@i^0,f,c
  1062  001188  A0D8               	btfss	status,0,c
  1063  00118A  0623               	decf	(main@i+1)^0,f,c
  1064  00118C  AE23               	btfss	(main@i+1)^0,7,c
  1065  00118E  D7DC               	goto	l3325
  1066                           
  1067                           ;main.c: 655: };main.c: 657: clcd_print(str, (0xC0 + (14)));
  1068  001190  0E41               	movlw	low _str
  1069  001192  6E07               	movwf	clcd_print@data^0,c
  1070  001194  6A08               	clrf	(clcd_print@data+1)^0,c
  1071  001196  0ECE               	movlw	206
  1072  001198  6E09               	movwf	clcd_print@addr^0,c
  1073  00119A  EC79  F00B         	call	_clcd_print	;wreg free
  1074                           
  1075                           ;main.c: 659: get_time();
  1076  00119E  EC13  F00B         	call	_get_time	;wreg free
  1077                           
  1078                           ;main.c: 660: display_time();
  1079  0011A2  EC9C  F00D         	call	_display_time	;wreg free
  1080                           
  1081                           ;main.c: 662: key = read_switches(1);
  1082  0011A6  0E01               	movlw	1
  1083  0011A8  EC49  F00C         	call	_read_switches
  1084  0011AC  6E37               	movwf	_key^0,c
  1085                           
  1086                           ;main.c: 665: if(key == 1)
  1087  0011AE  0437               	decf	_key^0,w,c
  1088  0011B0  A4D8               	btfss	status,2,c
  1089  0011B2  D006               	goto	l3345
  1090                           
  1091                           ;main.c: 666: {;main.c: 667: count = 8;
  1092  0011B4  0E00               	movlw	0
  1093  0011B6  6E33               	movwf	(_count+1)^0,c
  1094  0011B8  0E08               	movlw	8
  1095  0011BA  6E32               	movwf	_count^0,c
  1096                           
  1097                           ;main.c: 668: add_event();
  1098  0011BC  EC0A  F006         	call	_add_event	;wreg free
  1099  0011C0                     l3345:
  1100                           
  1101                           ;main.c: 669: };main.c: 672: if(key == 2)
  1102  0011C0  0E02               	movlw	2
  1103  0011C2  1837               	xorwf	_key^0,w,c
  1104  0011C4  A4D8               	btfss	status,2,c
  1105  0011C6  D00C               	goto	l3353
  1106                           
  1107                           ;main.c: 673: {;main.c: 674: if(count<7)
  1108  0011C8  BE33               	btfsc	(_count+1)^0,7,c
  1109  0011CA  D006               	goto	u2660
  1110  0011CC  5033               	movf	(_count+1)^0,w,c
  1111  0011CE  E106               	bnz	l3351
  1112  0011D0  0E07               	movlw	7
  1113  0011D2  5C32               	subwf	_count^0,w,c
  1114  0011D4  B0D8               	btfsc	status,0,c
  1115  0011D6  D002               	goto	l3351
  1116  0011D8                     u2660:
  1117                           
  1118                           ;main.c: 675: count++;
  1119  0011D8  4A32               	infsnz	_count^0,f,c
  1120  0011DA  2A33               	incf	(_count+1)^0,f,c
  1121  0011DC                     l3351:
  1122                           
  1123                           ;main.c: 676: add_event();
  1124  0011DC  EC0A  F006         	call	_add_event	;wreg free
  1125  0011E0                     l3353:
  1126                           
  1127                           ;main.c: 677: };main.c: 680: if(key == 3)
  1128  0011E0  0E03               	movlw	3
  1129  0011E2  1837               	xorwf	_key^0,w,c
  1130  0011E4  A4D8               	btfss	status,2,c
  1131  0011E6  D00D               	goto	l3361
  1132                           
  1133                           ;main.c: 681: {;main.c: 683: if(count > 1)
  1134  0011E8  BE33               	btfsc	(_count+1)^0,7,c
  1135  0011EA  D009               	goto	l3359
  1136  0011EC  5033               	movf	(_count+1)^0,w,c
  1137  0011EE  E104               	bnz	u2680
  1138  0011F0  0E02               	movlw	2
  1139  0011F2  5C32               	subwf	_count^0,w,c
  1140  0011F4  A0D8               	btfss	status,0,c
  1141  0011F6  D003               	goto	l3359
  1142  0011F8                     u2680:
  1143                           
  1144                           ;main.c: 684: count--;
  1145  0011F8  0632               	decf	_count^0,f,c
  1146  0011FA  A0D8               	btfss	status,0,c
  1147  0011FC  0633               	decf	(_count+1)^0,f,c
  1148  0011FE                     l3359:
  1149                           
  1150                           ;main.c: 685: add_event();
  1151  0011FE  EC0A  F006         	call	_add_event	;wreg free
  1152  001202                     l3361:
  1153                           
  1154                           ;main.c: 686: };main.c: 688: clcd_print(gear[count], (0xC0 + (10)));
  1155  001202  5032               	movf	_count^0,w,c
  1156  001204  0D03               	mullw	3
  1157  001206  50F3               	movf	243,w,c
  1158  001208  0FB5               	addlw	low _gear
  1159  00120A  6E21               	movwf	??_main^0,c
  1160  00120C  C021  F007         	movff	??_main,clcd_print@data
  1161  001210  6A08               	clrf	(clcd_print@data+1)^0,c
  1162  001212  0ECA               	movlw	202
  1163  001214  6E09               	movwf	clcd_print@addr^0,c
  1164  001216  EC79  F00B         	call	_clcd_print	;wreg free
  1165                           
  1166                           ;main.c: 689: if(key == 11)
  1167  00121A  0E0B               	movlw	11
  1168  00121C  1837               	xorwf	_key^0,w,c
  1169  00121E  A4D8               	btfss	status,2,c
  1170  001220  D770               	goto	l3315
  1171                           
  1172                           ;main.c: 690: {;main.c: 691: clcd_write(0x01, 0);
  1173  001222  0E00               	movlw	0
  1174  001224  6E01               	movwf	clcd_write@control_bit^0,c
  1175  001226  0E01               	movlw	1
  1176  001228  EC27  F00D         	call	_clcd_write
  1177                           
  1178                           ;main.c: 692: returnvalue = password();
  1179  00122C  EC04  F007         	call	_password	;wreg free
  1180  001230  C00A  F02E         	movff	?_password,_returnvalue
  1181  001234  C00B  F02F         	movff	?_password+1,_returnvalue+1
  1182                           
  1183                           ;main.c: 693: if(returnvalue == 1)
  1184  001238  042E               	decf	_returnvalue^0,w,c
  1185  00123A  102F               	iorwf	(_returnvalue+1)^0,w,c
  1186  00123C  A4D8               	btfss	status,2,c
  1187  00123E  D761               	goto	l3315
  1188                           
  1189                           ;main.c: 694: {;main.c: 695: display_menu();
  1190  001240  EC64  F003         	call	_display_menu	;wreg free
  1191  001244  D75E               	goto	l3315
  1192  001246                     __end_of_main:
  1193                           	callstack 0
  1194                           
  1195 ;; *************** function _read_adc *****************
  1196 ;; Defined at:
  1197 ;;		line 44 in file "adc.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;  channel         1    wreg     unsigned char 
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;  channel         1    6[COMRAM] unsigned char 
  1202 ;;  reg_val         2    4[COMRAM] unsigned short 
  1203 ;; Return value:  Size  Location     Type
  1204 ;;                  2    0[COMRAM] unsigned short 
  1205 ;; Registers used:
  1206 ;;		wreg, status,2, status,0
  1207 ;; Tracked objects:
  1208 ;;		On entry : 0/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1212 ;;      Params:         2       0       0       0       0       0       0
  1213 ;;      Locals:         3       0       0       0       0       0       0
  1214 ;;      Temps:          2       0       0       0       0       0       0
  1215 ;;      Totals:         7       0       0       0       0       0       0
  1216 ;;Total ram usage:        7 bytes
  1217 ;; Hardware stack levels used: 1
  1218 ;; This function calls:
  1219 ;;		Nothing
  1220 ;; This function is called by:
  1221 ;;		_main
  1222 ;; This function uses a non-reentrant model
  1223 ;;
  1224                           
  1225                           	psect	text1
  1226  0018D0                     __ptext1:
  1227                           	callstack 0
  1228  0018D0                     _read_adc:
  1229                           	callstack 30
  1230                           
  1231                           ;incstack = 0
  1232                           ;read_adc@channel stored from wreg
  1233  0018D0  6E07               	movwf	read_adc@channel^0,c
  1234                           
  1235                           ;adc.c: 46: unsigned short reg_val;;adc.c: 50: ADCON0 = (ADCON0 & 0xC3) | (channel << 2)
      +                          ;
  1236  0018D2  C007  F003         	movff	read_adc@channel,??_read_adc
  1237  0018D6  90D8               	bcf	status,0,c
  1238  0018D8  3603               	rlcf	??_read_adc^0,f,c
  1239  0018DA  90D8               	bcf	status,0,c
  1240  0018DC  3603               	rlcf	??_read_adc^0,f,c
  1241  0018DE  50C2               	movf	194,w,c	;volatile
  1242  0018E0  0BC3               	andlw	195
  1243  0018E2  1003               	iorwf	??_read_adc^0,w,c
  1244  0018E4  6EC2               	movwf	194,c	;volatile
  1245                           
  1246                           ;adc.c: 53: GO = 1;
  1247  0018E6  82C2               	bsf	4034,1,c	;volatile
  1248  0018E8                     l36:
  1249  0018E8  B2C2               	btfsc	4034,1,c	;volatile
  1250  0018EA  D7FE               	goto	l36
  1251                           
  1252                           ;adc.c: 55: reg_val = (ADRESH << 8) | ADRESL;
  1253  0018EC  50C3               	movf	195,w,c	;volatile
  1254  0018EE  CFC4 F003          	movff	4036,??_read_adc	;volatile
  1255  0018F2  6A04               	clrf	(??_read_adc+1)^0,c
  1256  0018F4  C003  F004         	movff	??_read_adc,??_read_adc+1
  1257  0018F8  6A03               	clrf	??_read_adc^0,c
  1258  0018FA  1003               	iorwf	??_read_adc^0,w,c
  1259  0018FC  6E05               	movwf	read_adc@reg_val^0,c
  1260  0018FE  5004               	movf	(??_read_adc+1)^0,w,c
  1261  001900  6E06               	movwf	(read_adc@reg_val+1)^0,c
  1262                           
  1263                           ;adc.c: 57: return reg_val;
  1264  001902  C005  F001         	movff	read_adc@reg_val,?_read_adc
  1265  001906  C006  F002         	movff	read_adc@reg_val+1,?_read_adc+1
  1266  00190A  0012               	return		;funcret
  1267  00190C                     __end_of_read_adc:
  1268                           	callstack 0
  1269                           
  1270 ;; *************** function _password *****************
  1271 ;; Defined at:
  1272 ;;		line 88 in file "main.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;		None
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;  wait            4   20[COMRAM] long 
  1277 ;;  wait            4   16[COMRAM] long 
  1278 ;;  str_pass        5   11[COMRAM] unsigned char [5]
  1279 ;;  i               2   25[COMRAM] short 
  1280 ;;  key             1   24[COMRAM] unsigned char 
  1281 ;; Return value:  Size  Location     Type
  1282 ;;                  2    9[COMRAM] int 
  1283 ;; Registers used:
  1284 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1290 ;;      Params:         2       0       0       0       0       0       0
  1291 ;;      Locals:        16       0       0       0       0       0       0
  1292 ;;      Temps:          0       0       0       0       0       0       0
  1293 ;;      Totals:        18       0       0       0       0       0       0
  1294 ;;Total ram usage:       18 bytes
  1295 ;; Hardware stack levels used: 1
  1296 ;; Hardware stack levels required when called: 2
  1297 ;; This function calls:
  1298 ;;		_clcd_print
  1299 ;;		_clcd_putch
  1300 ;;		_clcd_write
  1301 ;;		_my_strcmp
  1302 ;;		_read_switches
  1303 ;; This function is called by:
  1304 ;;		_main
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           	psect	text2
  1309  000E08                     __ptext2:
  1310                           	callstack 0
  1311  000E08                     _password:
  1312                           	callstack 28
  1313                           
  1314                           ;main.c: 90: short i = 0;
  1315                           
  1316                           ;incstack = 0
  1317  000E08  0E00               	movlw	0
  1318  000E0A  6E1B               	movwf	(password@i+1)^0,c
  1319  000E0C  0E00               	movlw	0
  1320  000E0E  6E1A               	movwf	password@i^0,c
  1321                           
  1322                           ;main.c: 91: static bit flag = 0;;main.c: 92: char key;;main.c: 93: char str_pass[5]="";
  1323  000E10  EE20  F00C         	lfsr	2,password@str_pass
  1324  000E14  0E04               	movlw	4
  1325  000E16                     u2181:
  1326  000E16  6ADE               	clrf	postinc2,c
  1327  000E18  06E8               	decf	wreg,f,c
  1328  000E1A  E2FD               	bc	u2181
  1329  000E1C                     l3013:
  1330                           
  1331                           ;main.c: 95: {;main.c: 96: key = read_switches(1);
  1332  000E1C  0E01               	movlw	1
  1333  000E1E  EC49  F00C         	call	_read_switches
  1334  000E22  6E19               	movwf	password@key^0,c
  1335                           
  1336                           ;main.c: 97: if(i < 4)
  1337  000E24  BE1B               	btfsc	(password@i+1)^0,7,c
  1338  000E26  D006               	goto	u2190
  1339  000E28  501B               	movf	(password@i+1)^0,w,c
  1340  000E2A  E132               	bnz	l3035
  1341  000E2C  0E04               	movlw	4
  1342  000E2E  5C1A               	subwf	password@i^0,w,c
  1343  000E30  B0D8               	btfsc	status,0,c
  1344  000E32  D02E               	goto	l3035
  1345  000E34                     u2190:
  1346                           
  1347                           ;main.c: 98: {;main.c: 99: clcd_print("ENTER PASSWORD" , (0x80 + (0)));
  1348  000E34  0E6E               	movlw	low STR_1
  1349  000E36  6E07               	movwf	clcd_print@data^0,c
  1350  000E38  5007               	movf	clcd_print@data^0,w,c
  1351  000E3A  A4D8               	btfss	status,2,c
  1352  000E3C  0E06               	movlw	high __smallconst
  1353  000E3E  6E08               	movwf	(clcd_print@data+1)^0,c
  1354  000E40  0E80               	movlw	128
  1355  000E42  6E09               	movwf	clcd_print@addr^0,c
  1356  000E44  EC79  F00B         	call	_clcd_print	;wreg free
  1357                           
  1358                           ;main.c: 100: if(key == 11)
  1359  000E48  0E0B               	movlw	11
  1360  000E4A  1819               	xorwf	password@key^0,w,c
  1361  000E4C  A4D8               	btfss	status,2,c
  1362  000E4E  D00E               	goto	l3027
  1363                           
  1364                           ;main.c: 101: {;main.c: 102: str_pass[i++] = '1';
  1365  000E50  501A               	movf	password@i^0,w,c
  1366  000E52  0F0C               	addlw	low password@str_pass
  1367  000E54  6ED9               	movwf	fsr2l,c
  1368  000E56  6ADA               	clrf	fsr2h,c
  1369  000E58  0E31               	movlw	49
  1370  000E5A  6EDF               	movwf	indf2,c
  1371  000E5C  4A1A               	infsnz	password@i^0,f,c
  1372  000E5E  2A1B               	incf	(password@i+1)^0,f,c
  1373                           
  1374                           ;main.c: 103: clcd_putch('*' , (0xC0 + (i)));
  1375  000E60  501A               	movf	password@i^0,w,c
  1376  000E62  0FC0               	addlw	192
  1377  000E64  6E08               	movwf	clcd_putch@addr^0,c
  1378  000E66  0E2A               	movlw	42
  1379  000E68  EC7C  F00D         	call	_clcd_putch
  1380  000E6C                     l3027:
  1381                           
  1382                           ;main.c: 104: };main.c: 105: if(key == 12)
  1383  000E6C  0E0C               	movlw	12
  1384  000E6E  1819               	xorwf	password@key^0,w,c
  1385  000E70  A4D8               	btfss	status,2,c
  1386  000E72  D00E               	goto	l3035
  1387                           
  1388                           ;main.c: 106: {;main.c: 107: str_pass[i++] = '0';
  1389  000E74  501A               	movf	password@i^0,w,c
  1390  000E76  0F0C               	addlw	low password@str_pass
  1391  000E78  6ED9               	movwf	fsr2l,c
  1392  000E7A  6ADA               	clrf	fsr2h,c
  1393  000E7C  0E30               	movlw	48
  1394  000E7E  6EDF               	movwf	indf2,c
  1395  000E80  4A1A               	infsnz	password@i^0,f,c
  1396  000E82  2A1B               	incf	(password@i+1)^0,f,c
  1397                           
  1398                           ;main.c: 108: clcd_putch('*' , (0xC0 + (i)));
  1399  000E84  501A               	movf	password@i^0,w,c
  1400  000E86  0FC0               	addlw	192
  1401  000E88  6E08               	movwf	clcd_putch@addr^0,c
  1402  000E8A  0E2A               	movlw	42
  1403  000E8C  EC7C  F00D         	call	_clcd_putch
  1404  000E90                     l3035:
  1405                           
  1406                           ;main.c: 109: };main.c: 110: };main.c: 112: if(i == 4)
  1407  000E90  0E04               	movlw	4
  1408  000E92  181A               	xorwf	password@i^0,w,c
  1409  000E94  101B               	iorwf	(password@i+1)^0,w,c
  1410  000E96  A4D8               	btfss	status,2,c
  1411  000E98  D007               	goto	l3041
  1412                           
  1413                           ;main.c: 113: {;main.c: 114: str_pass[i] = '\0';
  1414  000E9A  501A               	movf	password@i^0,w,c
  1415  000E9C  0F0C               	addlw	low password@str_pass
  1416  000E9E  6ED9               	movwf	fsr2l,c
  1417  000EA0  6ADA               	clrf	fsr2h,c
  1418  000EA2  0E00               	movlw	0
  1419  000EA4  6EDF               	movwf	indf2,c
  1420                           
  1421                           ;main.c: 115: flag = 1;
  1422  000EA6  804C               	bsf	(password@flag/(0+8))^0,password@flag& (0+7),c
  1423  000EA8                     l3041:
  1424                           
  1425                           ;main.c: 116: };main.c: 118: if(flag)
  1426  000EA8  A04C               	btfss	(password@flag/(0+8))^0,password@flag& (0+7),c
  1427  000EAA  D7B8               	goto	l3013
  1428                           
  1429                           ;main.c: 119: {;main.c: 121: if(my_strcmp(str_user , str_pass) == 0)
  1430  000EAC  0E47               	movlw	low _str_user
  1431  000EAE  6E01               	movwf	my_strcmp@str1^0,c
  1432  000EB0  0E0C               	movlw	low password@str_pass
  1433  000EB2  6E02               	movwf	my_strcmp@str2^0,c
  1434  000EB4  ECA9  F00B         	call	_my_strcmp	;wreg free
  1435  000EB8  5001               	movf	?_my_strcmp^0,w,c
  1436  000EBA  1002               	iorwf	(?_my_strcmp+1)^0,w,c
  1437  000EBC  A4D8               	btfss	status,2,c
  1438  000EBE  D037               	goto	l3065
  1439                           
  1440                           ;main.c: 122: {;main.c: 123: clcd_write(0x01, 0);
  1441  000EC0  0E00               	movlw	0
  1442  000EC2  6E01               	movwf	clcd_write@control_bit^0,c
  1443  000EC4  0E01               	movlw	1
  1444  000EC6  EC27  F00D         	call	_clcd_write
  1445                           
  1446                           ;main.c: 124: clcd_print("Password Entered" , (0x80 + (0)));
  1447  000ECA  0E5D               	movlw	low STR_2
  1448  000ECC  6E07               	movwf	clcd_print@data^0,c
  1449  000ECE  5007               	movf	clcd_print@data^0,w,c
  1450  000ED0  A4D8               	btfss	status,2,c
  1451  000ED2  0E06               	movlw	high __smallconst
  1452  000ED4  6E08               	movwf	(clcd_print@data+1)^0,c
  1453  000ED6  0E80               	movlw	128
  1454  000ED8  6E09               	movwf	clcd_print@addr^0,c
  1455  000EDA  EC79  F00B         	call	_clcd_print	;wreg free
  1456                           
  1457                           ;main.c: 125: clcd_print("Successfully" , (0xC0 + (4)));
  1458  000EDE  0E9A               	movlw	low STR_3
  1459  000EE0  6E07               	movwf	clcd_print@data^0,c
  1460  000EE2  5007               	movf	clcd_print@data^0,w,c
  1461  000EE4  A4D8               	btfss	status,2,c
  1462  000EE6  0E06               	movlw	high __smallconst
  1463  000EE8  6E08               	movwf	(clcd_print@data+1)^0,c
  1464  000EEA  0EC4               	movlw	196
  1465  000EEC  6E09               	movwf	clcd_print@addr^0,c
  1466  000EEE  EC79  F00B         	call	_clcd_print	;wreg free
  1467                           
  1468                           ;main.c: 126: for(long wait = 0 ; wait < 50000 ; wait++);
  1469  000EF2  0E00               	movlw	0
  1470  000EF4  6E11               	movwf	password@wait^0,c
  1471  000EF6  0E00               	movlw	0
  1472  000EF8  6E12               	movwf	(password@wait+1)^0,c
  1473  000EFA  0E00               	movlw	0
  1474  000EFC  6E13               	movwf	(password@wait+2)^0,c
  1475  000EFE  0E00               	movlw	0
  1476  000F00  6E14               	movwf	(password@wait+3)^0,c
  1477  000F02                     l3057:
  1478  000F02  0E01               	movlw	1
  1479  000F04  2611               	addwf	password@wait^0,f,c
  1480  000F06  0E00               	movlw	0
  1481  000F08  2212               	addwfc	(password@wait+1)^0,f,c
  1482  000F0A  2213               	addwfc	(password@wait+2)^0,f,c
  1483  000F0C  2214               	addwfc	(password@wait+3)^0,f,c
  1484  000F0E  BE14               	btfsc	(password@wait+3)^0,7,c
  1485  000F10  D7F8               	goto	l3057
  1486  000F12  5014               	movf	(password@wait+3)^0,w,c
  1487  000F14  1013               	iorwf	(password@wait+2)^0,w,c
  1488  000F16  E106               	bnz	u2250
  1489  000F18  0E50               	movlw	80
  1490  000F1A  5C11               	subwf	password@wait^0,w,c
  1491  000F1C  0EC3               	movlw	195
  1492  000F1E  5812               	subwfb	(password@wait+1)^0,w,c
  1493  000F20  A0D8               	btfss	status,0,c
  1494  000F22  D7EF               	goto	l3057
  1495  000F24                     u2250:
  1496                           
  1497                           ;main.c: 127: return 1;
  1498  000F24  0E00               	movlw	0
  1499  000F26  6E0B               	movwf	(?_password+1)^0,c
  1500  000F28  0E01               	movlw	1
  1501  000F2A  6E0A               	movwf	?_password^0,c
  1502  000F2C  0012               	return	
  1503  000F2E                     l3065:
  1504                           
  1505                           ;main.c: 129: else;main.c: 130: {;main.c: 131: clcd_write(0x01, 0);
  1506  000F2E  0E00               	movlw	0
  1507  000F30  6E01               	movwf	clcd_write@control_bit^0,c
  1508  000F32  0E01               	movlw	1
  1509  000F34  EC27  F00D         	call	_clcd_write
  1510                           
  1511                           ;main.c: 132: clcd_print("Password Wrong" , (0x80 + (0)));
  1512  000F38  0E7D               	movlw	low STR_4
  1513  000F3A  6E07               	movwf	clcd_print@data^0,c
  1514  000F3C  5007               	movf	clcd_print@data^0,w,c
  1515  000F3E  A4D8               	btfss	status,2,c
  1516  000F40  0E06               	movlw	high __smallconst
  1517  000F42  6E08               	movwf	(clcd_print@data+1)^0,c
  1518  000F44  0E80               	movlw	128
  1519  000F46  6E09               	movwf	clcd_print@addr^0,c
  1520  000F48  EC79  F00B         	call	_clcd_print	;wreg free
  1521                           
  1522                           ;main.c: 134: for(long wait=0;wait<500000;wait++);
  1523  000F4C  0E00               	movlw	0
  1524  000F4E  6E15               	movwf	password@wait_189^0,c
  1525  000F50  0E00               	movlw	0
  1526  000F52  6E16               	movwf	(password@wait_189+1)^0,c
  1527  000F54  0E00               	movlw	0
  1528  000F56  6E17               	movwf	(password@wait_189+2)^0,c
  1529  000F58  0E00               	movlw	0
  1530  000F5A  6E18               	movwf	(password@wait_189+3)^0,c
  1531  000F5C                     l3075:
  1532  000F5C  0E01               	movlw	1
  1533  000F5E  2615               	addwf	password@wait_189^0,f,c
  1534  000F60  0E00               	movlw	0
  1535  000F62  2216               	addwfc	(password@wait_189+1)^0,f,c
  1536  000F64  2217               	addwfc	(password@wait_189+2)^0,f,c
  1537  000F66  2218               	addwfc	(password@wait_189+3)^0,f,c
  1538  000F68  BE18               	btfsc	(password@wait_189+3)^0,7,c
  1539  000F6A  D7F8               	goto	l3075
  1540  000F6C  5018               	movf	(password@wait_189+3)^0,w,c
  1541  000F6E  E108               	bnz	u2260
  1542  000F70  0E20               	movlw	32
  1543  000F72  5C15               	subwf	password@wait_189^0,w,c
  1544  000F74  0EA1               	movlw	161
  1545  000F76  5816               	subwfb	(password@wait_189+1)^0,w,c
  1546  000F78  0E07               	movlw	7
  1547  000F7A  5817               	subwfb	(password@wait_189+2)^0,w,c
  1548  000F7C  A0D8               	btfss	status,0,c
  1549  000F7E  D7EE               	goto	l3075
  1550  000F80                     u2260:
  1551                           
  1552                           ;main.c: 135: {;main.c: 136: i = 0;
  1553  000F80  0E00               	movlw	0
  1554  000F82  6E1B               	movwf	(password@i+1)^0,c
  1555  000F84  0E00               	movlw	0
  1556  000F86  6E1A               	movwf	password@i^0,c
  1557                           
  1558                           ;main.c: 137: clcd_write(0x01, 0);
  1559  000F88  0E00               	movlw	0
  1560  000F8A  6E01               	movwf	clcd_write@control_bit^0,c
  1561  000F8C  0E01               	movlw	1
  1562  000F8E  EC27  F00D         	call	_clcd_write
  1563                           
  1564                           ;main.c: 138: };main.c: 139: };main.c: 141: flag = 0;
  1565  000F92  904C               	bcf	(password@flag/(0+8))^0,password@flag& (0+7),c
  1566  000F94  D743               	goto	l3013
  1567  000F96                     __end_of_password:
  1568                           	callstack 0
  1569                           
  1570 ;; *************** function _my_strcmp *****************
  1571 ;; Defined at:
  1572 ;;		line 77 in file "main.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;  str1            1    0[COMRAM] PTR unsigned char 
  1575 ;;		 -> str_user(5), 
  1576 ;;  str2            1    1[COMRAM] PTR unsigned char 
  1577 ;;		 -> password@str_pass(5), 
  1578 ;; Auto vars:     Size  Location     Type
  1579 ;;		None
  1580 ;; Return value:  Size  Location     Type
  1581 ;;                  2    0[COMRAM] int 
  1582 ;; Registers used:
  1583 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1589 ;;      Params:         2       0       0       0       0       0       0
  1590 ;;      Locals:         0       0       0       0       0       0       0
  1591 ;;      Temps:          2       0       0       0       0       0       0
  1592 ;;      Totals:         4       0       0       0       0       0       0
  1593 ;;Total ram usage:        4 bytes
  1594 ;; Hardware stack levels used: 1
  1595 ;; This function calls:
  1596 ;;		Nothing
  1597 ;; This function is called by:
  1598 ;;		_password
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           	psect	text3
  1603  001752                     __ptext3:
  1604                           	callstack 0
  1605  001752                     _my_strcmp:
  1606                           	callstack 29
  1607                           
  1608                           ;main.c: 79: while(*str1 && *str2)
  1609                           
  1610                           ;incstack = 0
  1611  001752  D01D               	goto	l2657
  1612  001754                     l2649:
  1613                           
  1614                           ;main.c: 80: {;main.c: 81: if(*str1 != *str2)
  1615  001754  5002               	movf	my_strcmp@str2^0,w,c
  1616  001756  6ED9               	movwf	fsr2l,c
  1617  001758  6ADA               	clrf	fsr2h,c
  1618  00175A  5001               	movf	my_strcmp@str1^0,w,c
  1619  00175C  6EE1               	movwf	fsr1l,c
  1620  00175E  6AE2               	clrf	fsr1h,c
  1621  001760  50DE               	movf	postinc2,w,c
  1622  001762  18E6               	xorwf	postinc1,w,c
  1623  001764  B4D8               	btfsc	status,2,c
  1624  001766  D011               	goto	l2655
  1625  001768                     u1680:
  1626                           
  1627                           ;main.c: 82: return *str1 - *str2;
  1628  001768  5001               	movf	my_strcmp@str1^0,w,c
  1629  00176A  6ED9               	movwf	fsr2l,c
  1630  00176C  6ADA               	clrf	fsr2h,c
  1631  00176E  50DF               	movf	indf2,w,c
  1632  001770  6E03               	movwf	??_my_strcmp^0,c
  1633  001772  5002               	movf	my_strcmp@str2^0,w,c
  1634  001774  6ED9               	movwf	fsr2l,c
  1635  001776  6ADA               	clrf	fsr2h,c
  1636  001778  50DF               	movf	indf2,w,c
  1637  00177A  6E04               	movwf	(??_my_strcmp+1)^0,c
  1638  00177C  5004               	movf	(??_my_strcmp+1)^0,w,c
  1639  00177E  5C03               	subwf	??_my_strcmp^0,w,c
  1640  001780  6E01               	movwf	?_my_strcmp^0,c
  1641  001782  6A02               	clrf	(?_my_strcmp+1)^0,c
  1642  001784  A0D8               	btfss	status,0,c
  1643  001786  0602               	decf	(?_my_strcmp+1)^0,f,c
  1644  001788  0012               	return	
  1645  00178A                     l2655:
  1646                           
  1647                           ;main.c: 83: str1++;
  1648  00178A  2A01               	incf	my_strcmp@str1^0,f,c
  1649                           
  1650                           ;main.c: 84: str2++;
  1651  00178C  2A02               	incf	my_strcmp@str2^0,f,c
  1652  00178E                     l2657:
  1653  00178E  5001               	movf	my_strcmp@str1^0,w,c
  1654  001790  6ED9               	movwf	fsr2l,c
  1655  001792  6ADA               	clrf	fsr2h,c
  1656  001794  50DF               	movf	indf2,w,c
  1657  001796  B4D8               	btfsc	status,2,c
  1658  001798  D7E7               	goto	u1680
  1659  00179A  5002               	movf	my_strcmp@str2^0,w,c
  1660  00179C  6ED9               	movwf	fsr2l,c
  1661  00179E  6ADA               	clrf	fsr2h,c
  1662  0017A0  50DF               	movf	indf2,w,c
  1663  0017A2  B4D8               	btfsc	status,2,c
  1664  0017A4  D7E1               	goto	u1680
  1665  0017A6  D7D6               	goto	l2649
  1666  0017A8                     __end_of_my_strcmp:
  1667                           	callstack 0
  1668                           
  1669 ;; *************** function _init_config *****************
  1670 ;; Defined at:
  1671 ;;		line 625 in file "main.c"
  1672 ;; Parameters:    Size  Location     Type
  1673 ;;		None
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;		None
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  1    wreg      void 
  1678 ;; Registers used:
  1679 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1685 ;;      Params:         0       0       0       0       0       0       0
  1686 ;;      Locals:         0       0       0       0       0       0       0
  1687 ;;      Temps:          0       0       0       0       0       0       0
  1688 ;;      Totals:         0       0       0       0       0       0       0
  1689 ;;Total ram usage:        0 bytes
  1690 ;; Hardware stack levels used: 1
  1691 ;; Hardware stack levels required when called: 5
  1692 ;; This function calls:
  1693 ;;		_clcd_print
  1694 ;;		_init_adc
  1695 ;;		_init_clcd
  1696 ;;		_init_ds1307
  1697 ;;		_init_i2c
  1698 ;;		_init_matrix_keypad
  1699 ;; This function is called by:
  1700 ;;		_main
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text4
  1705  00197C                     __ptext4:
  1706                           	callstack 0
  1707  00197C                     _init_config:
  1708                           	callstack 25
  1709                           
  1710                           ;main.c: 627: init_clcd();
  1711                           
  1712                           ;incstack = 0
  1713  00197C  ECA3  F00C         	call	_init_clcd	;wreg free
  1714                           
  1715                           ;main.c: 628: init_i2c();
  1716  001980  EC88  F00D         	call	_init_i2c	;wreg free
  1717                           
  1718                           ;main.c: 629: init_ds1307();
  1719  001984  EC26  F00C         	call	_init_ds1307	;wreg free
  1720                           
  1721                           ;main.c: 630: init_adc();
  1722  001988  EC4E  F00D         	call	_init_adc	;wreg free
  1723                           
  1724                           ;main.c: 631: init_matrix_keypad();
  1725  00198C  EC93  F00D         	call	_init_matrix_keypad	;wreg free
  1726                           
  1727                           ;main.c: 632: clcd_print("TIME     EV  RPM ", (0x80 + (0)));
  1728  001990  0E29               	movlw	low STR_8
  1729  001992  6E07               	movwf	clcd_print@data^0,c
  1730  001994  5007               	movf	clcd_print@data^0,w,c
  1731  001996  A4D8               	btfss	status,2,c
  1732  001998  0E06               	movlw	high __smallconst
  1733  00199A  6E08               	movwf	(clcd_print@data+1)^0,c
  1734  00199C  0E80               	movlw	128
  1735  00199E  6E09               	movwf	clcd_print@addr^0,c
  1736  0019A0  EC79  F00B         	call	_clcd_print	;wreg free
  1737  0019A4  0012               	return		;funcret
  1738  0019A6                     __end_of_init_config:
  1739                           	callstack 0
  1740                           
  1741 ;; *************** function _init_matrix_keypad *****************
  1742 ;; Defined at:
  1743 ;;		line 4 in file "matrix_keypad.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;		None
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;		None
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  1    wreg      void 
  1750 ;; Registers used:
  1751 ;;		wreg, status,2, status,0
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1757 ;;      Params:         0       0       0       0       0       0       0
  1758 ;;      Locals:         0       0       0       0       0       0       0
  1759 ;;      Temps:          0       0       0       0       0       0       0
  1760 ;;      Totals:         0       0       0       0       0       0       0
  1761 ;;Total ram usage:        0 bytes
  1762 ;; Hardware stack levels used: 1
  1763 ;; This function calls:
  1764 ;;		Nothing
  1765 ;; This function is called by:
  1766 ;;		_init_config
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           	psect	text5
  1771  001B26                     __ptext5:
  1772                           	callstack 0
  1773  001B26                     _init_matrix_keypad:
  1774                           	callstack 29
  1775                           
  1776                           ;matrix_keypad.c: 7: ADCON1 = 0x0F;
  1777                           
  1778                           ;incstack = 0
  1779  001B26  0E0F               	movlw	15
  1780  001B28  6EC1               	movwf	193,c	;volatile
  1781                           
  1782                           ;matrix_keypad.c: 10: TRISB = 0x1E;
  1783  001B2A  0E1E               	movlw	30
  1784  001B2C  6E93               	movwf	147,c	;volatile
  1785                           
  1786                           ;matrix_keypad.c: 13: RBPU = 0;
  1787  001B2E  9EF1               	bcf	4081,7,c	;volatile
  1788                           
  1789                           ;matrix_keypad.c: 15: PORTB = PORTB | 0xE0;
  1790  001B30  5081               	movf	129,w,c	;volatile
  1791  001B32  09E0               	iorlw	224
  1792  001B34  6E81               	movwf	129,c	;volatile
  1793  001B36  0012               	return		;funcret
  1794  001B38                     __end_of_init_matrix_keypad:
  1795                           	callstack 0
  1796                           
  1797 ;; *************** function _init_i2c *****************
  1798 ;; Defined at:
  1799 ;;		line 3 in file "i2c.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;		None
  1802 ;; Auto vars:     Size  Location     Type
  1803 ;;		None
  1804 ;; Return value:  Size  Location     Type
  1805 ;;                  1    wreg      void 
  1806 ;; Registers used:
  1807 ;;		wreg, status,2
  1808 ;; Tracked objects:
  1809 ;;		On entry : 0/0
  1810 ;;		On exit  : 0/0
  1811 ;;		Unchanged: 0/0
  1812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1813 ;;      Params:         0       0       0       0       0       0       0
  1814 ;;      Locals:         0       0       0       0       0       0       0
  1815 ;;      Temps:          0       0       0       0       0       0       0
  1816 ;;      Totals:         0       0       0       0       0       0       0
  1817 ;;Total ram usage:        0 bytes
  1818 ;; Hardware stack levels used: 1
  1819 ;; This function calls:
  1820 ;;		Nothing
  1821 ;; This function is called by:
  1822 ;;		_init_config
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           	psect	text6
  1827  001B10                     __ptext6:
  1828                           	callstack 0
  1829  001B10                     _init_i2c:
  1830                           	callstack 29
  1831                           
  1832                           ;i2c.c: 6: TRISC3 = 1;
  1833                           
  1834                           ;incstack = 0
  1835  001B10  8694               	bsf	3988,3,c	;volatile
  1836                           
  1837                           ;i2c.c: 7: TRISC4 = 1;
  1838  001B12  8894               	bsf	3988,4,c	;volatile
  1839                           
  1840                           ;i2c.c: 9: SSPCON1 = 0x28;
  1841  001B14  0E28               	movlw	40
  1842  001B16  6EC6               	movwf	198,c	;volatile
  1843                           
  1844                           ;i2c.c: 11: SSPADD = 0x31;
  1845  001B18  0E31               	movlw	49
  1846  001B1A  6EC8               	movwf	200,c	;volatile
  1847                           
  1848                           ;i2c.c: 13: CKE = 0;
  1849  001B1C  9CC7               	bcf	4039,6,c	;volatile
  1850                           
  1851                           ;i2c.c: 15: SMP = 1;
  1852  001B1E  8EC7               	bsf	4039,7,c	;volatile
  1853                           
  1854                           ;i2c.c: 17: SSPIF = 0;
  1855  001B20  969E               	bcf	3998,3,c	;volatile
  1856                           
  1857                           ;i2c.c: 19: BCLIF = 0;
  1858  001B22  96A1               	bcf	4001,3,c	;volatile
  1859  001B24  0012               	return		;funcret
  1860  001B26                     __end_of_init_i2c:
  1861                           	callstack 0
  1862                           
  1863 ;; *************** function _init_ds1307 *****************
  1864 ;; Defined at:
  1865 ;;		line 12 in file "ds1307.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;		None
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;  dummy           1    3[COMRAM] unsigned char 
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      void 
  1872 ;; Registers used:
  1873 ;;		wreg, status,2, status,0, cstack
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1879 ;;      Params:         0       0       0       0       0       0       0
  1880 ;;      Locals:         1       0       0       0       0       0       0
  1881 ;;      Temps:          0       0       0       0       0       0       0
  1882 ;;      Totals:         1       0       0       0       0       0       0
  1883 ;;Total ram usage:        1 bytes
  1884 ;; Hardware stack levels used: 1
  1885 ;; Hardware stack levels required when called: 4
  1886 ;; This function calls:
  1887 ;;		_read_ds1307
  1888 ;;		_write_ds1307
  1889 ;; This function is called by:
  1890 ;;		_init_config
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           	psect	text7
  1895  00184C                     __ptext7:
  1896                           	callstack 0
  1897  00184C                     _init_ds1307:
  1898                           	callstack 25
  1899                           
  1900                           ;ds1307.c: 14: unsigned char dummy;;ds1307.c: 17: dummy = read_ds1307(0x00);
  1901                           
  1902                           ;incstack = 0
  1903  00184C  0E00               	movlw	0
  1904  00184E  ECD3  F00C         	call	_read_ds1307
  1905  001852  6E04               	movwf	init_ds1307@dummy^0,c
  1906                           
  1907                           ;ds1307.c: 18: write_ds1307(0x00, dummy | 0x80);
  1908  001854  5004               	movf	init_ds1307@dummy^0,w,c
  1909  001856  0980               	iorlw	128
  1910  001858  6E02               	movwf	write_ds1307@data^0,c
  1911  00185A  0E00               	movlw	0
  1912  00185C  EC5E  F00D         	call	_write_ds1307
  1913                           
  1914                           ;ds1307.c: 21: dummy = read_ds1307(0x02);
  1915  001860  0E02               	movlw	2
  1916  001862  ECD3  F00C         	call	_read_ds1307
  1917  001866  6E04               	movwf	init_ds1307@dummy^0,c
  1918                           
  1919                           ;ds1307.c: 22: write_ds1307(0x02, dummy | 0x00);
  1920  001868  C004  F002         	movff	init_ds1307@dummy,write_ds1307@data
  1921  00186C  0E02               	movlw	2
  1922  00186E  EC5E  F00D         	call	_write_ds1307
  1923                           
  1924                           ;ds1307.c: 37: write_ds1307(0x07, 0x93);
  1925  001872  0E93               	movlw	147
  1926  001874  6E02               	movwf	write_ds1307@data^0,c
  1927  001876  0E07               	movlw	7
  1928  001878  EC5E  F00D         	call	_write_ds1307
  1929                           
  1930                           ;ds1307.c: 40: dummy = read_ds1307(0x00);
  1931  00187C  0E00               	movlw	0
  1932  00187E  ECD3  F00C         	call	_read_ds1307
  1933  001882  6E04               	movwf	init_ds1307@dummy^0,c
  1934                           
  1935                           ;ds1307.c: 41: write_ds1307(0x00, dummy & 0x7F);
  1936  001884  5004               	movf	init_ds1307@dummy^0,w,c
  1937  001886  0B7F               	andlw	127
  1938  001888  6E02               	movwf	write_ds1307@data^0,c
  1939  00188A  0E00               	movlw	0
  1940  00188C  EC5E  F00D         	call	_write_ds1307
  1941  001890  0012               	return		;funcret
  1942  001892                     __end_of_init_ds1307:
  1943                           	callstack 0
  1944                           
  1945 ;; *************** function _init_clcd *****************
  1946 ;; Defined at:
  1947 ;;		line 27 in file "clcd.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;		None
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;		None
  1952 ;; Return value:  Size  Location     Type
  1953 ;;                  1    wreg      void 
  1954 ;; Registers used:
  1955 ;;		wreg, status,2, status,0, cstack
  1956 ;; Tracked objects:
  1957 ;;		On entry : 0/0
  1958 ;;		On exit  : 0/0
  1959 ;;		Unchanged: 0/0
  1960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1961 ;;      Params:         0       0       0       0       0       0       0
  1962 ;;      Locals:         0       0       0       0       0       0       0
  1963 ;;      Temps:          0       0       0       0       0       0       0
  1964 ;;      Totals:         0       0       0       0       0       0       0
  1965 ;;Total ram usage:        0 bytes
  1966 ;; Hardware stack levels used: 1
  1967 ;; Hardware stack levels required when called: 1
  1968 ;; This function calls:
  1969 ;;		_clcd_write
  1970 ;; This function is called by:
  1971 ;;		_init_config
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text8
  1976  001946                     __ptext8:
  1977                           	callstack 0
  1978  001946                     _init_clcd:
  1979                           	callstack 28
  1980                           
  1981                           ;clcd.c: 30: TRISD = 0x00;
  1982                           
  1983                           ;incstack = 0
  1984  001946  0E00               	movlw	0
  1985  001948  6E95               	movwf	149,c	;volatile
  1986                           
  1987                           ;clcd.c: 32: TRISC = TRISC & 0xF8;
  1988  00194A  5094               	movf	148,w,c	;volatile
  1989  00194C  0BF8               	andlw	248
  1990  00194E  6E94               	movwf	148,c	;volatile
  1991                           
  1992                           ;clcd.c: 34: RC0 = 0;
  1993  001950  9082               	bcf	3970,0,c	;volatile
  1994                           
  1995                           ;clcd.c: 36: clcd_write(0x02, 0);
  1996  001952  0E00               	movlw	0
  1997  001954  6E01               	movwf	clcd_write@control_bit^0,c
  1998  001956  0E02               	movlw	2
  1999  001958  EC27  F00D         	call	_clcd_write
  2000                           
  2001                           ;clcd.c: 37: clcd_write(0x38, 0);
  2002  00195C  0E00               	movlw	0
  2003  00195E  6E01               	movwf	clcd_write@control_bit^0,c
  2004  001960  0E38               	movlw	56
  2005  001962  EC27  F00D         	call	_clcd_write
  2006                           
  2007                           ;clcd.c: 38: clcd_write(0x0C, 0);
  2008  001966  0E00               	movlw	0
  2009  001968  6E01               	movwf	clcd_write@control_bit^0,c
  2010  00196A  0E0C               	movlw	12
  2011  00196C  EC27  F00D         	call	_clcd_write
  2012                           
  2013                           ;clcd.c: 39: clcd_write(0x01, 0);
  2014  001970  0E00               	movlw	0
  2015  001972  6E01               	movwf	clcd_write@control_bit^0,c
  2016  001974  0E01               	movlw	1
  2017  001976  EC27  F00D         	call	_clcd_write
  2018  00197A  0012               	return		;funcret
  2019  00197C                     __end_of_init_clcd:
  2020                           	callstack 0
  2021                           
  2022 ;; *************** function _init_adc *****************
  2023 ;; Defined at:
  2024 ;;		line 4 in file "adc.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;		None
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;		None
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  1    wreg      void 
  2031 ;; Registers used:
  2032 ;;		wreg, status,2
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2038 ;;      Params:         0       0       0       0       0       0       0
  2039 ;;      Locals:         0       0       0       0       0       0       0
  2040 ;;      Temps:          0       0       0       0       0       0       0
  2041 ;;      Totals:         0       0       0       0       0       0       0
  2042 ;;Total ram usage:        0 bytes
  2043 ;; Hardware stack levels used: 1
  2044 ;; This function calls:
  2045 ;;		Nothing
  2046 ;; This function is called by:
  2047 ;;		_init_config
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           	psect	text9
  2052  001A9C                     __ptext9:
  2053                           	callstack 0
  2054  001A9C                     _init_adc:
  2055                           	callstack 29
  2056                           
  2057                           ;adc.c: 7: ADFM = 1;
  2058                           
  2059                           ;incstack = 0
  2060  001A9C  8EC0               	bsf	4032,7,c	;volatile
  2061                           
  2062                           ;adc.c: 13: ACQT2 = 1;
  2063  001A9E  8AC0               	bsf	4032,5,c	;volatile
  2064                           
  2065                           ;adc.c: 14: ACQT1 = 0;
  2066  001AA0  98C0               	bcf	4032,4,c	;volatile
  2067                           
  2068                           ;adc.c: 15: ACQT0 = 0;
  2069  001AA2  96C0               	bcf	4032,3,c	;volatile
  2070                           
  2071                           ;adc.c: 21: ADCS0 = 0;
  2072  001AA4  90C0               	bcf	4032,0,c	;volatile
  2073                           
  2074                           ;adc.c: 22: ADCS1 = 1;
  2075  001AA6  82C0               	bsf	4032,1,c	;volatile
  2076                           
  2077                           ;adc.c: 23: ADCS2 = 0;
  2078  001AA8  94C0               	bcf	4032,2,c	;volatile
  2079                           
  2080                           ;adc.c: 26: GODONE = 0;
  2081  001AAA  92C2               	bcf	4034,1,c	;volatile
  2082                           
  2083                           ;adc.c: 32: VCFG1 = 0;
  2084  001AAC  9AC1               	bcf	4033,5,c	;volatile
  2085                           
  2086                           ;adc.c: 34: VCFG0 = 0;
  2087  001AAE  98C1               	bcf	4033,4,c	;volatile
  2088                           
  2089                           ;adc.c: 37: ADRESH = 0;
  2090  001AB0  0E00               	movlw	0
  2091  001AB2  6EC4               	movwf	196,c	;volatile
  2092                           
  2093                           ;adc.c: 38: ADRESL = 0;
  2094  001AB4  0E00               	movlw	0
  2095  001AB6  6EC3               	movwf	195,c	;volatile
  2096                           
  2097                           ;adc.c: 41: ADON = 1;
  2098  001AB8  80C2               	bsf	4034,0,c	;volatile
  2099  001ABA  0012               	return		;funcret
  2100  001ABC                     __end_of_init_adc:
  2101                           	callstack 0
  2102                           
  2103 ;; *************** function _get_time *****************
  2104 ;; Defined at:
  2105 ;;		line 580 in file "main.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;		None
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;		None
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  1    wreg      void 
  2112 ;; Registers used:
  2113 ;;		wreg, status,2, status,0, cstack
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2119 ;;      Params:         0       0       0       0       0       0       0
  2120 ;;      Locals:         0       0       0       0       0       0       0
  2121 ;;      Temps:          0       0       0       0       0       0       0
  2122 ;;      Totals:         0       0       0       0       0       0       0
  2123 ;;Total ram usage:        0 bytes
  2124 ;; Hardware stack levels used: 1
  2125 ;; Hardware stack levels required when called: 4
  2126 ;; This function calls:
  2127 ;;		_read_ds1307
  2128 ;; This function is called by:
  2129 ;;		_main
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text10
  2134  001626                     __ptext10:
  2135                           	callstack 0
  2136  001626                     _get_time:
  2137                           	callstack 26
  2138                           
  2139                           ;main.c: 582: clock_reg[0] = read_ds1307(0x02);
  2140                           
  2141                           ;incstack = 0
  2142  001626  0E02               	movlw	2
  2143  001628  ECD3  F00C         	call	_read_ds1307
  2144  00162C  6E29               	movwf	_clock_reg^0,c
  2145                           
  2146                           ;main.c: 583: clock_reg[1] = read_ds1307(0x01);
  2147  00162E  0E01               	movlw	1
  2148  001630  ECD3  F00C         	call	_read_ds1307
  2149  001634  6E2A               	movwf	(_clock_reg+1)^0,c
  2150                           
  2151                           ;main.c: 584: clock_reg[2] = read_ds1307(0x00);
  2152  001636  0E00               	movlw	0
  2153  001638  ECD3  F00C         	call	_read_ds1307
  2154  00163C  6E2B               	movwf	(_clock_reg+2)^0,c
  2155                           
  2156                           ;main.c: 586: if (clock_reg[0] & 0x40)
  2157  00163E  AC29               	btfss	_clock_reg^0,6,c
  2158  001640  D004               	goto	l3189
  2159                           
  2160                           ;main.c: 587: {;main.c: 588: time[0] = '0' + ((clock_reg[0] >> 4) & 0x01);
  2161  001642  3829               	swapf	_clock_reg^0,w,c
  2162  001644  0B0F               	andlw	15
  2163  001646  0B01               	andlw	1
  2164  001648  D003               	goto	L1
  2165  00164A                     l3189:
  2166                           
  2167                           ;main.c: 591: else;main.c: 592: {;main.c: 593: time[0] = '0' + ((clock_reg[0] >> 4) & 0x
      +                          03);
  2168  00164A  3829               	swapf	_clock_reg^0,w,c
  2169  00164C  0B0F               	andlw	15
  2170  00164E  0B03               	andlw	3
  2171  001650                     L1:
  2172  001650  0F30               	addlw	48
  2173  001652  6E38               	movwf	_time^0,c
  2174                           
  2175                           ;main.c: 594: time[1] = '0' + (clock_reg[0] & 0x0F);
  2176  001654  5029               	movf	_clock_reg^0,w,c
  2177  001656  0B0F               	andlw	15
  2178  001658  0F30               	addlw	48
  2179  00165A  6E39               	movwf	(_time+1)^0,c
  2180                           
  2181                           ;main.c: 595: };main.c: 596: time[2] = ':';
  2182  00165C  0E3A               	movlw	58
  2183  00165E  6E3A               	movwf	(_time+2)^0,c
  2184                           
  2185                           ;main.c: 597: time[3] = '0' + ((clock_reg[1] >> 4) & 0x0F);
  2186  001660  382A               	swapf	(_clock_reg+1)^0,w,c
  2187  001662  0B0F               	andlw	15
  2188  001664  0B0F               	andlw	15
  2189  001666  0F30               	addlw	48
  2190  001668  6E3B               	movwf	(_time+3)^0,c
  2191                           
  2192                           ;main.c: 598: time[4] = '0' + (clock_reg[1] & 0x0F);
  2193  00166A  502A               	movf	(_clock_reg+1)^0,w,c
  2194  00166C  0B0F               	andlw	15
  2195  00166E  0F30               	addlw	48
  2196  001670  6E3C               	movwf	(_time+4)^0,c
  2197                           
  2198                           ;main.c: 599: time[5] = ':';
  2199  001672  0E3A               	movlw	58
  2200  001674  6E3D               	movwf	(_time+5)^0,c
  2201                           
  2202                           ;main.c: 600: time[6] = '0' + ((clock_reg[2] >> 4) & 0x0F);
  2203  001676  382B               	swapf	(_clock_reg+2)^0,w,c
  2204  001678  0B0F               	andlw	15
  2205  00167A  0B0F               	andlw	15
  2206  00167C  0F30               	addlw	48
  2207  00167E  6E3E               	movwf	(_time+6)^0,c
  2208                           
  2209                           ;main.c: 601: time[7] = '0' + (clock_reg[2] & 0x0F);
  2210  001680  502B               	movf	(_clock_reg+2)^0,w,c
  2211  001682  0B0F               	andlw	15
  2212  001684  0F30               	addlw	48
  2213  001686  6E3F               	movwf	(_time+7)^0,c
  2214                           
  2215                           ;main.c: 602: time[8] = '\0';
  2216  001688  0E00               	movlw	0
  2217  00168A  6E40               	movwf	(_time+8)^0,c
  2218  00168C  0012               	return		;funcret
  2219  00168E                     __end_of_get_time:
  2220                           	callstack 0
  2221                           
  2222 ;; *************** function _display_time *****************
  2223 ;; Defined at:
  2224 ;;		line 563 in file "main.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;		None
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;		None
  2229 ;; Return value:  Size  Location     Type
  2230 ;;                  1    wreg      void 
  2231 ;; Registers used:
  2232 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2233 ;; Tracked objects:
  2234 ;;		On entry : 0/0
  2235 ;;		On exit  : 0/0
  2236 ;;		Unchanged: 0/0
  2237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2238 ;;      Params:         0       0       0       0       0       0       0
  2239 ;;      Locals:         0       0       0       0       0       0       0
  2240 ;;      Temps:          0       0       0       0       0       0       0
  2241 ;;      Totals:         0       0       0       0       0       0       0
  2242 ;;Total ram usage:        0 bytes
  2243 ;; Hardware stack levels used: 1
  2244 ;; Hardware stack levels required when called: 2
  2245 ;; This function calls:
  2246 ;;		_clcd_print
  2247 ;; This function is called by:
  2248 ;;		_main
  2249 ;; This function uses a non-reentrant model
  2250 ;;
  2251                           
  2252                           	psect	text11
  2253  001B38                     __ptext11:
  2254                           	callstack 0
  2255  001B38                     _display_time:
  2256                           	callstack 28
  2257                           
  2258                           ;main.c: 565: clcd_print(time, (0xC0 + (0)));
  2259                           
  2260                           ;incstack = 0
  2261  001B38  0E38               	movlw	low _time
  2262  001B3A  6E07               	movwf	clcd_print@data^0,c
  2263  001B3C  6A08               	clrf	(clcd_print@data+1)^0,c
  2264  001B3E  0EC0               	movlw	192
  2265  001B40  6E09               	movwf	clcd_print@addr^0,c
  2266  001B42  EC79  F00B         	call	_clcd_print	;wreg free
  2267  001B46  0012               	return		;funcret
  2268  001B48                     __end_of_display_time:
  2269                           	callstack 0
  2270                           
  2271 ;; *************** function _display_menu *****************
  2272 ;; Defined at:
  2273 ;;		line 449 in file "main.c"
  2274 ;; Parameters:    Size  Location     Type
  2275 ;;		None
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;  i               2   30[COMRAM] unsigned int 
  2278 ;;  key             1   29[COMRAM] unsigned char 
  2279 ;;  lkey            1   28[COMRAM] unsigned char 
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  1    wreg      void 
  2282 ;; Registers used:
  2283 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2289 ;;      Params:         0       0       0       0       0       0       0
  2290 ;;      Locals:         4       0       0       0       0       0       0
  2291 ;;      Temps:          1       0       0       0       0       0       0
  2292 ;;      Totals:         5       0       0       0       0       0       0
  2293 ;;Total ram usage:        5 bytes
  2294 ;; Hardware stack levels used: 1
  2295 ;; Hardware stack levels required when called: 5
  2296 ;; This function calls:
  2297 ;;		_change_password
  2298 ;;		_clcd_print
  2299 ;;		_clear_log
  2300 ;;		_download_log
  2301 ;;		_read_switches
  2302 ;;		_set_time
  2303 ;;		_view_log
  2304 ;; This function is called by:
  2305 ;;		_main
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           	psect	text12
  2310  0006C8                     __ptext12:
  2311                           	callstack 0
  2312  0006C8                     _display_menu:
  2313                           	callstack 25
  2314                           
  2315                           ;main.c: 451: static int flag = 1;;main.c: 452: unsigned char lkey , key;;main.c: 453: u
      +                          nsigned int i = 0;
  2316                           
  2317                           ;incstack = 0
  2318  0006C8  0E00               	movlw	0
  2319  0006CA  6E20               	movwf	(display_menu@i+1)^0,c
  2320  0006CC  0E00               	movlw	0
  2321  0006CE  6E1F               	movwf	display_menu@i^0,c
  2322  0006D0                     l3085:
  2323                           
  2324                           ;main.c: 455: {;main.c: 456: if(i == 0 && flag)
  2325  0006D0  501F               	movf	display_menu@i^0,w,c
  2326  0006D2  1020               	iorwf	(display_menu@i+1)^0,w,c
  2327  0006D4  A4D8               	btfss	status,2,c
  2328  0006D6  D026               	goto	l3095
  2329  0006D8  5044               	movf	display_menu@flag^0,w,c
  2330  0006DA  1045               	iorwf	(display_menu@flag+1)^0,w,c
  2331  0006DC  B4D8               	btfsc	status,2,c
  2332  0006DE  D022               	goto	l3095
  2333                           
  2334                           ;main.c: 457: {;main.c: 458: clcd_print("* " , (0x80 + (0)));
  2335  0006E0  0EC4               	movlw	low STR_15
  2336  0006E2  6E07               	movwf	clcd_print@data^0,c
  2337  0006E4  5007               	movf	clcd_print@data^0,w,c
  2338  0006E6  A4D8               	btfss	status,2,c
  2339  0006E8  0E06               	movlw	high __smallconst
  2340  0006EA  6E08               	movwf	(clcd_print@data+1)^0,c
  2341  0006EC  0E80               	movlw	128
  2342  0006EE  6E09               	movwf	clcd_print@addr^0,c
  2343  0006F0  EC79  F00B         	call	_clcd_print	;wreg free
  2344                           
  2345                           ;main.c: 459: clcd_print(menu[i] , (0x80 + (2)));
  2346  0006F4  501F               	movf	display_menu@i^0,w,c
  2347  0006F6  0D11               	mullw	17
  2348  0006F8  50F3               	movf	243,w,c
  2349  0006FA  0F60               	addlw	low _menu
  2350  0006FC  6E1C               	movwf	??_display_menu^0,c
  2351  0006FE  C01C  F007         	movff	??_display_menu,clcd_print@data
  2352  000702  6A08               	clrf	(clcd_print@data+1)^0,c
  2353  000704  0E82               	movlw	130
  2354  000706  6E09               	movwf	clcd_print@addr^0,c
  2355  000708  EC79  F00B         	call	_clcd_print	;wreg free
  2356                           
  2357                           ;main.c: 460: clcd_print(menu[i+1] , (0xC0 + (2)));
  2358  00070C  501F               	movf	display_menu@i^0,w,c
  2359  00070E  0D11               	mullw	17
  2360  000710  50F3               	movf	243,w,c
  2361  000712  0F71               	addlw	low (_menu+17)
  2362  000714  6E1C               	movwf	??_display_menu^0,c
  2363  000716  C01C  F007         	movff	??_display_menu,clcd_print@data
  2364  00071A  6A08               	clrf	(clcd_print@data+1)^0,c
  2365  00071C  0EC2               	movlw	194
  2366  00071E  6E09               	movwf	clcd_print@addr^0,c
  2367  000720  EC79  F00B         	call	_clcd_print	;wreg free
  2368  000724                     l3095:
  2369                           
  2370                           ;main.c: 461: };main.c: 463: key = read_switches(1);
  2371  000724  0E01               	movlw	1
  2372  000726  EC49  F00C         	call	_read_switches
  2373  00072A  6E1E               	movwf	display_menu@key^0,c
  2374                           
  2375                           ;main.c: 464: lkey = read_switches(0);
  2376  00072C  0E00               	movlw	0
  2377  00072E  EC49  F00C         	call	_read_switches
  2378  000732  6E1D               	movwf	display_menu@lkey^0,c
  2379                           
  2380                           ;main.c: 466: if(key == 12 && i <= 4 && flag)
  2381  000734  0E0C               	movlw	12
  2382  000736  181E               	xorwf	display_menu@key^0,w,c
  2383  000738  A4D8               	btfss	status,2,c
  2384  00073A  D06B               	goto	l3121
  2385  00073C  5020               	movf	(display_menu@i+1)^0,w,c
  2386  00073E  E169               	bnz	l3121
  2387  000740  0E05               	movlw	5
  2388  000742  5C1F               	subwf	display_menu@i^0,w,c
  2389  000744  B0D8               	btfsc	status,0,c
  2390  000746  D065               	goto	l3121
  2391  000748  5044               	movf	display_menu@flag^0,w,c
  2392  00074A  1045               	iorwf	(display_menu@flag+1)^0,w,c
  2393  00074C  B4D8               	btfsc	status,2,c
  2394  00074E  D061               	goto	l3121
  2395                           
  2396                           ;main.c: 467: {;main.c: 468: if(i >= 5)
  2397  000750  5020               	movf	(display_menu@i+1)^0,w,c
  2398  000752  E104               	bnz	u2320
  2399  000754  0E05               	movlw	5
  2400  000756  5C1F               	subwf	display_menu@i^0,w,c
  2401  000758  A0D8               	btfss	status,0,c
  2402  00075A  D004               	goto	l3109
  2403  00075C                     u2320:
  2404                           
  2405                           ;main.c: 469: i = 4;
  2406  00075C  0E00               	movlw	0
  2407  00075E  6E20               	movwf	(display_menu@i+1)^0,c
  2408  000760  0E04               	movlw	4
  2409  000762  6E1F               	movwf	display_menu@i^0,c
  2410  000764                     l3109:
  2411                           
  2412                           ;main.c: 470: i++;
  2413  000764  4A1F               	infsnz	display_menu@i^0,f,c
  2414  000766  2A20               	incf	(display_menu@i+1)^0,f,c
  2415                           
  2416                           ;main.c: 472: if(i < 5)
  2417  000768  5020               	movf	(display_menu@i+1)^0,w,c
  2418  00076A  E131               	bnz	l3119
  2419  00076C  0E05               	movlw	5
  2420  00076E  5C1F               	subwf	display_menu@i^0,w,c
  2421  000770  B0D8               	btfsc	status,0,c
  2422  000772  D02D               	goto	l3119
  2423                           
  2424                           ;main.c: 473: {;main.c: 474: clcd_print(menu[i-1] , (0x80 + (2)));
  2425  000774  501F               	movf	display_menu@i^0,w,c
  2426  000776  0D11               	mullw	17
  2427  000778  50F3               	movf	243,w,c
  2428  00077A  0F4F               	addlw	low (_menu+239)
  2429  00077C  6E1C               	movwf	??_display_menu^0,c
  2430  00077E  C01C  F007         	movff	??_display_menu,clcd_print@data
  2431  000782  6A08               	clrf	(clcd_print@data+1)^0,c
  2432  000784  0E82               	movlw	130
  2433  000786  6E09               	movwf	clcd_print@addr^0,c
  2434  000788  EC79  F00B         	call	_clcd_print	;wreg free
  2435                           
  2436                           ;main.c: 475: clcd_print(menu[i] , (0xC0 + (2)));
  2437  00078C  501F               	movf	display_menu@i^0,w,c
  2438  00078E  0D11               	mullw	17
  2439  000790  50F3               	movf	243,w,c
  2440  000792  0F60               	addlw	low _menu
  2441  000794  6E1C               	movwf	??_display_menu^0,c
  2442  000796  C01C  F007         	movff	??_display_menu,clcd_print@data
  2443  00079A  6A08               	clrf	(clcd_print@data+1)^0,c
  2444  00079C  0EC2               	movlw	194
  2445  00079E  6E09               	movwf	clcd_print@addr^0,c
  2446  0007A0  EC79  F00B         	call	_clcd_print	;wreg free
  2447                           
  2448                           ;main.c: 476: clcd_print("  " , (0x80 + (0)));
  2449  0007A4  0E49               	movlw	low (STR_6+14)
  2450  0007A6  6E07               	movwf	clcd_print@data^0,c
  2451  0007A8  5007               	movf	clcd_print@data^0,w,c
  2452  0007AA  A4D8               	btfss	status,2,c
  2453  0007AC  0E06               	movlw	high __smallconst
  2454  0007AE  6E08               	movwf	(clcd_print@data+1)^0,c
  2455  0007B0  0E80               	movlw	128
  2456  0007B2  6E09               	movwf	clcd_print@addr^0,c
  2457  0007B4  EC79  F00B         	call	_clcd_print	;wreg free
  2458                           
  2459                           ;main.c: 477: clcd_print("* " , (0xC0 + (0)));
  2460  0007B8  0EC4               	movlw	low STR_15
  2461  0007BA  6E07               	movwf	clcd_print@data^0,c
  2462  0007BC  5007               	movf	clcd_print@data^0,w,c
  2463  0007BE  A4D8               	btfss	status,2,c
  2464  0007C0  0E06               	movlw	high __smallconst
  2465  0007C2  6E08               	movwf	(clcd_print@data+1)^0,c
  2466  0007C4  0EC0               	movlw	192
  2467  0007C6  6E09               	movwf	clcd_print@addr^0,c
  2468  0007C8  EC79  F00B         	call	_clcd_print	;wreg free
  2469                           
  2470                           ;main.c: 478: }
  2471  0007CC  D022               	goto	l3121
  2472  0007CE                     l3119:
  2473                           
  2474                           ;main.c: 480: else;main.c: 481: {;main.c: 482: clcd_print(menu[3] , (0x80 + (2)));
  2475  0007CE  0E93               	movlw	low (_menu+51)
  2476  0007D0  6E07               	movwf	clcd_print@data^0,c
  2477  0007D2  6A08               	clrf	(clcd_print@data+1)^0,c
  2478  0007D4  0E82               	movlw	130
  2479  0007D6  6E09               	movwf	clcd_print@addr^0,c
  2480  0007D8  EC79  F00B         	call	_clcd_print	;wreg free
  2481                           
  2482                           ;main.c: 483: clcd_print(menu[4] , (0xC0 + (2)));
  2483  0007DC  0EA4               	movlw	low (_menu+68)
  2484  0007DE  6E07               	movwf	clcd_print@data^0,c
  2485  0007E0  6A08               	clrf	(clcd_print@data+1)^0,c
  2486  0007E2  0EC2               	movlw	194
  2487  0007E4  6E09               	movwf	clcd_print@addr^0,c
  2488  0007E6  EC79  F00B         	call	_clcd_print	;wreg free
  2489                           
  2490                           ;main.c: 484: clcd_print("  " , (0x80 + (0)));
  2491  0007EA  0E49               	movlw	low (STR_6+14)
  2492  0007EC  6E07               	movwf	clcd_print@data^0,c
  2493  0007EE  5007               	movf	clcd_print@data^0,w,c
  2494  0007F0  A4D8               	btfss	status,2,c
  2495  0007F2  0E06               	movlw	high __smallconst
  2496  0007F4  6E08               	movwf	(clcd_print@data+1)^0,c
  2497  0007F6  0E80               	movlw	128
  2498  0007F8  6E09               	movwf	clcd_print@addr^0,c
  2499  0007FA  EC79  F00B         	call	_clcd_print	;wreg free
  2500                           
  2501                           ;main.c: 485: clcd_print("* " , (0xC0 + (0)));
  2502  0007FE  0EC4               	movlw	low STR_15
  2503  000800  6E07               	movwf	clcd_print@data^0,c
  2504  000802  5007               	movf	clcd_print@data^0,w,c
  2505  000804  A4D8               	btfss	status,2,c
  2506  000806  0E06               	movlw	high __smallconst
  2507  000808  6E08               	movwf	(clcd_print@data+1)^0,c
  2508  00080A  0EC0               	movlw	192
  2509  00080C  6E09               	movwf	clcd_print@addr^0,c
  2510  00080E  EC79  F00B         	call	_clcd_print	;wreg free
  2511  000812                     l3121:
  2512                           
  2513                           ;main.c: 486: };main.c: 489: };main.c: 491: if(key == 11 && i > 0 && flag)
  2514  000812  0E0B               	movlw	11
  2515  000814  181E               	xorwf	display_menu@key^0,w,c
  2516  000816  A4D8               	btfss	status,2,c
  2517  000818  D060               	goto	l3141
  2518  00081A  501F               	movf	display_menu@i^0,w,c
  2519  00081C  1020               	iorwf	(display_menu@i+1)^0,w,c
  2520  00081E  B4D8               	btfsc	status,2,c
  2521  000820  D05C               	goto	l3141
  2522  000822  5044               	movf	display_menu@flag^0,w,c
  2523  000824  1045               	iorwf	(display_menu@flag+1)^0,w,c
  2524  000826  B4D8               	btfsc	status,2,c
  2525  000828  D058               	goto	l3141
  2526                           
  2527                           ;main.c: 492: {;main.c: 493: if(i < 5)
  2528  00082A  5020               	movf	(display_menu@i+1)^0,w,c
  2529  00082C  E131               	bnz	l3135
  2530  00082E  0E05               	movlw	5
  2531  000830  5C1F               	subwf	display_menu@i^0,w,c
  2532  000832  B0D8               	btfsc	status,0,c
  2533  000834  D02D               	goto	l3135
  2534                           
  2535                           ;main.c: 494: {;main.c: 495: clcd_print("* " , (0x80 + (0)));
  2536  000836  0EC4               	movlw	low STR_15
  2537  000838  6E07               	movwf	clcd_print@data^0,c
  2538  00083A  5007               	movf	clcd_print@data^0,w,c
  2539  00083C  A4D8               	btfss	status,2,c
  2540  00083E  0E06               	movlw	high __smallconst
  2541  000840  6E08               	movwf	(clcd_print@data+1)^0,c
  2542  000842  0E80               	movlw	128
  2543  000844  6E09               	movwf	clcd_print@addr^0,c
  2544  000846  EC79  F00B         	call	_clcd_print	;wreg free
  2545                           
  2546                           ;main.c: 496: clcd_print(menu[i-1] , (0x80 + (2)));
  2547  00084A  501F               	movf	display_menu@i^0,w,c
  2548  00084C  0D11               	mullw	17
  2549  00084E  50F3               	movf	243,w,c
  2550  000850  0F4F               	addlw	low (_menu+239)
  2551  000852  6E1C               	movwf	??_display_menu^0,c
  2552  000854  C01C  F007         	movff	??_display_menu,clcd_print@data
  2553  000858  6A08               	clrf	(clcd_print@data+1)^0,c
  2554  00085A  0E82               	movlw	130
  2555  00085C  6E09               	movwf	clcd_print@addr^0,c
  2556  00085E  EC79  F00B         	call	_clcd_print	;wreg free
  2557                           
  2558                           ;main.c: 497: clcd_print("  " , (0xC0 + (0)));
  2559  000862  0E49               	movlw	low (STR_6+14)
  2560  000864  6E07               	movwf	clcd_print@data^0,c
  2561  000866  5007               	movf	clcd_print@data^0,w,c
  2562  000868  A4D8               	btfss	status,2,c
  2563  00086A  0E06               	movlw	high __smallconst
  2564  00086C  6E08               	movwf	(clcd_print@data+1)^0,c
  2565  00086E  0EC0               	movlw	192
  2566  000870  6E09               	movwf	clcd_print@addr^0,c
  2567  000872  EC79  F00B         	call	_clcd_print	;wreg free
  2568                           
  2569                           ;main.c: 498: clcd_print(menu[i] , (0xC0 + (2)));
  2570  000876  501F               	movf	display_menu@i^0,w,c
  2571  000878  0D11               	mullw	17
  2572  00087A  50F3               	movf	243,w,c
  2573  00087C  0F60               	addlw	low _menu
  2574  00087E  6E1C               	movwf	??_display_menu^0,c
  2575  000880  C01C  F007         	movff	??_display_menu,clcd_print@data
  2576  000884  6A08               	clrf	(clcd_print@data+1)^0,c
  2577  000886  0EC2               	movlw	194
  2578  000888  6E09               	movwf	clcd_print@addr^0,c
  2579  00088A  EC79  F00B         	call	_clcd_print	;wreg free
  2580                           
  2581                           ;main.c: 499: }
  2582  00088E  D022               	goto	l3137
  2583  000890                     l3135:
  2584                           
  2585                           ;main.c: 500: else;main.c: 501: {;main.c: 502: clcd_print(menu[3] , (0x80 + (2)));
  2586  000890  0E93               	movlw	low (_menu+51)
  2587  000892  6E07               	movwf	clcd_print@data^0,c
  2588  000894  6A08               	clrf	(clcd_print@data+1)^0,c
  2589  000896  0E82               	movlw	130
  2590  000898  6E09               	movwf	clcd_print@addr^0,c
  2591  00089A  EC79  F00B         	call	_clcd_print	;wreg free
  2592                           
  2593                           ;main.c: 503: clcd_print(menu[4] , (0xC0 + (2)));
  2594  00089E  0EA4               	movlw	low (_menu+68)
  2595  0008A0  6E07               	movwf	clcd_print@data^0,c
  2596  0008A2  6A08               	clrf	(clcd_print@data+1)^0,c
  2597  0008A4  0EC2               	movlw	194
  2598  0008A6  6E09               	movwf	clcd_print@addr^0,c
  2599  0008A8  EC79  F00B         	call	_clcd_print	;wreg free
  2600                           
  2601                           ;main.c: 504: clcd_print("  " , (0x80 + (0)));
  2602  0008AC  0E49               	movlw	low (STR_6+14)
  2603  0008AE  6E07               	movwf	clcd_print@data^0,c
  2604  0008B0  5007               	movf	clcd_print@data^0,w,c
  2605  0008B2  A4D8               	btfss	status,2,c
  2606  0008B4  0E06               	movlw	high __smallconst
  2607  0008B6  6E08               	movwf	(clcd_print@data+1)^0,c
  2608  0008B8  0E80               	movlw	128
  2609  0008BA  6E09               	movwf	clcd_print@addr^0,c
  2610  0008BC  EC79  F00B         	call	_clcd_print	;wreg free
  2611                           
  2612                           ;main.c: 505: clcd_print("* " , (0xC0 + (0)));
  2613  0008C0  0EC4               	movlw	low STR_15
  2614  0008C2  6E07               	movwf	clcd_print@data^0,c
  2615  0008C4  5007               	movf	clcd_print@data^0,w,c
  2616  0008C6  A4D8               	btfss	status,2,c
  2617  0008C8  0E06               	movlw	high __smallconst
  2618  0008CA  6E08               	movwf	(clcd_print@data+1)^0,c
  2619  0008CC  0EC0               	movlw	192
  2620  0008CE  6E09               	movwf	clcd_print@addr^0,c
  2621  0008D0  EC79  F00B         	call	_clcd_print	;wreg free
  2622  0008D4                     l3137:
  2623                           
  2624                           ;main.c: 506: };main.c: 508: i--;
  2625  0008D4  061F               	decf	display_menu@i^0,f,c
  2626  0008D6  A0D8               	btfss	status,0,c
  2627  0008D8  0620               	decf	(display_menu@i+1)^0,f,c
  2628  0008DA                     l3141:
  2629                           
  2630                           ;main.c: 512: };main.c: 513: if(lkey == 11 && delay++ == 50000)
  2631  0008DA  0E0B               	movlw	11
  2632  0008DC  181D               	xorwf	display_menu@lkey^0,w,c
  2633  0008DE  A4D8               	btfss	status,2,c
  2634  0008E0  D044               	goto	l3177
  2635  0008E2  4A34               	infsnz	_delay^0,f,c
  2636  0008E4  2A35               	incf	(_delay+1)^0,f,c
  2637  0008E6  0E51               	movlw	81
  2638  0008E8  1834               	xorwf	_delay^0,w,c
  2639  0008EA  E13F               	bnz	l3177
  2640  0008EC  0EC3               	movlw	195
  2641  0008EE  1835               	xorwf	(_delay+1)^0,w,c
  2642  0008F0  A4D8               	btfss	status,2,c
  2643  0008F2  D03B               	goto	l3177
  2644                           
  2645                           ;main.c: 514: {;main.c: 515: flag = 1;
  2646  0008F4  0E00               	movlw	0
  2647  0008F6  6E45               	movwf	(display_menu@flag+1)^0,c
  2648  0008F8  0E01               	movlw	1
  2649  0008FA  6E44               	movwf	display_menu@flag^0,c
  2650                           
  2651                           ;main.c: 516: delay = 0;
  2652  0008FC  0E00               	movlw	0
  2653  0008FE  6E35               	movwf	(_delay+1)^0,c
  2654  000900  0E00               	movlw	0
  2655  000902  6E34               	movwf	_delay^0,c
  2656                           
  2657                           ;main.c: 518: i--;
  2658  000904  061F               	decf	display_menu@i^0,f,c
  2659  000906  A0D8               	btfss	status,0,c
  2660  000908  0620               	decf	(display_menu@i+1)^0,f,c
  2661                           
  2662                           ;main.c: 520: if(i == 0)
  2663  00090A  501F               	movf	display_menu@i^0,w,c
  2664  00090C  1020               	iorwf	(display_menu@i+1)^0,w,c
  2665  00090E  B4D8               	btfsc	status,2,c
  2666                           
  2667                           ;main.c: 521: {;main.c: 522: view_log();
  2668  000910  ECD5  F009         	call	_view_log	;wreg free
  2669                           
  2670                           ;main.c: 523: };main.c: 525: if(i == 1)
  2671  000914  041F               	decf	display_menu@i^0,w,c
  2672  000916  1020               	iorwf	(display_menu@i+1)^0,w,c
  2673  000918  A4D8               	btfss	status,2,c
  2674  00091A  D006               	goto	l3159
  2675                           
  2676                           ;main.c: 526: {;main.c: 527: clear_log();
  2677  00091C  EC82  F009         	call	_clear_log	;wreg free
  2678                           
  2679                           ;main.c: 528: i = 0;
  2680  000920  0E00               	movlw	0
  2681  000922  6E20               	movwf	(display_menu@i+1)^0,c
  2682  000924  0E00               	movlw	0
  2683  000926  6E1F               	movwf	display_menu@i^0,c
  2684  000928                     l3159:
  2685                           
  2686                           ;main.c: 529: };main.c: 531: if(i == 2)
  2687  000928  0E02               	movlw	2
  2688  00092A  181F               	xorwf	display_menu@i^0,w,c
  2689  00092C  1020               	iorwf	(display_menu@i+1)^0,w,c
  2690  00092E  A4D8               	btfss	status,2,c
  2691  000930  D006               	goto	l3165
  2692                           
  2693                           ;main.c: 533: {;main.c: 534: set_time();
  2694  000932  ECBA  F004         	call	_set_time	;wreg free
  2695                           
  2696                           ;main.c: 535: i = 0;
  2697  000936  0E00               	movlw	0
  2698  000938  6E20               	movwf	(display_menu@i+1)^0,c
  2699  00093A  0E00               	movlw	0
  2700  00093C  6E1F               	movwf	display_menu@i^0,c
  2701  00093E                     l3165:
  2702                           
  2703                           ;main.c: 536: };main.c: 538: if(i == 3)
  2704  00093E  0E03               	movlw	3
  2705  000940  181F               	xorwf	display_menu@i^0,w,c
  2706  000942  1020               	iorwf	(display_menu@i+1)^0,w,c
  2707  000944  A4D8               	btfss	status,2,c
  2708  000946  D006               	goto	l3171
  2709                           
  2710                           ;main.c: 539: {;main.c: 540: change_password();
  2711  000948  ECCB  F007         	call	_change_password	;wreg free
  2712                           
  2713                           ;main.c: 541: i = 0;
  2714  00094C  0E00               	movlw	0
  2715  00094E  6E20               	movwf	(display_menu@i+1)^0,c
  2716  000950  0E00               	movlw	0
  2717  000952  6E1F               	movwf	display_menu@i^0,c
  2718  000954                     l3171:
  2719                           
  2720                           ;main.c: 542: };main.c: 544: if(i == 4)
  2721  000954  0E04               	movlw	4
  2722  000956  181F               	xorwf	display_menu@i^0,w,c
  2723  000958  1020               	iorwf	(display_menu@i+1)^0,w,c
  2724  00095A  A4D8               	btfss	status,2,c
  2725  00095C  D006               	goto	l3177
  2726                           
  2727                           ;main.c: 545: {;main.c: 546: download_log();
  2728  00095E  EC23  F009         	call	_download_log	;wreg free
  2729                           
  2730                           ;main.c: 547: i = 0;
  2731  000962  0E00               	movlw	0
  2732  000964  6E20               	movwf	(display_menu@i+1)^0,c
  2733  000966  0E00               	movlw	0
  2734  000968  6E1F               	movwf	display_menu@i^0,c
  2735  00096A                     l3177:
  2736                           
  2737                           ;main.c: 548: };main.c: 549: };main.c: 551: if(key == 10)
  2738  00096A  0E0A               	movlw	10
  2739  00096C  181E               	xorwf	display_menu@key^0,w,c
  2740  00096E  B4D8               	btfsc	status,2,c
  2741  000970  0012               	return	
  2742  000972  D6AE               	goto	l3085
  2743  000974                     __end_of_display_menu:
  2744                           	callstack 0
  2745                           
  2746 ;; *************** function _view_log *****************
  2747 ;; Defined at:
  2748 ;;		line 342 in file "main.c"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;		None
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;  i               2    9[COMRAM] int 
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  1    wreg      void 
  2755 ;; Registers used:
  2756 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2757 ;; Tracked objects:
  2758 ;;		On entry : 0/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2762 ;;      Params:         0       0       0       0       0       0       0
  2763 ;;      Locals:         2       0       0       0       0       0       0
  2764 ;;      Temps:          0       0       0       0       0       0       0
  2765 ;;      Totals:         2       0       0       0       0       0       0
  2766 ;;Total ram usage:        2 bytes
  2767 ;; Hardware stack levels used: 1
  2768 ;; Hardware stack levels required when called: 2
  2769 ;; This function calls:
  2770 ;;		___wmul
  2771 ;;		_clcd_print
  2772 ;;		_clcd_write
  2773 ;;		_read_switches
  2774 ;; This function is called by:
  2775 ;;		_display_menu
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778                           
  2779                           	psect	text13
  2780  0013AA                     __ptext13:
  2781                           	callstack 0
  2782  0013AA                     _view_log:
  2783                           	callstack 27
  2784                           
  2785                           ;main.c: 344: int i = 0;
  2786                           
  2787                           ;incstack = 0
  2788  0013AA  0E00               	movlw	0
  2789  0013AC  6E0B               	movwf	(view_log@i+1)^0,c
  2790  0013AE  0E00               	movlw	0
  2791  0013B0  6E0A               	movwf	view_log@i^0,c
  2792  0013B2                     l2841:
  2793                           
  2794                           ;main.c: 347: {;main.c: 348: key = read_switches(1);
  2795  0013B2  0E01               	movlw	1
  2796  0013B4  EC49  F00C         	call	_read_switches
  2797  0013B8  6E37               	movwf	_key^0,c
  2798                           
  2799                           ;main.c: 351: if(key == 11)
  2800  0013BA  0E0B               	movlw	11
  2801  0013BC  1837               	xorwf	_key^0,w,c
  2802  0013BE  A4D8               	btfss	status,2,c
  2803  0013C0  D00B               	goto	l2851
  2804                           
  2805                           ;main.c: 352: {;main.c: 353: i++;
  2806  0013C2  4A0A               	infsnz	view_log@i^0,f,c
  2807  0013C4  2A0B               	incf	(view_log@i+1)^0,f,c
  2808                           
  2809                           ;main.c: 354: if(i == 10)
  2810  0013C6  0E0A               	movlw	10
  2811  0013C8  180A               	xorwf	view_log@i^0,w,c
  2812  0013CA  100B               	iorwf	(view_log@i+1)^0,w,c
  2813  0013CC  A4D8               	btfss	status,2,c
  2814  0013CE  D004               	goto	l2851
  2815                           
  2816                           ;main.c: 355: i = 0;
  2817  0013D0  0E00               	movlw	0
  2818  0013D2  6E0B               	movwf	(view_log@i+1)^0,c
  2819  0013D4  0E00               	movlw	0
  2820  0013D6  6E0A               	movwf	view_log@i^0,c
  2821  0013D8                     l2851:
  2822                           
  2823                           ;main.c: 356: };main.c: 359: if(key == 12)
  2824  0013D8  0E0C               	movlw	12
  2825  0013DA  1837               	xorwf	_key^0,w,c
  2826  0013DC  A4D8               	btfss	status,2,c
  2827  0013DE  D00C               	goto	l2859
  2828                           
  2829                           ;main.c: 360: {;main.c: 361: i--;
  2830  0013E0  060A               	decf	view_log@i^0,f,c
  2831  0013E2  A0D8               	btfss	status,0,c
  2832  0013E4  060B               	decf	(view_log@i+1)^0,f,c
  2833                           
  2834                           ;main.c: 362: if(i == -1)
  2835  0013E6  280A               	incf	view_log@i^0,w,c
  2836  0013E8  E107               	bnz	l2859
  2837  0013EA  280B               	incf	(view_log@i+1)^0,w,c
  2838  0013EC  A4D8               	btfss	status,2,c
  2839  0013EE  D004               	goto	l2859
  2840                           
  2841                           ;main.c: 363: i = 9;
  2842  0013F0  0E00               	movlw	0
  2843  0013F2  6E0B               	movwf	(view_log@i+1)^0,c
  2844  0013F4  0E09               	movlw	9
  2845  0013F6  6E0A               	movwf	view_log@i^0,c
  2846  0013F8                     l2859:
  2847                           
  2848                           ;main.c: 364: };main.c: 367: if(key == 10)
  2849  0013F8  0E0A               	movlw	10
  2850  0013FA  1837               	xorwf	_key^0,w,c
  2851  0013FC  A4D8               	btfss	status,2,c
  2852  0013FE  D006               	goto	l2863
  2853                           
  2854                           ;main.c: 368: {;main.c: 369: clcd_write(0x01, 0);
  2855  001400  0E00               	movlw	0
  2856  001402  6E01               	movwf	clcd_write@control_bit^0,c
  2857  001404  0E01               	movlw	1
  2858  001406  EC27  F00D         	call	_clcd_write
  2859                           
  2860                           ;main.c: 370: break;
  2861  00140A  0012               	return	
  2862  00140C                     l2863:
  2863                           
  2864                           ;main.c: 371: };main.c: 374: clcd_print("TIME     EV  RPM " , (0x80 + (0)));
  2865  00140C  0E29               	movlw	low STR_8
  2866  00140E  6E07               	movwf	clcd_print@data^0,c
  2867  001410  5007               	movf	clcd_print@data^0,w,c
  2868  001412  A4D8               	btfss	status,2,c
  2869  001414  0E06               	movlw	high __smallconst
  2870  001416  6E08               	movwf	(clcd_print@data+1)^0,c
  2871  001418  0E80               	movlw	128
  2872  00141A  6E09               	movwf	clcd_print@addr^0,c
  2873  00141C  EC79  F00B         	call	_clcd_print	;wreg free
  2874                           
  2875                           ;main.c: 375: clcd_print(event[i] , (0xC0 + (0)));
  2876  001420  C00A  F001         	movff	view_log@i,___wmul@multiplier
  2877  001424  C00B  F002         	movff	view_log@i+1,___wmul@multiplier+1
  2878  001428  0E00               	movlw	0
  2879  00142A  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2880  00142C  0E11               	movlw	17
  2881  00142E  6E03               	movwf	___wmul@multiplicand^0,c
  2882  001430  EC3B  F00D         	call	___wmul	;wreg free
  2883  001434  0E00               	movlw	low _event
  2884  001436  2401               	addwf	?___wmul^0,w,c
  2885  001438  6E07               	movwf	clcd_print@data^0,c
  2886  00143A  0E01               	movlw	high _event
  2887  00143C  2002               	addwfc	(?___wmul+1)^0,w,c
  2888  00143E  6E08               	movwf	(clcd_print@data+1)^0,c
  2889  001440  0EC0               	movlw	192
  2890  001442  6E09               	movwf	clcd_print@addr^0,c
  2891  001444  EC79  F00B         	call	_clcd_print	;wreg free
  2892  001448  D7B4               	goto	l2841
  2893  00144A                     __end_of_view_log:
  2894                           	callstack 0
  2895                           
  2896 ;; *************** function _set_time *****************
  2897 ;; Defined at:
  2898 ;;		line 161 in file "main.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;		None
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  wait            4   11[COMRAM] unsigned long 
  2903 ;;  time           10    0        unsigned char [10]
  2904 ;;  flag            4   23[COMRAM] unsigned long 
  2905 ;;  wait            4    0        unsigned long 
  2906 ;;  clock_reg       3    0        unsigned char [3]
  2907 ;;  hour            1   22[COMRAM] unsigned char 
  2908 ;;  mins            1   21[COMRAM] unsigned char 
  2909 ;;  secs            1   20[COMRAM] unsigned char 
  2910 ;;  key             1   19[COMRAM] unsigned char 
  2911 ;;  HOUR            1   18[COMRAM] unsigned char 
  2912 ;;  MIN             1   17[COMRAM] unsigned char 
  2913 ;;  SEC             1   16[COMRAM] unsigned char 
  2914 ;;  prekey          1   15[COMRAM] unsigned char 
  2915 ;; Return value:  Size  Location     Type
  2916 ;;                  1    wreg      void 
  2917 ;; Registers used:
  2918 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2919 ;; Tracked objects:
  2920 ;;		On entry : 0/0
  2921 ;;		On exit  : 0/0
  2922 ;;		Unchanged: 0/0
  2923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2924 ;;      Params:         0       0       0       0       0       0       0
  2925 ;;      Locals:        16       0       0       0       0       0       0
  2926 ;;      Temps:          1       0       0       0       0       0       0
  2927 ;;      Totals:        17       0       0       0       0       0       0
  2928 ;;Total ram usage:       17 bytes
  2929 ;; Hardware stack levels used: 1
  2930 ;; Hardware stack levels required when called: 4
  2931 ;; This function calls:
  2932 ;;		___lbdiv
  2933 ;;		___lbmod
  2934 ;;		_clcd_print
  2935 ;;		_clcd_putch
  2936 ;;		_clcd_write
  2937 ;;		_convertval
  2938 ;;		_read_ds1307
  2939 ;;		_read_switches
  2940 ;;		_write_ds1307
  2941 ;; This function is called by:
  2942 ;;		_display_menu
  2943 ;; This function uses a non-reentrant model
  2944 ;;
  2945                           
  2946                           	psect	text14
  2947  000974                     __ptext14:
  2948                           	callstack 0
  2949  000974                     _set_time:
  2950                           	callstack 25
  2951                           
  2952                           ;incstack = 0
  2953  000974  0E00               	movlw	0
  2954  000976  6E18               	movwf	set_time@flag^0,c
  2955  000978  0E00               	movlw	0
  2956  00097A  6E19               	movwf	(set_time@flag+1)^0,c
  2957  00097C  0E00               	movlw	0
  2958  00097E  6E1A               	movwf	(set_time@flag+2)^0,c
  2959  000980  0E00               	movlw	0
  2960  000982  6E1B               	movwf	(set_time@flag+3)^0,c
  2961                           
  2962                           ;main.c: 164: char clock_reg[3];;main.c: 165: unsigned char key , prekey, time[10];;main
      +                          .c: 166: clcd_write(0x01, 0);
  2963  000984  0E00               	movlw	0
  2964  000986  6E01               	movwf	clcd_write@control_bit^0,c
  2965  000988  0E01               	movlw	1
  2966  00098A  EC27  F00D         	call	_clcd_write
  2967                           
  2968                           ;main.c: 167: char secs , mins , hour, SEC , MIN , HOUR;;main.c: 171: hour = (read_ds130
      +                          7(0x02) / 10) << 4 & 0x01;
  2969  00098E  0E0A               	movlw	10
  2970  000990  6E04               	movwf	___lbdiv@divisor^0,c
  2971  000992  0E02               	movlw	2
  2972  000994  ECD3  F00C         	call	_read_ds1307
  2973  000998  EC86  F00C         	call	___lbdiv
  2974  00099C  6E0B               	movwf	??_set_time^0,c
  2975  00099E  380B               	swapf	??_set_time^0,w,c
  2976  0009A0  0BF0               	andlw	240
  2977  0009A2  0B01               	andlw	1
  2978  0009A4  6E17               	movwf	set_time@hour^0,c
  2979                           
  2980                           ;main.c: 172: hour = ((read_ds1307(0x02) % 10) & 0x0f) | hour;
  2981  0009A6  0E0A               	movlw	10
  2982  0009A8  6E04               	movwf	___lbmod@divisor^0,c
  2983  0009AA  0E02               	movlw	2
  2984  0009AC  ECD3  F00C         	call	_read_ds1307
  2985  0009B0  ECFD  F00C         	call	___lbmod
  2986  0009B4  0B0F               	andlw	15
  2987  0009B6  1017               	iorwf	set_time@hour^0,w,c
  2988  0009B8  6E17               	movwf	set_time@hour^0,c
  2989                           
  2990                           ;main.c: 173: mins = (read_ds1307(0x01) / 10) << 4;
  2991  0009BA  0E0A               	movlw	10
  2992  0009BC  6E04               	movwf	___lbdiv@divisor^0,c
  2993  0009BE  0E01               	movlw	1
  2994  0009C0  ECD3  F00C         	call	_read_ds1307
  2995  0009C4  EC86  F00C         	call	___lbdiv
  2996  0009C8  6E0B               	movwf	??_set_time^0,c
  2997  0009CA  380B               	swapf	??_set_time^0,w,c
  2998  0009CC  0BF0               	andlw	240
  2999  0009CE  6E16               	movwf	set_time@mins^0,c
  3000                           
  3001                           ;main.c: 174: mins = ((read_ds1307(0x01) % 10) & 0x0f) | mins;
  3002  0009D0  0E0A               	movlw	10
  3003  0009D2  6E04               	movwf	___lbmod@divisor^0,c
  3004  0009D4  0E01               	movlw	1
  3005  0009D6  ECD3  F00C         	call	_read_ds1307
  3006  0009DA  ECFD  F00C         	call	___lbmod
  3007  0009DE  0B0F               	andlw	15
  3008  0009E0  1016               	iorwf	set_time@mins^0,w,c
  3009  0009E2  6E16               	movwf	set_time@mins^0,c
  3010                           
  3011                           ;main.c: 175: secs = (read_ds1307(0x00) / 10) << 4;
  3012  0009E4  0E0A               	movlw	10
  3013  0009E6  6E04               	movwf	___lbdiv@divisor^0,c
  3014  0009E8  0E00               	movlw	0
  3015  0009EA  ECD3  F00C         	call	_read_ds1307
  3016  0009EE  EC86  F00C         	call	___lbdiv
  3017  0009F2  6E0B               	movwf	??_set_time^0,c
  3018  0009F4  380B               	swapf	??_set_time^0,w,c
  3019  0009F6  0BF0               	andlw	240
  3020  0009F8  6E15               	movwf	set_time@secs^0,c
  3021                           
  3022                           ;main.c: 176: secs = ((read_ds1307(0x00) % 10) & 0x0f) | secs;
  3023  0009FA  0E0A               	movlw	10
  3024  0009FC  6E04               	movwf	___lbmod@divisor^0,c
  3025  0009FE  0E00               	movlw	0
  3026  000A00  ECD3  F00C         	call	_read_ds1307
  3027  000A04  ECFD  F00C         	call	___lbmod
  3028  000A08  0B0F               	andlw	15
  3029  000A0A  1015               	iorwf	set_time@secs^0,w,c
  3030  000A0C  6E15               	movwf	set_time@secs^0,c
  3031  000A0E                     l2681:
  3032                           
  3033                           ;main.c: 179: {;main.c: 181: clcd_print("TIME SET" , (0x80 + (4)));
  3034  000A0E  0EB3               	movlw	low STR_5
  3035  000A10  6E07               	movwf	clcd_print@data^0,c
  3036  000A12  5007               	movf	clcd_print@data^0,w,c
  3037  000A14  A4D8               	btfss	status,2,c
  3038  000A16  0E06               	movlw	high __smallconst
  3039  000A18  6E08               	movwf	(clcd_print@data+1)^0,c
  3040  000A1A  0E84               	movlw	132
  3041  000A1C  6E09               	movwf	clcd_print@addr^0,c
  3042  000A1E  EC79  F00B         	call	_clcd_print	;wreg free
  3043                           
  3044                           ;main.c: 182: key = read_switches(1);
  3045  000A22  0E01               	movlw	1
  3046  000A24  EC49  F00C         	call	_read_switches
  3047  000A28  6E14               	movwf	set_time@key^0,c
  3048                           
  3049                           ;main.c: 183: prekey = read_switches(0);
  3050  000A2A  0E00               	movlw	0
  3051  000A2C  EC49  F00C         	call	_read_switches
  3052  000A30  6E10               	movwf	set_time@prekey^0,c
  3053                           
  3054                           ;main.c: 186: if(key == 11)
  3055  000A32  0E0B               	movlw	11
  3056  000A34  1814               	xorwf	set_time@key^0,w,c
  3057  000A36  A4D8               	btfss	status,2,c
  3058  000A38  D028               	goto	l2707
  3059                           
  3060                           ;main.c: 187: {;main.c: 188: if(flag == 0)
  3061  000A3A  5018               	movf	set_time@flag^0,w,c
  3062  000A3C  1019               	iorwf	(set_time@flag+1)^0,w,c
  3063  000A3E  101A               	iorwf	(set_time@flag+2)^0,w,c
  3064  000A40  101B               	iorwf	(set_time@flag+3)^0,w,c
  3065  000A42  A4D8               	btfss	status,2,c
  3066  000A44  D007               	goto	l2695
  3067                           
  3068                           ;main.c: 189: {;main.c: 191: if(secs++ == 59)
  3069  000A46  2A15               	incf	set_time@secs^0,f,c
  3070  000A48  0E3C               	movlw	60
  3071  000A4A  1815               	xorwf	set_time@secs^0,w,c
  3072  000A4C  A4D8               	btfss	status,2,c
  3073  000A4E  D002               	goto	l2695
  3074                           
  3075                           ;main.c: 192: secs = 0;
  3076  000A50  0E00               	movlw	0
  3077  000A52  6E15               	movwf	set_time@secs^0,c
  3078  000A54                     l2695:
  3079                           
  3080                           ;main.c: 193: };main.c: 195: if(flag == 1)
  3081  000A54  0418               	decf	set_time@flag^0,w,c
  3082  000A56  1019               	iorwf	(set_time@flag+1)^0,w,c
  3083  000A58  101A               	iorwf	(set_time@flag+2)^0,w,c
  3084  000A5A  101B               	iorwf	(set_time@flag+3)^0,w,c
  3085  000A5C  A4D8               	btfss	status,2,c
  3086  000A5E  D007               	goto	l2701
  3087                           
  3088                           ;main.c: 196: {;main.c: 198: if(mins++ == 59)
  3089  000A60  2A16               	incf	set_time@mins^0,f,c
  3090  000A62  0E3C               	movlw	60
  3091  000A64  1816               	xorwf	set_time@mins^0,w,c
  3092  000A66  A4D8               	btfss	status,2,c
  3093  000A68  D002               	goto	l2701
  3094                           
  3095                           ;main.c: 199: mins = 0;
  3096  000A6A  0E00               	movlw	0
  3097  000A6C  6E16               	movwf	set_time@mins^0,c
  3098  000A6E                     l2701:
  3099                           
  3100                           ;main.c: 200: };main.c: 202: if(flag == 2)
  3101  000A6E  0E02               	movlw	2
  3102  000A70  1818               	xorwf	set_time@flag^0,w,c
  3103  000A72  1019               	iorwf	(set_time@flag+1)^0,w,c
  3104  000A74  101A               	iorwf	(set_time@flag+2)^0,w,c
  3105  000A76  101B               	iorwf	(set_time@flag+3)^0,w,c
  3106  000A78  A4D8               	btfss	status,2,c
  3107  000A7A  D007               	goto	l2707
  3108                           
  3109                           ;main.c: 203: {;main.c: 205: if(hour++ == 12)
  3110  000A7C  2A17               	incf	set_time@hour^0,f,c
  3111  000A7E  0E0D               	movlw	13
  3112  000A80  1817               	xorwf	set_time@hour^0,w,c
  3113  000A82  A4D8               	btfss	status,2,c
  3114  000A84  D002               	goto	l2707
  3115                           
  3116                           ;main.c: 206: hour = 0;
  3117  000A86  0E00               	movlw	0
  3118  000A88  6E17               	movwf	set_time@hour^0,c
  3119  000A8A                     l2707:
  3120                           
  3121                           ;main.c: 207: };main.c: 208: };main.c: 211: if(key == 12)
  3122  000A8A  0E0C               	movlw	12
  3123  000A8C  1814               	xorwf	set_time@key^0,w,c
  3124  000A8E  A4D8               	btfss	status,2,c
  3125  000A90  D025               	goto	l2727
  3126                           
  3127                           ;main.c: 212: {;main.c: 213: if(flag == 0)
  3128  000A92  5018               	movf	set_time@flag^0,w,c
  3129  000A94  1019               	iorwf	(set_time@flag+1)^0,w,c
  3130  000A96  101A               	iorwf	(set_time@flag+2)^0,w,c
  3131  000A98  101B               	iorwf	(set_time@flag+3)^0,w,c
  3132  000A9A  A4D8               	btfss	status,2,c
  3133  000A9C  D006               	goto	l2715
  3134                           
  3135                           ;main.c: 214: {;main.c: 216: if(secs-- == 0)
  3136  000A9E  0615               	decf	set_time@secs^0,f,c
  3137  000AA0  2815               	incf	set_time@secs^0,w,c
  3138  000AA2  A4D8               	btfss	status,2,c
  3139  000AA4  D002               	goto	l2715
  3140                           
  3141                           ;main.c: 217: secs = 59;
  3142  000AA6  0E3B               	movlw	59
  3143  000AA8  6E15               	movwf	set_time@secs^0,c
  3144  000AAA                     l2715:
  3145                           
  3146                           ;main.c: 218: };main.c: 220: if(flag == 1)
  3147  000AAA  0418               	decf	set_time@flag^0,w,c
  3148  000AAC  1019               	iorwf	(set_time@flag+1)^0,w,c
  3149  000AAE  101A               	iorwf	(set_time@flag+2)^0,w,c
  3150  000AB0  101B               	iorwf	(set_time@flag+3)^0,w,c
  3151  000AB2  A4D8               	btfss	status,2,c
  3152  000AB4  D006               	goto	l2721
  3153                           
  3154                           ;main.c: 221: {;main.c: 223: if(mins-- == 0)
  3155  000AB6  0616               	decf	set_time@mins^0,f,c
  3156  000AB8  2816               	incf	set_time@mins^0,w,c
  3157  000ABA  A4D8               	btfss	status,2,c
  3158  000ABC  D002               	goto	l2721
  3159                           
  3160                           ;main.c: 224: mins = 59;
  3161  000ABE  0E3B               	movlw	59
  3162  000AC0  6E16               	movwf	set_time@mins^0,c
  3163  000AC2                     l2721:
  3164                           
  3165                           ;main.c: 225: };main.c: 227: if(flag == 2)
  3166  000AC2  0E02               	movlw	2
  3167  000AC4  1818               	xorwf	set_time@flag^0,w,c
  3168  000AC6  1019               	iorwf	(set_time@flag+1)^0,w,c
  3169  000AC8  101A               	iorwf	(set_time@flag+2)^0,w,c
  3170  000ACA  101B               	iorwf	(set_time@flag+3)^0,w,c
  3171  000ACC  A4D8               	btfss	status,2,c
  3172  000ACE  D006               	goto	l2727
  3173                           
  3174                           ;main.c: 228: {;main.c: 230: if(hour-- == 0)
  3175  000AD0  0617               	decf	set_time@hour^0,f,c
  3176  000AD2  2817               	incf	set_time@hour^0,w,c
  3177  000AD4  A4D8               	btfss	status,2,c
  3178  000AD6  D002               	goto	l2727
  3179                           
  3180                           ;main.c: 231: hour = 12;
  3181  000AD8  0E0C               	movlw	12
  3182  000ADA  6E17               	movwf	set_time@hour^0,c
  3183  000ADC                     l2727:
  3184                           
  3185                           ;main.c: 232: };main.c: 233: };main.c: 236: if(prekey == 9 )
  3186  000ADC  0E09               	movlw	9
  3187  000ADE  1810               	xorwf	set_time@prekey^0,w,c
  3188  000AE0  A4D8               	btfss	status,2,c
  3189  000AE2  D016               	goto	l2737
  3190                           
  3191                           ;main.c: 239: flag++;
  3192  000AE4  0E01               	movlw	1
  3193  000AE6  2618               	addwf	set_time@flag^0,f,c
  3194  000AE8  0E00               	movlw	0
  3195  000AEA  2219               	addwfc	(set_time@flag+1)^0,f,c
  3196  000AEC  221A               	addwfc	(set_time@flag+2)^0,f,c
  3197  000AEE  221B               	addwfc	(set_time@flag+3)^0,f,c
  3198                           
  3199                           ;main.c: 240: if(flag > 2)
  3200  000AF0  501B               	movf	(set_time@flag+3)^0,w,c
  3201  000AF2  101A               	iorwf	(set_time@flag+2)^0,w,c
  3202  000AF4  1019               	iorwf	(set_time@flag+1)^0,w,c
  3203  000AF6  E104               	bnz	u1860
  3204  000AF8  0E03               	movlw	3
  3205  000AFA  5C18               	subwf	set_time@flag^0,w,c
  3206  000AFC  A0D8               	btfss	status,0,c
  3207  000AFE  D008               	goto	l2737
  3208  000B00                     u1860:
  3209                           
  3210                           ;main.c: 241: flag = 0;
  3211  000B00  0E00               	movlw	0
  3212  000B02  6E18               	movwf	set_time@flag^0,c
  3213  000B04  0E00               	movlw	0
  3214  000B06  6E19               	movwf	(set_time@flag+1)^0,c
  3215  000B08  0E00               	movlw	0
  3216  000B0A  6E1A               	movwf	(set_time@flag+2)^0,c
  3217  000B0C  0E00               	movlw	0
  3218  000B0E  6E1B               	movwf	(set_time@flag+3)^0,c
  3219  000B10                     l2737:
  3220                           
  3221                           ;main.c: 242: };main.c: 245: if(key == 10)
  3222  000B10  0E0A               	movlw	10
  3223  000B12  1814               	xorwf	set_time@key^0,w,c
  3224  000B14  A4D8               	btfss	status,2,c
  3225  000B16  D006               	goto	l2741
  3226                           
  3227                           ;main.c: 246: {;main.c: 247: clcd_write(0x01, 0);
  3228  000B18  0E00               	movlw	0
  3229  000B1A  6E01               	movwf	clcd_write@control_bit^0,c
  3230  000B1C  0E01               	movlw	1
  3231  000B1E  EC27  F00D         	call	_clcd_write
  3232                           
  3233                           ;main.c: 248: break;
  3234  000B22  0012               	return	
  3235  000B24                     l2741:
  3236                           
  3237                           ;main.c: 249: };main.c: 252: SEC = convertval(secs);
  3238  000B24  5015               	movf	set_time@secs^0,w,c
  3239  000B26  ECE8  F00C         	call	_convertval
  3240  000B2A  6E11               	movwf	set_time@SEC^0,c
  3241                           
  3242                           ;main.c: 253: MIN = convertval(mins);
  3243  000B2C  5016               	movf	set_time@mins^0,w,c
  3244  000B2E  ECE8  F00C         	call	_convertval
  3245  000B32  6E12               	movwf	set_time@MIN^0,c
  3246                           
  3247                           ;main.c: 254: HOUR = convertval(hour);
  3248  000B34  5017               	movf	set_time@hour^0,w,c
  3249  000B36  ECE8  F00C         	call	_convertval
  3250  000B3A  6E13               	movwf	set_time@HOUR^0,c
  3251                           
  3252                           ;main.c: 257: write_ds1307(0x00 , SEC | 0x00);
  3253  000B3C  C011  F002         	movff	set_time@SEC,write_ds1307@data
  3254  000B40  0E00               	movlw	0
  3255  000B42  EC5E  F00D         	call	_write_ds1307
  3256                           
  3257                           ;main.c: 258: write_ds1307(0x01, MIN | 0x00);
  3258  000B46  C012  F002         	movff	set_time@MIN,write_ds1307@data
  3259  000B4A  0E01               	movlw	1
  3260  000B4C  EC5E  F00D         	call	_write_ds1307
  3261                           
  3262                           ;main.c: 259: write_ds1307(0x02 , HOUR | 0x00);
  3263  000B50  C013  F002         	movff	set_time@HOUR,write_ds1307@data
  3264  000B54  0E02               	movlw	2
  3265  000B56  EC5E  F00D         	call	_write_ds1307
  3266                           
  3267                           ;main.c: 261: for(unsigned long wait = 100000; wait--;);
  3268  000B5A  0EA0               	movlw	160
  3269  000B5C  6E0C               	movwf	set_time@wait_209^0,c
  3270  000B5E  0E86               	movlw	134
  3271  000B60  6E0D               	movwf	(set_time@wait_209+1)^0,c
  3272  000B62  0E01               	movlw	1
  3273  000B64  6E0E               	movwf	(set_time@wait_209+2)^0,c
  3274  000B66  0E00               	movlw	0
  3275  000B68  6E0F               	movwf	(set_time@wait_209+3)^0,c
  3276  000B6A                     l2751:
  3277  000B6A  060C               	decf	set_time@wait_209^0,f,c
  3278  000B6C  0E00               	movlw	0
  3279  000B6E  5A0D               	subwfb	(set_time@wait_209+1)^0,f,c
  3280  000B70  5A0E               	subwfb	(set_time@wait_209+2)^0,f,c
  3281  000B72  5A0F               	subwfb	(set_time@wait_209+3)^0,f,c
  3282  000B74  280C               	incf	set_time@wait_209^0,w,c
  3283  000B76  E1F9               	bnz	l2751
  3284  000B78  280D               	incf	(set_time@wait_209+1)^0,w,c
  3285  000B7A  E1F7               	bnz	l2751
  3286  000B7C  280E               	incf	(set_time@wait_209+2)^0,w,c
  3287  000B7E  E1F5               	bnz	l2751
  3288  000B80  280F               	incf	(set_time@wait_209+3)^0,w,c
  3289  000B82  A4D8               	btfss	status,2,c
  3290  000B84  D7F2               	goto	l2751
  3291                           
  3292                           ;main.c: 262: clcd_putch(hour / 10 + '0', (0xC0 + (1)));
  3293  000B86  0EC1               	movlw	193
  3294  000B88  6E08               	movwf	clcd_putch@addr^0,c
  3295  000B8A  0E0A               	movlw	10
  3296  000B8C  6E04               	movwf	___lbdiv@divisor^0,c
  3297  000B8E  5017               	movf	set_time@hour^0,w,c
  3298  000B90  EC86  F00C         	call	___lbdiv
  3299  000B94  0F30               	addlw	48
  3300  000B96  EC7C  F00D         	call	_clcd_putch
  3301                           
  3302                           ;main.c: 263: clcd_putch(hour % 10 + '0', (0xC0 + (2)));
  3303  000B9A  0EC2               	movlw	194
  3304  000B9C  6E08               	movwf	clcd_putch@addr^0,c
  3305  000B9E  0E0A               	movlw	10
  3306  000BA0  6E04               	movwf	___lbmod@divisor^0,c
  3307  000BA2  5017               	movf	set_time@hour^0,w,c
  3308  000BA4  ECFD  F00C         	call	___lbmod
  3309  000BA8  0F30               	addlw	48
  3310  000BAA  EC7C  F00D         	call	_clcd_putch
  3311                           
  3312                           ;main.c: 264: clcd_putch(':', (0xC0 + (3)));
  3313  000BAE  0EC3               	movlw	195
  3314  000BB0  6E08               	movwf	clcd_putch@addr^0,c
  3315  000BB2  0E3A               	movlw	58
  3316  000BB4  EC7C  F00D         	call	_clcd_putch
  3317                           
  3318                           ;main.c: 265: clcd_putch(mins / 10 + '0', (0xC0 + (4)));
  3319  000BB8  0EC4               	movlw	196
  3320  000BBA  6E08               	movwf	clcd_putch@addr^0,c
  3321  000BBC  0E0A               	movlw	10
  3322  000BBE  6E04               	movwf	___lbdiv@divisor^0,c
  3323  000BC0  5016               	movf	set_time@mins^0,w,c
  3324  000BC2  EC86  F00C         	call	___lbdiv
  3325  000BC6  0F30               	addlw	48
  3326  000BC8  EC7C  F00D         	call	_clcd_putch
  3327                           
  3328                           ;main.c: 266: clcd_putch(mins % 10 + '0', (0xC0 + (5)));
  3329  000BCC  0EC5               	movlw	197
  3330  000BCE  6E08               	movwf	clcd_putch@addr^0,c
  3331  000BD0  0E0A               	movlw	10
  3332  000BD2  6E04               	movwf	___lbmod@divisor^0,c
  3333  000BD4  5016               	movf	set_time@mins^0,w,c
  3334  000BD6  ECFD  F00C         	call	___lbmod
  3335  000BDA  0F30               	addlw	48
  3336  000BDC  EC7C  F00D         	call	_clcd_putch
  3337                           
  3338                           ;main.c: 267: clcd_putch(':', (0xC0 + (6)));
  3339  000BE0  0EC6               	movlw	198
  3340  000BE2  6E08               	movwf	clcd_putch@addr^0,c
  3341  000BE4  0E3A               	movlw	58
  3342  000BE6  EC7C  F00D         	call	_clcd_putch
  3343                           
  3344                           ;main.c: 268: clcd_putch(secs / 10 + '0', (0xC0 + (7)));
  3345  000BEA  0EC7               	movlw	199
  3346  000BEC  6E08               	movwf	clcd_putch@addr^0,c
  3347  000BEE  0E0A               	movlw	10
  3348  000BF0  6E04               	movwf	___lbdiv@divisor^0,c
  3349  000BF2  5015               	movf	set_time@secs^0,w,c
  3350  000BF4  EC86  F00C         	call	___lbdiv
  3351  000BF8  0F30               	addlw	48
  3352  000BFA  EC7C  F00D         	call	_clcd_putch
  3353                           
  3354                           ;main.c: 269: clcd_putch(secs % 10 + '0', (0xC0 + (8)));
  3355  000BFE  0EC8               	movlw	200
  3356  000C00  6E08               	movwf	clcd_putch@addr^0,c
  3357  000C02  0E0A               	movlw	10
  3358  000C04  6E04               	movwf	___lbmod@divisor^0,c
  3359  000C06  5015               	movf	set_time@secs^0,w,c
  3360  000C08  ECFD  F00C         	call	___lbmod
  3361  000C0C  0F30               	addlw	48
  3362  000C0E  EC7C  F00D         	call	_clcd_putch
  3363  000C12  D6FD               	goto	l2681
  3364  000C14                     __end_of_set_time:
  3365                           	callstack 0
  3366                           
  3367 ;; *************** function _write_ds1307 *****************
  3368 ;; Defined at:
  3369 ;;		line 45 in file "ds1307.c"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;  address         1    wreg     unsigned char 
  3372 ;;  data            1    1[COMRAM] unsigned char 
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;  address         1    2[COMRAM] unsigned char 
  3375 ;; Return value:  Size  Location     Type
  3376 ;;                  1    wreg      void 
  3377 ;; Registers used:
  3378 ;;		wreg, status,2, cstack
  3379 ;; Tracked objects:
  3380 ;;		On entry : 0/0
  3381 ;;		On exit  : 0/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3384 ;;      Params:         1       0       0       0       0       0       0
  3385 ;;      Locals:         1       0       0       0       0       0       0
  3386 ;;      Temps:          0       0       0       0       0       0       0
  3387 ;;      Totals:         2       0       0       0       0       0       0
  3388 ;;Total ram usage:        2 bytes
  3389 ;; Hardware stack levels used: 1
  3390 ;; Hardware stack levels required when called: 2
  3391 ;; This function calls:
  3392 ;;		_i2c_start
  3393 ;;		_i2c_stop
  3394 ;;		_i2c_write
  3395 ;; This function is called by:
  3396 ;;		_init_ds1307
  3397 ;;		_set_time
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           	psect	text15
  3402  001ABC                     __ptext15:
  3403                           	callstack 0
  3404  001ABC                     _write_ds1307:
  3405                           	callstack 26
  3406                           
  3407                           ;incstack = 0
  3408                           ;write_ds1307@address stored from wreg
  3409  001ABC  6E03               	movwf	write_ds1307@address^0,c
  3410                           
  3411                           ;ds1307.c: 47: i2c_start();
  3412  001ABE  ECBE  F00D         	call	_i2c_start	;wreg free
  3413                           
  3414                           ;ds1307.c: 48: i2c_write(0xD0);
  3415  001AC2  0ED0               	movlw	208
  3416  001AC4  ECAA  F00D         	call	_i2c_write
  3417                           
  3418                           ;ds1307.c: 49: i2c_write(address);
  3419  001AC8  5003               	movf	write_ds1307@address^0,w,c
  3420  001ACA  ECAA  F00D         	call	_i2c_write
  3421                           
  3422                           ;ds1307.c: 50: i2c_write(data);
  3423  001ACE  5002               	movf	write_ds1307@data^0,w,c
  3424  001AD0  ECAA  F00D         	call	_i2c_write
  3425                           
  3426                           ;ds1307.c: 51: i2c_stop();
  3427  001AD4  ECBA  F00D         	call	_i2c_stop	;wreg free
  3428  001AD8  0012               	return		;funcret
  3429  001ADA                     __end_of_write_ds1307:
  3430                           	callstack 0
  3431                           
  3432 ;; *************** function _read_ds1307 *****************
  3433 ;; Defined at:
  3434 ;;		line 54 in file "ds1307.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;  address         1    wreg     unsigned char 
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;  address         1    1[COMRAM] unsigned char 
  3439 ;;  data            1    2[COMRAM] unsigned char 
  3440 ;; Return value:  Size  Location     Type
  3441 ;;                  1    wreg      unsigned char 
  3442 ;; Registers used:
  3443 ;;		wreg, status,2, cstack
  3444 ;; Tracked objects:
  3445 ;;		On entry : 0/0
  3446 ;;		On exit  : 0/0
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3449 ;;      Params:         0       0       0       0       0       0       0
  3450 ;;      Locals:         2       0       0       0       0       0       0
  3451 ;;      Temps:          0       0       0       0       0       0       0
  3452 ;;      Totals:         2       0       0       0       0       0       0
  3453 ;;Total ram usage:        2 bytes
  3454 ;; Hardware stack levels used: 1
  3455 ;; Hardware stack levels required when called: 3
  3456 ;; This function calls:
  3457 ;;		_i2c_read
  3458 ;;		_i2c_rep_start
  3459 ;;		_i2c_start
  3460 ;;		_i2c_stop
  3461 ;;		_i2c_write
  3462 ;; This function is called by:
  3463 ;;		_init_ds1307
  3464 ;;		_set_time
  3465 ;;		_get_time
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           	psect	text16
  3470  0019A6                     __ptext16:
  3471                           	callstack 0
  3472  0019A6                     _read_ds1307:
  3473                           	callstack 25
  3474                           
  3475                           ;incstack = 0
  3476                           ;read_ds1307@address stored from wreg
  3477  0019A6  6E02               	movwf	read_ds1307@address^0,c
  3478                           
  3479                           ;ds1307.c: 56: unsigned char data;;ds1307.c: 58: i2c_start();
  3480  0019A8  ECBE  F00D         	call	_i2c_start	;wreg free
  3481                           
  3482                           ;ds1307.c: 59: i2c_write(0xD0);
  3483  0019AC  0ED0               	movlw	208
  3484  0019AE  ECAA  F00D         	call	_i2c_write
  3485                           
  3486                           ;ds1307.c: 60: i2c_write(address);
  3487  0019B2  5002               	movf	read_ds1307@address^0,w,c
  3488  0019B4  ECAA  F00D         	call	_i2c_write
  3489                           
  3490                           ;ds1307.c: 61: i2c_rep_start();
  3491  0019B8  ECC2  F00D         	call	_i2c_rep_start	;wreg free
  3492                           
  3493                           ;ds1307.c: 62: i2c_write(0xD1);
  3494  0019BC  0ED1               	movlw	209
  3495  0019BE  ECAA  F00D         	call	_i2c_write
  3496                           
  3497                           ;ds1307.c: 63: data = i2c_read();
  3498  0019C2  ECB0  F00D         	call	_i2c_read	;wreg free
  3499  0019C6  6E03               	movwf	read_ds1307@data^0,c
  3500                           
  3501                           ;ds1307.c: 64: i2c_stop();
  3502  0019C8  ECBA  F00D         	call	_i2c_stop	;wreg free
  3503                           
  3504                           ;ds1307.c: 66: return data;
  3505  0019CC  5003               	movf	read_ds1307@data^0,w,c
  3506  0019CE  0012               	return		;funcret
  3507  0019D0                     __end_of_read_ds1307:
  3508                           	callstack 0
  3509                           
  3510 ;; *************** function _convertval *****************
  3511 ;; Defined at:
  3512 ;;		line 149 in file "main.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;  val             1    wreg     unsigned char 
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  val             1    9[COMRAM] unsigned char 
  3517 ;;  num             1    8[COMRAM] unsigned char 
  3518 ;;  rem             1    7[COMRAM] unsigned char 
  3519 ;; Return value:  Size  Location     Type
  3520 ;;                  1    wreg      unsigned char 
  3521 ;; Registers used:
  3522 ;;		wreg, status,2, status,0, cstack
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3528 ;;      Params:         0       0       0       0       0       0       0
  3529 ;;      Locals:         3       0       0       0       0       0       0
  3530 ;;      Temps:          0       0       0       0       0       0       0
  3531 ;;      Totals:         3       0       0       0       0       0       0
  3532 ;;Total ram usage:        3 bytes
  3533 ;; Hardware stack levels used: 1
  3534 ;; Hardware stack levels required when called: 1
  3535 ;; This function calls:
  3536 ;;		___lbdiv
  3537 ;;		___lbmod
  3538 ;; This function is called by:
  3539 ;;		_set_time
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543                           	psect	text17
  3544  0019D0                     __ptext17:
  3545                           	callstack 0
  3546  0019D0                     _convertval:
  3547                           	callstack 27
  3548                           
  3549                           ;incstack = 0
  3550                           ;convertval@val stored from wreg
  3551  0019D0  6E0A               	movwf	convertval@val^0,c
  3552                           
  3553                           ;main.c: 151: char rem, num;;main.c: 152: rem = val % 10;
  3554  0019D2  0E0A               	movlw	10
  3555  0019D4  6E04               	movwf	___lbmod@divisor^0,c
  3556  0019D6  500A               	movf	convertval@val^0,w,c
  3557  0019D8  ECFD  F00C         	call	___lbmod
  3558  0019DC  6E08               	movwf	convertval@rem^0,c
  3559                           
  3560                           ;main.c: 153: num = val / 10;
  3561  0019DE  0E0A               	movlw	10
  3562  0019E0  6E04               	movwf	___lbdiv@divisor^0,c
  3563  0019E2  500A               	movf	convertval@val^0,w,c
  3564  0019E4  EC86  F00C         	call	___lbdiv
  3565  0019E8  6E09               	movwf	convertval@num^0,c
  3566                           
  3567                           ;main.c: 154: val = rem;
  3568  0019EA  C008  F00A         	movff	convertval@rem,convertval@val
  3569                           
  3570                           ;main.c: 155: val = num << 4 | val;
  3571  0019EE  3809               	swapf	convertval@num^0,w,c
  3572  0019F0  0BF0               	andlw	240
  3573  0019F2  100A               	iorwf	convertval@val^0,w,c
  3574  0019F4  6E0A               	movwf	convertval@val^0,c
  3575                           
  3576                           ;main.c: 156: return val;
  3577  0019F6  500A               	movf	convertval@val^0,w,c
  3578  0019F8  0012               	return		;funcret
  3579  0019FA                     __end_of_convertval:
  3580                           	callstack 0
  3581                           
  3582 ;; *************** function ___lbmod *****************
  3583 ;; Defined at:
  3584 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lbmod.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;  dividend        1    wreg     unsigned char 
  3587 ;;  divisor         1    3[COMRAM] unsigned char 
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;  dividend        1    4[COMRAM] unsigned char 
  3590 ;;  rem             1    6[COMRAM] unsigned char 
  3591 ;;  counter         1    5[COMRAM] unsigned char 
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  1    wreg      unsigned char 
  3594 ;; Registers used:
  3595 ;;		wreg, status,2, status,0
  3596 ;; Tracked objects:
  3597 ;;		On entry : 0/0
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3601 ;;      Params:         1       0       0       0       0       0       0
  3602 ;;      Locals:         3       0       0       0       0       0       0
  3603 ;;      Temps:          0       0       0       0       0       0       0
  3604 ;;      Totals:         4       0       0       0       0       0       0
  3605 ;;Total ram usage:        4 bytes
  3606 ;; Hardware stack levels used: 1
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_convertval
  3611 ;;		_set_time
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           	psect	text18
  3616  0019FA                     __ptext18:
  3617                           	callstack 0
  3618  0019FA                     ___lbmod:
  3619                           	callstack 27
  3620                           
  3621                           ;incstack = 0
  3622                           ;___lbmod@dividend stored from wreg
  3623  0019FA  6E05               	movwf	___lbmod@dividend^0,c
  3624  0019FC  0E08               	movlw	8
  3625  0019FE  6E06               	movwf	___lbmod@counter^0,c
  3626  001A00  0E00               	movlw	0
  3627  001A02  6E07               	movwf	___lbmod@rem^0,c
  3628  001A04                     l2493:
  3629  001A04  90D8               	bcf	status,0,c
  3630  001A06  3405               	rlcf	___lbmod@dividend^0,w,c
  3631  001A08  3407               	rlcf	___lbmod@rem^0,w,c
  3632  001A0A  6E07               	movwf	___lbmod@rem^0,c
  3633  001A0C  90D8               	bcf	status,0,c
  3634  001A0E  3605               	rlcf	___lbmod@dividend^0,f,c
  3635  001A10  5004               	movf	___lbmod@divisor^0,w,c
  3636  001A12  5C07               	subwf	___lbmod@rem^0,w,c
  3637  001A14  A0D8               	btfss	status,0,c
  3638  001A16  D002               	goto	l2501
  3639  001A18  5004               	movf	___lbmod@divisor^0,w,c
  3640  001A1A  5E07               	subwf	___lbmod@rem^0,f,c
  3641  001A1C                     l2501:
  3642  001A1C  2E06               	decfsz	___lbmod@counter^0,f,c
  3643  001A1E  D7F2               	goto	l2493
  3644  001A20  5007               	movf	___lbmod@rem^0,w,c
  3645  001A22  0012               	return		;funcret
  3646  001A24                     __end_of___lbmod:
  3647                           	callstack 0
  3648                           
  3649 ;; *************** function ___lbdiv *****************
  3650 ;; Defined at:
  3651 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lbdiv.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;  dividend        1    wreg     unsigned char 
  3654 ;;  divisor         1    3[COMRAM] unsigned char 
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;  dividend        1    4[COMRAM] unsigned char 
  3657 ;;  quotient        1    6[COMRAM] unsigned char 
  3658 ;;  counter         1    5[COMRAM] unsigned char 
  3659 ;; Return value:  Size  Location     Type
  3660 ;;                  1    wreg      unsigned char 
  3661 ;; Registers used:
  3662 ;;		wreg, status,2, status,0
  3663 ;; Tracked objects:
  3664 ;;		On entry : 0/0
  3665 ;;		On exit  : 0/0
  3666 ;;		Unchanged: 0/0
  3667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3668 ;;      Params:         1       0       0       0       0       0       0
  3669 ;;      Locals:         3       0       0       0       0       0       0
  3670 ;;      Temps:          0       0       0       0       0       0       0
  3671 ;;      Totals:         4       0       0       0       0       0       0
  3672 ;;Total ram usage:        4 bytes
  3673 ;; Hardware stack levels used: 1
  3674 ;; This function calls:
  3675 ;;		Nothing
  3676 ;; This function is called by:
  3677 ;;		_convertval
  3678 ;;		_set_time
  3679 ;; This function uses a non-reentrant model
  3680 ;;
  3681                           
  3682                           	psect	text19
  3683  00190C                     __ptext19:
  3684                           	callstack 0
  3685  00190C                     ___lbdiv:
  3686                           	callstack 27
  3687                           
  3688                           ;incstack = 0
  3689                           ;___lbdiv@dividend stored from wreg
  3690  00190C  6E05               	movwf	___lbdiv@dividend^0,c
  3691  00190E  0E00               	movlw	0
  3692  001910  6E07               	movwf	___lbdiv@quotient^0,c
  3693  001912  5004               	movf	___lbdiv@divisor^0,w,c
  3694  001914  B4D8               	btfsc	status,2,c
  3695  001916  D015               	goto	l2487
  3696  001918  0E01               	movlw	1
  3697  00191A  6E06               	movwf	___lbdiv@counter^0,c
  3698  00191C  D003               	goto	l2475
  3699  00191E                     l2471:
  3700  00191E  90D8               	bcf	status,0,c
  3701  001920  3604               	rlcf	___lbdiv@divisor^0,f,c
  3702  001922  2A06               	incf	___lbdiv@counter^0,f,c
  3703  001924                     l2475:
  3704  001924  AE04               	btfss	___lbdiv@divisor^0,7,c
  3705  001926  D7FB               	goto	l2471
  3706  001928                     u1540:
  3707  001928  90D8               	bcf	status,0,c
  3708  00192A  3607               	rlcf	___lbdiv@quotient^0,f,c
  3709  00192C  5004               	movf	___lbdiv@divisor^0,w,c
  3710  00192E  5C05               	subwf	___lbdiv@dividend^0,w,c
  3711  001930  A0D8               	btfss	status,0,c
  3712  001932  D003               	goto	l2483
  3713  001934  5004               	movf	___lbdiv@divisor^0,w,c
  3714  001936  5E05               	subwf	___lbdiv@dividend^0,f,c
  3715  001938  8007               	bsf	___lbdiv@quotient^0,0,c
  3716  00193A                     l2483:
  3717  00193A  90D8               	bcf	status,0,c
  3718  00193C  3204               	rrcf	___lbdiv@divisor^0,f,c
  3719  00193E  2E06               	decfsz	___lbdiv@counter^0,f,c
  3720  001940  D7F3               	goto	u1540
  3721  001942                     l2487:
  3722  001942  5007               	movf	___lbdiv@quotient^0,w,c
  3723  001944  0012               	return		;funcret
  3724  001946                     __end_of___lbdiv:
  3725                           	callstack 0
  3726                           
  3727 ;; *************** function _download_log *****************
  3728 ;; Defined at:
  3729 ;;		line 414 in file "main.c"
  3730 ;; Parameters:    Size  Location     Type
  3731 ;;		None
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;  i               2   10[COMRAM] int 
  3734 ;;  key             1    9[COMRAM] unsigned char 
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  1    wreg      void 
  3737 ;; Registers used:
  3738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3744 ;;      Params:         0       0       0       0       0       0       0
  3745 ;;      Locals:         3       0       0       0       0       0       0
  3746 ;;      Temps:          0       0       0       0       0       0       0
  3747 ;;      Totals:         3       0       0       0       0       0       0
  3748 ;;Total ram usage:        3 bytes
  3749 ;; Hardware stack levels used: 1
  3750 ;; Hardware stack levels required when called: 2
  3751 ;; This function calls:
  3752 ;;		___wmul
  3753 ;;		_clcd_print
  3754 ;;		_clcd_write
  3755 ;;		_puts
  3756 ;;		_read_switches
  3757 ;; This function is called by:
  3758 ;;		_display_menu
  3759 ;; This function uses a non-reentrant model
  3760 ;;
  3761                           
  3762                           	psect	text20
  3763  001246                     __ptext20:
  3764                           	callstack 0
  3765  001246                     _download_log:
  3766                           	callstack 27
  3767                           
  3768                           ;main.c: 416: char key;;main.c: 417: clcd_write(0x01, 0);
  3769                           
  3770                           ;incstack = 0
  3771  001246  0E00               	movlw	0
  3772  001248  6E01               	movwf	clcd_write@control_bit^0,c
  3773  00124A  0E01               	movlw	1
  3774  00124C  EC27  F00D         	call	_clcd_write
  3775                           
  3776                           ;main.c: 418: clcd_print("Downloading LOGS" , (0x80 + (0)));
  3777  001250  0E4C               	movlw	low STR_10
  3778  001252  6E07               	movwf	clcd_print@data^0,c
  3779  001254  5007               	movf	clcd_print@data^0,w,c
  3780  001256  A4D8               	btfss	status,2,c
  3781  001258  0E06               	movlw	high __smallconst
  3782  00125A  6E08               	movwf	(clcd_print@data+1)^0,c
  3783  00125C  0E80               	movlw	128
  3784  00125E  6E09               	movwf	clcd_print@addr^0,c
  3785  001260  EC79  F00B         	call	_clcd_print	;wreg free
  3786                           
  3787                           ;main.c: 419: clcd_print("in UART" , (0xC0 + (5)));
  3788  001264  0EBC               	movlw	low STR_11
  3789  001266  6E07               	movwf	clcd_print@data^0,c
  3790  001268  5007               	movf	clcd_print@data^0,w,c
  3791  00126A  A4D8               	btfss	status,2,c
  3792  00126C  0E06               	movlw	high __smallconst
  3793  00126E  6E08               	movwf	(clcd_print@data+1)^0,c
  3794  001270  0EC5               	movlw	197
  3795  001272  6E09               	movwf	clcd_print@addr^0,c
  3796  001274  EC79  F00B         	call	_clcd_print	;wreg free
  3797                           
  3798                           ;main.c: 421: puts("Logs are Downloaded\n\r");
  3799  001278  0E01               	movlw	low STR_12
  3800  00127A  6E07               	movwf	puts@s^0,c
  3801  00127C  5007               	movf	puts@s^0,w,c
  3802  00127E  A4D8               	btfss	status,2,c
  3803  001280  0E06               	movlw	high __smallconst
  3804  001282  6E08               	movwf	(puts@s+1)^0,c
  3805  001284  ECD4  F00B         	call	_puts	;wreg free
  3806                           
  3807                           ;main.c: 422: puts("Logs are : \n\r");
  3808  001288  0E8C               	movlw	low STR_13
  3809  00128A  6E07               	movwf	puts@s^0,c
  3810  00128C  5007               	movf	puts@s^0,w,c
  3811  00128E  A4D8               	btfss	status,2,c
  3812  001290  0E06               	movlw	high __smallconst
  3813  001292  6E08               	movwf	(puts@s+1)^0,c
  3814  001294  ECD4  F00B         	call	_puts	;wreg free
  3815                           
  3816                           ;main.c: 425: for(int i = 0 ; i < 10 ; i++)
  3817  001298  0E00               	movlw	0
  3818  00129A  6E0C               	movwf	(download_log@i+1)^0,c
  3819  00129C  0E00               	movlw	0
  3820  00129E  6E0B               	movwf	download_log@i^0,c
  3821  0012A0                     l2915:
  3822                           
  3823                           ;main.c: 426: {;main.c: 427: puts(event[i]);
  3824  0012A0  C00B  F001         	movff	download_log@i,___wmul@multiplier
  3825  0012A4  C00C  F002         	movff	download_log@i+1,___wmul@multiplier+1
  3826  0012A8  0E00               	movlw	0
  3827  0012AA  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3828  0012AC  0E11               	movlw	17
  3829  0012AE  6E03               	movwf	___wmul@multiplicand^0,c
  3830  0012B0  EC3B  F00D         	call	___wmul	;wreg free
  3831  0012B4  0E00               	movlw	low _event
  3832  0012B6  2401               	addwf	?___wmul^0,w,c
  3833  0012B8  6E07               	movwf	puts@s^0,c
  3834  0012BA  0E01               	movlw	high _event
  3835  0012BC  2002               	addwfc	(?___wmul+1)^0,w,c
  3836  0012BE  6E08               	movwf	(puts@s+1)^0,c
  3837  0012C0  ECD4  F00B         	call	_puts	;wreg free
  3838                           
  3839                           ;main.c: 428: puts("\n\r");
  3840  0012C4  0E97               	movlw	low (STR_13+11)
  3841  0012C6  6E07               	movwf	puts@s^0,c
  3842  0012C8  5007               	movf	puts@s^0,w,c
  3843  0012CA  A4D8               	btfss	status,2,c
  3844  0012CC  0E06               	movlw	high __smallconst
  3845  0012CE  6E08               	movwf	(puts@s+1)^0,c
  3846  0012D0  ECD4  F00B         	call	_puts	;wreg free
  3847  0012D4  4A0B               	infsnz	download_log@i^0,f,c
  3848  0012D6  2A0C               	incf	(download_log@i+1)^0,f,c
  3849  0012D8  BE0C               	btfsc	(download_log@i+1)^0,7,c
  3850  0012DA  D7E2               	goto	l2915
  3851  0012DC  500C               	movf	(download_log@i+1)^0,w,c
  3852  0012DE  E104               	bnz	u2100
  3853  0012E0  0E0A               	movlw	10
  3854  0012E2  5C0B               	subwf	download_log@i^0,w,c
  3855  0012E4  A0D8               	btfss	status,0,c
  3856  0012E6  D7DC               	goto	l2915
  3857  0012E8                     u2100:
  3858                           
  3859                           ;main.c: 433: {;main.c: 434: key = read_switches(1);
  3860  0012E8  0E01               	movlw	1
  3861  0012EA  EC49  F00C         	call	_read_switches
  3862  0012EE  6E0A               	movwf	download_log@key^0,c
  3863                           
  3864                           ;main.c: 436: if(key == 10)
  3865  0012F0  0E0A               	movlw	10
  3866  0012F2  180A               	xorwf	download_log@key^0,w,c
  3867  0012F4  A4D8               	btfss	status,2,c
  3868  0012F6  D7F8               	goto	u2100
  3869                           
  3870                           ;main.c: 437: {;main.c: 438: clcd_write(0x01, 0);
  3871  0012F8  0E00               	movlw	0
  3872  0012FA  6E01               	movwf	clcd_write@control_bit^0,c
  3873  0012FC  0E01               	movlw	1
  3874  0012FE  EC27  F00D         	call	_clcd_write
  3875                           
  3876                           ;main.c: 439: break;
  3877  001302  0012               	return		;funcret
  3878  001304                     __end_of_download_log:
  3879                           	callstack 0
  3880                           
  3881 ;; *************** function _puts *****************
  3882 ;; Defined at:
  3883 ;;		line 90 in file "uart.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  s               2    6[COMRAM] PTR const unsigned char 
  3886 ;;		 -> STR_14(3), STR_13(14), STR_12(22), event(170), 
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;		None
  3889 ;; Return value:  Size  Location     Type
  3890 ;;                  2    6[COMRAM] int 
  3891 ;; Registers used:
  3892 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3893 ;; Tracked objects:
  3894 ;;		On entry : 0/0
  3895 ;;		On exit  : 0/0
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3898 ;;      Params:         2       0       0       0       0       0       0
  3899 ;;      Locals:         0       0       0       0       0       0       0
  3900 ;;      Temps:          0       0       0       0       0       0       0
  3901 ;;      Totals:         2       0       0       0       0       0       0
  3902 ;;Total ram usage:        2 bytes
  3903 ;; Hardware stack levels used: 1
  3904 ;; Hardware stack levels required when called: 1
  3905 ;; This function calls:
  3906 ;;		_putch
  3907 ;; This function is called by:
  3908 ;;		_download_log
  3909 ;; This function uses a non-reentrant model
  3910 ;;
  3911                           
  3912                           	psect	text21
  3913  0017A8                     __ptext21:
  3914                           	callstack 0
  3915  0017A8                     _puts:
  3916                           	callstack 27
  3917                           
  3918                           ;uart.c: 92: while(*s)
  3919                           
  3920                           ;incstack = 0
  3921  0017A8  D014               	goto	l2607
  3922  0017AA                     l2603:
  3923                           
  3924                           ;uart.c: 93: {;uart.c: 94: putch(*s++);
  3925  0017AA  C007  FFF6         	movff	puts@s,tblptrl
  3926  0017AE  C008  FFF7         	movff	puts@s+1,tblptrh
  3927  0017B2  6AF8               	clrf	tblptru,c
  3928  0017B4  0E05               	movlw	(high __ramtop+-1)
  3929  0017B6  64F7               	cpfsgt	tblptrh,c
  3930  0017B8  D003               	bra	u1657
  3931  0017BA  0008               	tblrd		*
  3932  0017BC  50F5               	movf	tablat,w,c
  3933  0017BE  D005               	bra	u1650
  3934  0017C0                     u1657:
  3935  0017C0  CFF6 FFE9          	movff	tblptrl,fsr0l
  3936  0017C4  CFF7 FFEA          	movff	tblptrh,fsr0h
  3937  0017C8  50EF               	movf	indf0,w,c
  3938  0017CA                     u1650:
  3939  0017CA  ECA4  F00D         	call	_putch
  3940  0017CE  4A07               	infsnz	puts@s^0,f,c
  3941  0017D0  2A08               	incf	(puts@s+1)^0,f,c
  3942  0017D2                     l2607:
  3943  0017D2  C007  FFF6         	movff	puts@s,tblptrl
  3944  0017D6  C008  FFF7         	movff	puts@s+1,tblptrh
  3945  0017DA  6AF8               	clrf	tblptru,c
  3946  0017DC  0E05               	movlw	(high __ramtop+-1)
  3947  0017DE  64F7               	cpfsgt	tblptrh,c
  3948  0017E0  D003               	bra	u1667
  3949  0017E2  0008               	tblrd		*
  3950  0017E4  50F5               	movf	tablat,w,c
  3951  0017E6  D005               	bra	u1660
  3952  0017E8                     u1667:
  3953  0017E8  CFF6 FFE9          	movff	tblptrl,fsr0l
  3954  0017EC  CFF7 FFEA          	movff	tblptrh,fsr0h
  3955  0017F0  50EF               	movf	indf0,w,c
  3956  0017F2                     u1660:
  3957  0017F2  0900               	iorlw	0
  3958  0017F4  B4D8               	btfsc	status,2,c
  3959  0017F6  0012               	return	
  3960  0017F8  D7D8               	goto	l2603
  3961  0017FA                     __end_of_puts:
  3962                           	callstack 0
  3963                           
  3964 ;; *************** function _putch *****************
  3965 ;; Defined at:
  3966 ;;		line 79 in file "uart.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;  byte            1    wreg     unsigned char 
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;  byte            1    0[COMRAM] unsigned char 
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  1    wreg      void 
  3973 ;; Registers used:
  3974 ;;		wreg
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3980 ;;      Params:         0       0       0       0       0       0       0
  3981 ;;      Locals:         1       0       0       0       0       0       0
  3982 ;;      Temps:          0       0       0       0       0       0       0
  3983 ;;      Totals:         1       0       0       0       0       0       0
  3984 ;;Total ram usage:        1 bytes
  3985 ;; Hardware stack levels used: 1
  3986 ;; This function calls:
  3987 ;;		Nothing
  3988 ;; This function is called by:
  3989 ;;		_puts
  3990 ;; This function uses a non-reentrant model
  3991 ;;
  3992                           
  3993                           	psect	text22
  3994  001B48                     __ptext22:
  3995                           	callstack 0
  3996  001B48                     _putch:
  3997                           	callstack 27
  3998                           
  3999                           ;incstack = 0
  4000                           ;putch@byte stored from wreg
  4001  001B48  6E01               	movwf	putch@byte^0,c
  4002  001B4A                     
  4003                           ;uart.c: 83: while(!TXIF)
  4004  001B4A  A89E               	btfss	3998,4,c	;volatile
  4005  001B4C  D7FE               	goto	l2461
  4006                           
  4007                           ;uart.c: 86: };uart.c: 87: TXREG = byte;
  4008  001B4E  C001  FFAD         	movff	putch@byte,4013	;volatile
  4009  001B52  0012               	return		;funcret
  4010  001B54                     __end_of_putch:
  4011                           	callstack 0
  4012                           
  4013 ;; *************** function _clear_log *****************
  4014 ;; Defined at:
  4015 ;;		line 382 in file "main.c"
  4016 ;; Parameters:    Size  Location     Type
  4017 ;;		None
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;  j               2   14[COMRAM] int 
  4020 ;;  i               2   12[COMRAM] int 
  4021 ;;  clr             1   11[COMRAM] unsigned char 
  4022 ;; Return value:  Size  Location     Type
  4023 ;;                  1    wreg      void 
  4024 ;; Registers used:
  4025 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4026 ;; Tracked objects:
  4027 ;;		On entry : 0/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4031 ;;      Params:         0       0       0       0       0       0       0
  4032 ;;      Locals:         5       0       0       0       0       0       0
  4033 ;;      Temps:          2       0       0       0       0       0       0
  4034 ;;      Totals:         7       0       0       0       0       0       0
  4035 ;;Total ram usage:        7 bytes
  4036 ;; Hardware stack levels used: 1
  4037 ;; Hardware stack levels required when called: 2
  4038 ;; This function calls:
  4039 ;;		___wmul
  4040 ;;		_clcd_print
  4041 ;;		_clcd_write
  4042 ;;		_read_switches
  4043 ;; This function is called by:
  4044 ;;		_display_menu
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           	psect	text23
  4049  001304                     __ptext23:
  4050                           	callstack 0
  4051  001304                     _clear_log:
  4052                           	callstack 27
  4053                           
  4054                           ;main.c: 384: unsigned char clr;;main.c: 385: int i , j;;main.c: 388: for(i = 0 ; i < 10
      +                           ; i++)
  4055                           
  4056                           ;incstack = 0
  4057  001304  0E00               	movlw	0
  4058  001306  6E0E               	movwf	(clear_log@i+1)^0,c
  4059  001308  0E00               	movlw	0
  4060  00130A  6E0D               	movwf	clear_log@i^0,c
  4061  00130C                     l2873:
  4062                           
  4063                           ;main.c: 389: {;main.c: 390: for(j = 0 ; j < 18 ; j++)
  4064  00130C  0E00               	movlw	0
  4065  00130E  6E10               	movwf	(clear_log@j+1)^0,c
  4066  001310  0E00               	movlw	0
  4067  001312  6E0F               	movwf	clear_log@j^0,c
  4068  001314                     l2879:
  4069                           
  4070                           ;main.c: 391: {;main.c: 392: event[i][j] = 0;
  4071  001314  C00D  F001         	movff	clear_log@i,___wmul@multiplier
  4072  001318  C00E  F002         	movff	clear_log@i+1,___wmul@multiplier+1
  4073  00131C  0E00               	movlw	0
  4074  00131E  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4075  001320  0E11               	movlw	17
  4076  001322  6E03               	movwf	___wmul@multiplicand^0,c
  4077  001324  EC3B  F00D         	call	___wmul	;wreg free
  4078  001328  0E00               	movlw	low _event
  4079  00132A  6E0A               	movwf	??_clear_log^0,c
  4080  00132C  0E01               	movlw	high _event
  4081  00132E  6E0B               	movwf	(??_clear_log+1)^0,c
  4082  001330  5001               	movf	?___wmul^0,w,c
  4083  001332  260A               	addwf	??_clear_log^0,f,c
  4084  001334  5002               	movf	(?___wmul+1)^0,w,c
  4085  001336  220B               	addwfc	(??_clear_log+1)^0,f,c
  4086  001338  500F               	movf	clear_log@j^0,w,c
  4087  00133A  240A               	addwf	??_clear_log^0,w,c
  4088  00133C  6ED9               	movwf	fsr2l,c
  4089  00133E  5010               	movf	(clear_log@j+1)^0,w,c
  4090  001340  200B               	addwfc	(??_clear_log+1)^0,w,c
  4091  001342  6EDA               	movwf	fsr2h,c
  4092  001344  0E00               	movlw	0
  4093  001346  6EDF               	movwf	indf2,c
  4094  001348  4A0F               	infsnz	clear_log@j^0,f,c
  4095  00134A  2A10               	incf	(clear_log@j+1)^0,f,c
  4096  00134C  BE10               	btfsc	(clear_log@j+1)^0,7,c
  4097  00134E  D7E2               	goto	l2879
  4098  001350  5010               	movf	(clear_log@j+1)^0,w,c
  4099  001352  E104               	bnz	u2070
  4100  001354  0E12               	movlw	18
  4101  001356  5C0F               	subwf	clear_log@j^0,w,c
  4102  001358  A0D8               	btfss	status,0,c
  4103  00135A  D7DC               	goto	l2879
  4104  00135C                     u2070:
  4105  00135C  4A0D               	infsnz	clear_log@i^0,f,c
  4106  00135E  2A0E               	incf	(clear_log@i+1)^0,f,c
  4107  001360  BE0E               	btfsc	(clear_log@i+1)^0,7,c
  4108  001362  D7D4               	goto	l2873
  4109  001364  500E               	movf	(clear_log@i+1)^0,w,c
  4110  001366  E104               	bnz	u2080
  4111  001368  0E0A               	movlw	10
  4112  00136A  5C0D               	subwf	clear_log@i^0,w,c
  4113  00136C  A0D8               	btfss	status,0,c
  4114  00136E  D7CE               	goto	l2873
  4115  001370                     u2080:
  4116                           
  4117                           ;main.c: 393: };main.c: 394: };main.c: 396: clcd_write(0x01, 0);
  4118  001370  0E00               	movlw	0
  4119  001372  6E01               	movwf	clcd_write@control_bit^0,c
  4120  001374  0E01               	movlw	1
  4121  001376  EC27  F00D         	call	_clcd_write
  4122                           
  4123                           ;main.c: 397: clcd_print("LOG_CLEARED" , (0x80 + (2)));
  4124  00137A  0EA7               	movlw	low STR_9
  4125  00137C  6E07               	movwf	clcd_print@data^0,c
  4126  00137E  5007               	movf	clcd_print@data^0,w,c
  4127  001380  A4D8               	btfss	status,2,c
  4128  001382  0E06               	movlw	high __smallconst
  4129  001384  6E08               	movwf	(clcd_print@data+1)^0,c
  4130  001386  0E82               	movlw	130
  4131  001388  6E09               	movwf	clcd_print@addr^0,c
  4132  00138A  EC79  F00B         	call	_clcd_print	;wreg free
  4133  00138E                     l2893:
  4134                           
  4135                           ;main.c: 399: {;main.c: 400: clr = read_switches(1);
  4136  00138E  0E01               	movlw	1
  4137  001390  EC49  F00C         	call	_read_switches
  4138  001394  6E0C               	movwf	clear_log@clr^0,c
  4139                           
  4140                           ;main.c: 403: if(clr == 10)
  4141  001396  0E0A               	movlw	10
  4142  001398  180C               	xorwf	clear_log@clr^0,w,c
  4143  00139A  A4D8               	btfss	status,2,c
  4144  00139C  D7F8               	goto	l2893
  4145                           
  4146                           ;main.c: 404: {;main.c: 405: clcd_write(0x01, 0);
  4147  00139E  0E00               	movlw	0
  4148  0013A0  6E01               	movwf	clcd_write@control_bit^0,c
  4149  0013A2  0E01               	movlw	1
  4150  0013A4  EC27  F00D         	call	_clcd_write
  4151                           
  4152                           ;main.c: 406: break;
  4153  0013A8  0012               	return		;funcret
  4154  0013AA                     __end_of_clear_log:
  4155                           	callstack 0
  4156                           
  4157 ;; *************** function _change_password *****************
  4158 ;; Defined at:
  4159 ;;		line 276 in file "main.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;		None
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;  change          2   12[COMRAM] int 
  4164 ;;  j               2    9[COMRAM] int 
  4165 ;;  pwd_key         1   11[COMRAM] unsigned char 
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  1    wreg      void 
  4168 ;; Registers used:
  4169 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4175 ;;      Params:         0       0       0       0       0       0       0
  4176 ;;      Locals:         5       0       0       0       0       0       0
  4177 ;;      Temps:          0       0       0       0       0       0       0
  4178 ;;      Totals:         5       0       0       0       0       0       0
  4179 ;;Total ram usage:        5 bytes
  4180 ;; Hardware stack levels used: 1
  4181 ;; Hardware stack levels required when called: 4
  4182 ;; This function calls:
  4183 ;;		_clcd_print
  4184 ;;		_clcd_putch
  4185 ;;		_clcd_write
  4186 ;;		_read_external_eeprom
  4187 ;;		_read_switches
  4188 ;;		_write_external_eeprom
  4189 ;; This function is called by:
  4190 ;;		_display_menu
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text24
  4195  000F96                     __ptext24:
  4196                           	callstack 0
  4197  000F96                     _change_password:
  4198                           	callstack 25
  4199                           
  4200                           ;main.c: 278: unsigned char pwd_key;;main.c: 279: int change = 0 , j = 0;
  4201                           
  4202                           ;incstack = 0
  4203  000F96  0E00               	movlw	0
  4204  000F98  6E0E               	movwf	(change_password@change+1)^0,c
  4205  000F9A  0E00               	movlw	0
  4206  000F9C  6E0D               	movwf	change_password@change^0,c
  4207  000F9E  0E00               	movlw	0
  4208  000FA0  6E0B               	movwf	(change_password@j+1)^0,c
  4209  000FA2  0E00               	movlw	0
  4210  000FA4  6E0A               	movwf	change_password@j^0,c
  4211                           
  4212                           ;main.c: 280: clcd_write(0x01, 0);
  4213  000FA6  0E00               	movlw	0
  4214  000FA8  6E01               	movwf	clcd_write@control_bit^0,c
  4215  000FAA  0E01               	movlw	1
  4216  000FAC  EC27  F00D         	call	_clcd_write
  4217                           
  4218                           ;main.c: 281: clcd_print("Enter Password  ",(0x80 + (0)));
  4219  000FB0  0E3B               	movlw	low STR_6
  4220  000FB2  6E07               	movwf	clcd_print@data^0,c
  4221  000FB4  5007               	movf	clcd_print@data^0,w,c
  4222  000FB6  A4D8               	btfss	status,2,c
  4223  000FB8  0E06               	movlw	high __smallconst
  4224  000FBA  6E08               	movwf	(clcd_print@data+1)^0,c
  4225  000FBC  0E80               	movlw	128
  4226  000FBE  6E09               	movwf	clcd_print@addr^0,c
  4227  000FC0  EC79  F00B         	call	_clcd_print	;wreg free
  4228  000FC4                     l2769:
  4229                           
  4230                           ;main.c: 284: {;main.c: 285: pwd_key = read_switches(1);
  4231  000FC4  0E01               	movlw	1
  4232  000FC6  EC49  F00C         	call	_read_switches
  4233  000FCA  6E0C               	movwf	change_password@pwd_key^0,c
  4234                           
  4235                           ;main.c: 287: if( change < 4)
  4236  000FCC  BE0E               	btfsc	(change_password@change+1)^0,7,c
  4237  000FCE  D006               	goto	u1890
  4238  000FD0  500E               	movf	(change_password@change+1)^0,w,c
  4239  000FD2  E16A               	bnz	l2821
  4240  000FD4  0E04               	movlw	4
  4241  000FD6  5C0D               	subwf	change_password@change^0,w,c
  4242  000FD8  B0D8               	btfsc	status,0,c
  4243  000FDA  D066               	goto	l2821
  4244  000FDC                     u1890:
  4245                           
  4246                           ;main.c: 288: {;main.c: 290: if(pwd_key == 11)
  4247  000FDC  0E0B               	movlw	11
  4248  000FDE  180C               	xorwf	change_password@pwd_key^0,w,c
  4249  000FE0  A4D8               	btfss	status,2,c
  4250  000FE2  D031               	goto	l2797
  4251                           
  4252                           ;main.c: 291: {;main.c: 292: if(change == 0)
  4253  000FE4  500D               	movf	change_password@change^0,w,c
  4254  000FE6  100E               	iorwf	(change_password@change+1)^0,w,c
  4255  000FE8  A4D8               	btfss	status,2,c
  4256  000FEA  D005               	goto	l2779
  4257                           
  4258                           ;main.c: 293: write_external_eeprom(0x00,'1');
  4259  000FEC  0E31               	movlw	49
  4260  000FEE  6E02               	movwf	write_external_eeprom@data^0,c
  4261  000FF0  0E00               	movlw	0
  4262  000FF2  EC6D  F00D         	call	_write_external_eeprom
  4263  000FF6                     l2779:
  4264                           
  4265                           ;main.c: 294: if( change == 1)
  4266  000FF6  040D               	decf	change_password@change^0,w,c
  4267  000FF8  100E               	iorwf	(change_password@change+1)^0,w,c
  4268  000FFA  A4D8               	btfss	status,2,c
  4269  000FFC  D005               	goto	l2783
  4270                           
  4271                           ;main.c: 295: write_external_eeprom(0x01,'1');
  4272  000FFE  0E31               	movlw	49
  4273  001000  6E02               	movwf	write_external_eeprom@data^0,c
  4274  001002  0E01               	movlw	1
  4275  001004  EC6D  F00D         	call	_write_external_eeprom
  4276  001008                     l2783:
  4277                           
  4278                           ;main.c: 296: if(change == 2)
  4279  001008  0E02               	movlw	2
  4280  00100A  180D               	xorwf	change_password@change^0,w,c
  4281  00100C  100E               	iorwf	(change_password@change+1)^0,w,c
  4282  00100E  A4D8               	btfss	status,2,c
  4283  001010  D005               	goto	l2787
  4284                           
  4285                           ;main.c: 297: write_external_eeprom(0x02,'1');
  4286  001012  0E31               	movlw	49
  4287  001014  6E02               	movwf	write_external_eeprom@data^0,c
  4288  001016  0E02               	movlw	2
  4289  001018  EC6D  F00D         	call	_write_external_eeprom
  4290  00101C                     l2787:
  4291                           
  4292                           ;main.c: 298: if(change == 3)
  4293  00101C  0E03               	movlw	3
  4294  00101E  180D               	xorwf	change_password@change^0,w,c
  4295  001020  100E               	iorwf	(change_password@change+1)^0,w,c
  4296  001022  A4D8               	btfss	status,2,c
  4297  001024  D005               	goto	l2791
  4298                           
  4299                           ;main.c: 299: write_external_eeprom(0x03,'1');
  4300  001026  0E31               	movlw	49
  4301  001028  6E02               	movwf	write_external_eeprom@data^0,c
  4302  00102A  0E03               	movlw	3
  4303  00102C  EC6D  F00D         	call	_write_external_eeprom
  4304  001030                     l2791:
  4305                           
  4306                           ;main.c: 300: clcd_putch('*' , (0xC0 + (j++)));
  4307  001030  500A               	movf	change_password@j^0,w,c
  4308  001032  0FC0               	addlw	192
  4309  001034  6E08               	movwf	clcd_putch@addr^0,c
  4310  001036  0E2A               	movlw	42
  4311  001038  EC7C  F00D         	call	_clcd_putch
  4312  00103C                     l2793:
  4313  00103C  4A0A               	infsnz	change_password@j^0,f,c
  4314  00103E  2A0B               	incf	(change_password@j+1)^0,f,c
  4315                           
  4316                           ;main.c: 301: change++;
  4317  001040  4A0D               	infsnz	change_password@change^0,f,c
  4318  001042  2A0E               	incf	(change_password@change+1)^0,f,c
  4319                           
  4320                           ;main.c: 302: }
  4321  001044  D031               	goto	l2821
  4322  001046                     l2797:
  4323                           
  4324                           ;main.c: 305: else if(pwd_key == 12)
  4325  001046  0E0C               	movlw	12
  4326  001048  180C               	xorwf	change_password@pwd_key^0,w,c
  4327  00104A  A4D8               	btfss	status,2,c
  4328  00104C  D02D               	goto	l2821
  4329                           
  4330                           ;main.c: 306: {;main.c: 307: if(change == 0)
  4331  00104E  500D               	movf	change_password@change^0,w,c
  4332  001050  100E               	iorwf	(change_password@change+1)^0,w,c
  4333  001052  A4D8               	btfss	status,2,c
  4334  001054  D005               	goto	l2803
  4335                           
  4336                           ;main.c: 308: write_external_eeprom(0x00,'0');
  4337  001056  0E30               	movlw	48
  4338  001058  6E02               	movwf	write_external_eeprom@data^0,c
  4339  00105A  0E00               	movlw	0
  4340  00105C  EC6D  F00D         	call	_write_external_eeprom
  4341  001060                     l2803:
  4342                           
  4343                           ;main.c: 309: if( change == 1)
  4344  001060  040D               	decf	change_password@change^0,w,c
  4345  001062  100E               	iorwf	(change_password@change+1)^0,w,c
  4346  001064  A4D8               	btfss	status,2,c
  4347  001066  D005               	goto	l2807
  4348                           
  4349                           ;main.c: 310: write_external_eeprom(0x01,'0');
  4350  001068  0E30               	movlw	48
  4351  00106A  6E02               	movwf	write_external_eeprom@data^0,c
  4352  00106C  0E01               	movlw	1
  4353  00106E  EC6D  F00D         	call	_write_external_eeprom
  4354  001072                     l2807:
  4355                           
  4356                           ;main.c: 311: if( change== 2)
  4357  001072  0E02               	movlw	2
  4358  001074  180D               	xorwf	change_password@change^0,w,c
  4359  001076  100E               	iorwf	(change_password@change+1)^0,w,c
  4360  001078  A4D8               	btfss	status,2,c
  4361  00107A  D005               	goto	l2811
  4362                           
  4363                           ;main.c: 312: write_external_eeprom(0x02,'0');
  4364  00107C  0E30               	movlw	48
  4365  00107E  6E02               	movwf	write_external_eeprom@data^0,c
  4366  001080  0E02               	movlw	2
  4367  001082  EC6D  F00D         	call	_write_external_eeprom
  4368  001086                     l2811:
  4369                           
  4370                           ;main.c: 313: if( change== 3)
  4371  001086  0E03               	movlw	3
  4372  001088  180D               	xorwf	change_password@change^0,w,c
  4373  00108A  100E               	iorwf	(change_password@change+1)^0,w,c
  4374  00108C  A4D8               	btfss	status,2,c
  4375  00108E  D005               	goto	l2815
  4376                           
  4377                           ;main.c: 314: write_external_eeprom(0x03,'0');
  4378  001090  0E30               	movlw	48
  4379  001092  6E02               	movwf	write_external_eeprom@data^0,c
  4380  001094  0E03               	movlw	3
  4381  001096  EC6D  F00D         	call	_write_external_eeprom
  4382  00109A                     l2815:
  4383                           
  4384                           ;main.c: 315: clcd_putch('*' , (0xC0 + (j++)));
  4385  00109A  500A               	movf	change_password@j^0,w,c
  4386  00109C  0FC0               	addlw	192
  4387  00109E  6E08               	movwf	clcd_putch@addr^0,c
  4388  0010A0  0E2A               	movlw	42
  4389  0010A2  EC7C  F00D         	call	_clcd_putch
  4390  0010A6  D7CA               	goto	l2793
  4391  0010A8                     l2821:
  4392                           
  4393                           ;main.c: 317: };main.c: 318: };main.c: 321: if(change == 4)
  4394  0010A8  0E04               	movlw	4
  4395  0010AA  180D               	xorwf	change_password@change^0,w,c
  4396  0010AC  100E               	iorwf	(change_password@change+1)^0,w,c
  4397  0010AE  A4D8               	btfss	status,2,c
  4398  0010B0  D01C               	goto	l2835
  4399                           
  4400                           ;main.c: 322: {;main.c: 323: clcd_print("Password is set  ",(0xC0 + (0)));
  4401  0010B2  0E17               	movlw	low STR_7
  4402  0010B4  6E07               	movwf	clcd_print@data^0,c
  4403  0010B6  5007               	movf	clcd_print@data^0,w,c
  4404  0010B8  A4D8               	btfss	status,2,c
  4405  0010BA  0E06               	movlw	high __smallconst
  4406  0010BC  6E08               	movwf	(clcd_print@data+1)^0,c
  4407  0010BE  0EC0               	movlw	192
  4408  0010C0  6E09               	movwf	clcd_print@addr^0,c
  4409  0010C2  EC79  F00B         	call	_clcd_print	;wreg free
  4410                           
  4411                           ;main.c: 324: str_user[0] = read_external_eeprom(0x00);
  4412  0010C6  0E00               	movlw	0
  4413  0010C8  EC12  F00D         	call	_read_external_eeprom
  4414  0010CC  6E47               	movwf	_str_user^0,c
  4415                           
  4416                           ;main.c: 325: str_user[1] = read_external_eeprom(0x01);
  4417  0010CE  0E01               	movlw	1
  4418  0010D0  EC12  F00D         	call	_read_external_eeprom
  4419  0010D4  6E48               	movwf	(_str_user+1)^0,c
  4420                           
  4421                           ;main.c: 326: str_user[2] = read_external_eeprom(0x02);
  4422  0010D6  0E02               	movlw	2
  4423  0010D8  EC12  F00D         	call	_read_external_eeprom
  4424  0010DC  6E49               	movwf	(_str_user+2)^0,c
  4425                           
  4426                           ;main.c: 327: str_user[3] = read_external_eeprom(0x03);
  4427  0010DE  0E03               	movlw	3
  4428  0010E0  EC12  F00D         	call	_read_external_eeprom
  4429  0010E4  6E4A               	movwf	(_str_user+3)^0,c
  4430                           
  4431                           ;main.c: 328: str_user[4] = '\0';
  4432  0010E6  0E00               	movlw	0
  4433  0010E8  6E4B               	movwf	(_str_user+4)^0,c
  4434  0010EA                     l2835:
  4435                           
  4436                           ;main.c: 329: };main.c: 332: if(pwd_key == 10)
  4437  0010EA  0E0A               	movlw	10
  4438  0010EC  180C               	xorwf	change_password@pwd_key^0,w,c
  4439  0010EE  A4D8               	btfss	status,2,c
  4440  0010F0  D769               	goto	l2769
  4441                           
  4442                           ;main.c: 333: {;main.c: 334: clcd_write(0x01, 0);
  4443  0010F2  0E00               	movlw	0
  4444  0010F4  6E01               	movwf	clcd_write@control_bit^0,c
  4445  0010F6  0E01               	movlw	1
  4446  0010F8  EC27  F00D         	call	_clcd_write
  4447                           
  4448                           ;main.c: 335: break;
  4449  0010FC  0012               	return		;funcret
  4450  0010FE                     __end_of_change_password:
  4451                           	callstack 0
  4452                           
  4453 ;; *************** function _write_external_eeprom *****************
  4454 ;; Defined at:
  4455 ;;		line 5 in file "external_eeprom.c"
  4456 ;; Parameters:    Size  Location     Type
  4457 ;;  address         1    wreg     unsigned char 
  4458 ;;  data            1    1[COMRAM] unsigned char 
  4459 ;; Auto vars:     Size  Location     Type
  4460 ;;  address         1    2[COMRAM] unsigned char 
  4461 ;; Return value:  Size  Location     Type
  4462 ;;                  1    wreg      void 
  4463 ;; Registers used:
  4464 ;;		wreg, status,2, cstack
  4465 ;; Tracked objects:
  4466 ;;		On entry : 0/0
  4467 ;;		On exit  : 0/0
  4468 ;;		Unchanged: 0/0
  4469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4470 ;;      Params:         1       0       0       0       0       0       0
  4471 ;;      Locals:         1       0       0       0       0       0       0
  4472 ;;      Temps:          0       0       0       0       0       0       0
  4473 ;;      Totals:         2       0       0       0       0       0       0
  4474 ;;Total ram usage:        2 bytes
  4475 ;; Hardware stack levels used: 1
  4476 ;; Hardware stack levels required when called: 2
  4477 ;; This function calls:
  4478 ;;		_i2c_start
  4479 ;;		_i2c_stop
  4480 ;;		_i2c_write
  4481 ;; This function is called by:
  4482 ;;		_change_password
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           	psect	text25
  4487  001ADA                     __ptext25:
  4488                           	callstack 0
  4489  001ADA                     _write_external_eeprom:
  4490                           	callstack 26
  4491                           
  4492                           ;incstack = 0
  4493                           ;write_external_eeprom@address stored from wreg
  4494  001ADA  6E03               	movwf	write_external_eeprom@address^0,c
  4495                           
  4496                           ;external_eeprom.c: 7: i2c_start();
  4497  001ADC  ECBE  F00D         	call	_i2c_start	;wreg free
  4498                           
  4499                           ;external_eeprom.c: 8: i2c_write(0xA0);
  4500  001AE0  0EA0               	movlw	160
  4501  001AE2  ECAA  F00D         	call	_i2c_write
  4502                           
  4503                           ;external_eeprom.c: 9: i2c_write(address);
  4504  001AE6  5003               	movf	write_external_eeprom@address^0,w,c
  4505  001AE8  ECAA  F00D         	call	_i2c_write
  4506                           
  4507                           ;external_eeprom.c: 10: i2c_write(data);
  4508  001AEC  5002               	movf	write_external_eeprom@data^0,w,c
  4509  001AEE  ECAA  F00D         	call	_i2c_write
  4510                           
  4511                           ;external_eeprom.c: 11: i2c_stop();
  4512  001AF2  ECBA  F00D         	call	_i2c_stop	;wreg free
  4513  001AF6  0012               	return		;funcret
  4514  001AF8                     __end_of_write_external_eeprom:
  4515                           	callstack 0
  4516                           
  4517 ;; *************** function _read_switches *****************
  4518 ;; Defined at:
  4519 ;;		line 88 in file "matrix_keypad.c"
  4520 ;; Parameters:    Size  Location     Type
  4521 ;;  detection_ty    1    wreg     unsigned char 
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;  detection_ty    1    0[COMRAM] unsigned char 
  4524 ;; Return value:  Size  Location     Type
  4525 ;;                  1    wreg      unsigned char 
  4526 ;; Registers used:
  4527 ;;		wreg, status,2, status,0, cstack
  4528 ;; Tracked objects:
  4529 ;;		On entry : 0/0
  4530 ;;		On exit  : 0/0
  4531 ;;		Unchanged: 0/0
  4532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4533 ;;      Params:         0       0       0       0       0       0       0
  4534 ;;      Locals:         1       0       0       0       0       0       0
  4535 ;;      Temps:          0       0       0       0       0       0       0
  4536 ;;      Totals:         1       0       0       0       0       0       0
  4537 ;;Total ram usage:        1 bytes
  4538 ;; Hardware stack levels used: 1
  4539 ;; Hardware stack levels required when called: 1
  4540 ;; This function calls:
  4541 ;;		_scan_key
  4542 ;; This function is called by:
  4543 ;;		_password
  4544 ;;		_set_time
  4545 ;;		_change_password
  4546 ;;		_view_log
  4547 ;;		_clear_log
  4548 ;;		_download_log
  4549 ;;		_display_menu
  4550 ;;		_main
  4551 ;; This function uses a non-reentrant model
  4552 ;;
  4553                           
  4554                           	psect	text26
  4555  001892                     __ptext26:
  4556                           	callstack 0
  4557  001892                     _read_switches:
  4558                           	callstack 29
  4559                           
  4560                           ;incstack = 0
  4561                           ;read_switches@detection_type stored from wreg
  4562  001892  6E01               	movwf	read_switches@detection_type^0,c
  4563                           
  4564                           ;matrix_keypad.c: 90: static unsigned char once = 1;;matrix_keypad.c: 91: static unsigne
      +                          d char key;;matrix_keypad.c: 92: key = scan_key();
  4565  001894  EC67  F00A         	call	_scan_key	;wreg free
  4566  001898  6E36               	movwf	read_switches@key^0,c
  4567                           
  4568                           ;matrix_keypad.c: 94: if (detection_type == 1)
  4569  00189A  0401               	decf	read_switches@detection_type^0,w,c
  4570  00189C  A4D8               	btfss	status,2,c
  4571  00189E  D010               	goto	l2547
  4572                           
  4573                           ;matrix_keypad.c: 95: {;matrix_keypad.c: 96: if(key != 0xFF && once)
  4574  0018A0  2836               	incf	read_switches@key^0,w,c
  4575  0018A2  B4D8               	btfsc	status,2,c
  4576  0018A4  D007               	goto	l2543
  4577  0018A6  5046               	movf	read_switches@once^0,w,c
  4578  0018A8  B4D8               	btfsc	status,2,c
  4579  0018AA  D004               	goto	l2543
  4580                           
  4581                           ;matrix_keypad.c: 97: {;matrix_keypad.c: 98: once = 0;
  4582  0018AC  0E00               	movlw	0
  4583  0018AE  6E46               	movwf	read_switches@once^0,c
  4584                           
  4585                           ;matrix_keypad.c: 99: return key;
  4586  0018B0  5036               	movf	read_switches@key^0,w,c
  4587  0018B2  0012               	return	
  4588  0018B4                     l2543:
  4589                           
  4590                           ;matrix_keypad.c: 100: };matrix_keypad.c: 101: if(key == 0xFF)
  4591  0018B4  2836               	incf	read_switches@key^0,w,c
  4592  0018B6  A4D8               	btfss	status,2,c
  4593  0018B8  D009               	goto	l2553
  4594                           
  4595                           ;matrix_keypad.c: 102: once = 1;
  4596  0018BA  0E01               	movlw	1
  4597  0018BC  6E46               	movwf	read_switches@once^0,c
  4598  0018BE  D006               	goto	l2553
  4599  0018C0                     l2547:
  4600                           
  4601                           ;matrix_keypad.c: 104: else if (detection_type == 0)
  4602  0018C0  5001               	movf	read_switches@detection_type^0,w,c
  4603  0018C2  A4D8               	btfss	status,2,c
  4604  0018C4  D003               	goto	l2553
  4605                           
  4606                           ;matrix_keypad.c: 105: {;matrix_keypad.c: 106: return scan_key();
  4607  0018C6  EC67  F00A         	call	_scan_key	;wreg free
  4608  0018CA  0012               	return	
  4609  0018CC                     l2553:
  4610                           
  4611                           ;matrix_keypad.c: 107: };matrix_keypad.c: 109: return 0xFF;
  4612  0018CC  0EFF               	movlw	255
  4613  0018CE  0012               	return		;funcret
  4614  0018D0                     __end_of_read_switches:
  4615                           	callstack 0
  4616                           
  4617 ;; *************** function _scan_key *****************
  4618 ;; Defined at:
  4619 ;;		line 18 in file "matrix_keypad.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;		None
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;		None
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  1    wreg      unsigned char 
  4626 ;; Registers used:
  4627 ;;		wreg
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4633 ;;      Params:         0       0       0       0       0       0       0
  4634 ;;      Locals:         0       0       0       0       0       0       0
  4635 ;;      Temps:          0       0       0       0       0       0       0
  4636 ;;      Totals:         0       0       0       0       0       0       0
  4637 ;;Total ram usage:        0 bytes
  4638 ;; Hardware stack levels used: 1
  4639 ;; This function calls:
  4640 ;;		Nothing
  4641 ;; This function is called by:
  4642 ;;		_read_switches
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           	psect	text27
  4647  0014CE                     __ptext27:
  4648                           	callstack 0
  4649  0014CE                     _scan_key:
  4650                           	callstack 29
  4651                           
  4652                           ;matrix_keypad.c: 20: RB5 = 0;
  4653                           
  4654                           ;incstack = 0
  4655  0014CE  9A81               	bcf	3969,5,c	;volatile
  4656                           
  4657                           ;matrix_keypad.c: 21: RB6 = 1;
  4658  0014D0  8C81               	bsf	3969,6,c	;volatile
  4659                           
  4660                           ;matrix_keypad.c: 22: RB7 = 1;
  4661  0014D2  8E81               	bsf	3969,7,c	;volatile
  4662                           
  4663                           ;matrix_keypad.c: 24: if (RB1 == 0)
  4664  0014D4  B281               	btfsc	3969,1,c	;volatile
  4665  0014D6  D002               	goto	l389
  4666                           
  4667                           ;matrix_keypad.c: 25: {;matrix_keypad.c: 26: return 1;
  4668  0014D8  0E01               	movlw	1
  4669  0014DA  0012               	return	
  4670  0014DC                     l389:
  4671                           
  4672                           ;matrix_keypad.c: 28: else if (RB2 == 0)
  4673  0014DC  B481               	btfsc	3969,2,c	;volatile
  4674  0014DE  D002               	goto	l392
  4675                           
  4676                           ;matrix_keypad.c: 29: {;matrix_keypad.c: 30: return 4;
  4677  0014E0  0E04               	movlw	4
  4678  0014E2  0012               	return	
  4679  0014E4                     l392:
  4680                           
  4681                           ;matrix_keypad.c: 32: else if (RB3 == 0)
  4682  0014E4  B681               	btfsc	3969,3,c	;volatile
  4683  0014E6  D002               	goto	l394
  4684                           
  4685                           ;matrix_keypad.c: 33: {;matrix_keypad.c: 34: return 7;
  4686  0014E8  0E07               	movlw	7
  4687  0014EA  0012               	return	
  4688  0014EC                     l394:
  4689                           
  4690                           ;matrix_keypad.c: 36: else if (RB4 == 0)
  4691  0014EC  B881               	btfsc	3969,4,c	;volatile
  4692  0014EE  D002               	goto	l391
  4693                           
  4694                           ;matrix_keypad.c: 37: {;matrix_keypad.c: 38: return 10;
  4695  0014F0  0E0A               	movlw	10
  4696  0014F2  0012               	return	
  4697  0014F4                     l391:
  4698                           
  4699                           ;matrix_keypad.c: 39: };matrix_keypad.c: 41: RB5 = 1;
  4700  0014F4  8A81               	bsf	3969,5,c	;volatile
  4701                           
  4702                           ;matrix_keypad.c: 42: RB6 = 0;
  4703  0014F6  9C81               	bcf	3969,6,c	;volatile
  4704                           
  4705                           ;matrix_keypad.c: 43: RB7 = 1;
  4706  0014F8  8E81               	bsf	3969,7,c	;volatile
  4707                           
  4708                           ;matrix_keypad.c: 45: if (RB1 == 0)
  4709  0014FA  B281               	btfsc	3969,1,c	;volatile
  4710  0014FC  D002               	goto	l397
  4711                           
  4712                           ;matrix_keypad.c: 46: {;matrix_keypad.c: 47: return 2;
  4713  0014FE  0E02               	movlw	2
  4714  001500  0012               	return	
  4715  001502                     l397:
  4716                           
  4717                           ;matrix_keypad.c: 49: else if (RB2 == 0)
  4718  001502  B481               	btfsc	3969,2,c	;volatile
  4719  001504  D002               	goto	l399
  4720                           
  4721                           ;matrix_keypad.c: 50: {;matrix_keypad.c: 51: return 5;
  4722  001506  0E05               	movlw	5
  4723  001508  0012               	return	
  4724  00150A                     l399:
  4725                           
  4726                           ;matrix_keypad.c: 53: else if (RB3 == 0)
  4727  00150A  B681               	btfsc	3969,3,c	;volatile
  4728  00150C  D002               	goto	l401
  4729                           
  4730                           ;matrix_keypad.c: 54: {;matrix_keypad.c: 55: return 8;
  4731  00150E  0E08               	movlw	8
  4732  001510  0012               	return	
  4733  001512                     l401:
  4734                           
  4735                           ;matrix_keypad.c: 57: else if (RB4 == 0)
  4736  001512  B881               	btfsc	3969,4,c	;volatile
  4737  001514  D002               	goto	l398
  4738                           
  4739                           ;matrix_keypad.c: 58: {;matrix_keypad.c: 59: return 11;
  4740  001516  0E0B               	movlw	11
  4741  001518  0012               	return	
  4742  00151A                     l398:
  4743                           
  4744                           ;matrix_keypad.c: 60: };matrix_keypad.c: 62: RB5 = 1;
  4745  00151A  8A81               	bsf	3969,5,c	;volatile
  4746                           
  4747                           ;matrix_keypad.c: 63: RB6 = 1;
  4748  00151C  8C81               	bsf	3969,6,c	;volatile
  4749                           
  4750                           ;matrix_keypad.c: 64: RB7 = 0;
  4751  00151E  9E81               	bcf	3969,7,c	;volatile
  4752                           
  4753                           ;matrix_keypad.c: 66: RB7 = 0;
  4754  001520  9E81               	bcf	3969,7,c	;volatile
  4755                           
  4756                           ;matrix_keypad.c: 68: if (RB1 == 0)
  4757  001522  B281               	btfsc	3969,1,c	;volatile
  4758  001524  D002               	goto	l404
  4759                           
  4760                           ;matrix_keypad.c: 69: {;matrix_keypad.c: 70: return 3;
  4761  001526  0E03               	movlw	3
  4762  001528  0012               	return	
  4763  00152A                     l404:
  4764                           
  4765                           ;matrix_keypad.c: 72: else if (RB2 == 0)
  4766  00152A  B481               	btfsc	3969,2,c	;volatile
  4767  00152C  D002               	goto	l406
  4768                           
  4769                           ;matrix_keypad.c: 73: {;matrix_keypad.c: 74: return 6;
  4770  00152E  0E06               	movlw	6
  4771  001530  0012               	return	
  4772  001532                     l406:
  4773                           
  4774                           ;matrix_keypad.c: 76: else if (RB3 == 0)
  4775  001532  B681               	btfsc	3969,3,c	;volatile
  4776  001534  D002               	goto	l408
  4777                           
  4778                           ;matrix_keypad.c: 77: {;matrix_keypad.c: 78: return 9;
  4779  001536  0E09               	movlw	9
  4780  001538  0012               	return	
  4781  00153A                     l408:
  4782                           
  4783                           ;matrix_keypad.c: 80: else if (RB4 == 0)
  4784  00153A  B881               	btfsc	3969,4,c	;volatile
  4785  00153C  D002               	goto	l407
  4786                           
  4787                           ;matrix_keypad.c: 81: {;matrix_keypad.c: 82: return 12;
  4788  00153E  0E0C               	movlw	12
  4789  001540  0012               	return	
  4790  001542                     l407:
  4791                           
  4792                           ;matrix_keypad.c: 83: };matrix_keypad.c: 85: return 0xFF;
  4793  001542  0EFF               	movlw	255
  4794  001544  0012               	return		;funcret
  4795  001546                     __end_of_scan_key:
  4796                           	callstack 0
  4797                           
  4798 ;; *************** function _read_external_eeprom *****************
  4799 ;; Defined at:
  4800 ;;		line 14 in file "external_eeprom.c"
  4801 ;; Parameters:    Size  Location     Type
  4802 ;;  address         1    wreg     unsigned char 
  4803 ;; Auto vars:     Size  Location     Type
  4804 ;;  address         1    1[COMRAM] unsigned char 
  4805 ;;  data            1    2[COMRAM] unsigned char 
  4806 ;; Return value:  Size  Location     Type
  4807 ;;                  1    wreg      unsigned char 
  4808 ;; Registers used:
  4809 ;;		wreg, status,2, cstack
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4815 ;;      Params:         0       0       0       0       0       0       0
  4816 ;;      Locals:         2       0       0       0       0       0       0
  4817 ;;      Temps:          0       0       0       0       0       0       0
  4818 ;;      Totals:         2       0       0       0       0       0       0
  4819 ;;Total ram usage:        2 bytes
  4820 ;; Hardware stack levels used: 1
  4821 ;; Hardware stack levels required when called: 3
  4822 ;; This function calls:
  4823 ;;		_i2c_read
  4824 ;;		_i2c_rep_start
  4825 ;;		_i2c_start
  4826 ;;		_i2c_stop
  4827 ;;		_i2c_write
  4828 ;; This function is called by:
  4829 ;;		_change_password
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           	psect	text28
  4834  001A24                     __ptext28:
  4835                           	callstack 0
  4836  001A24                     _read_external_eeprom:
  4837                           	callstack 25
  4838                           
  4839                           ;incstack = 0
  4840                           ;read_external_eeprom@address stored from wreg
  4841  001A24  6E02               	movwf	read_external_eeprom@address^0,c
  4842                           
  4843                           ;external_eeprom.c: 16: unsigned char data;;external_eeprom.c: 18: i2c_start();
  4844  001A26  ECBE  F00D         	call	_i2c_start	;wreg free
  4845                           
  4846                           ;external_eeprom.c: 19: i2c_write(0xA0);
  4847  001A2A  0EA0               	movlw	160
  4848  001A2C  ECAA  F00D         	call	_i2c_write
  4849                           
  4850                           ;external_eeprom.c: 20: i2c_write(address);
  4851  001A30  5002               	movf	read_external_eeprom@address^0,w,c
  4852  001A32  ECAA  F00D         	call	_i2c_write
  4853                           
  4854                           ;external_eeprom.c: 21: i2c_rep_start();
  4855  001A36  ECC2  F00D         	call	_i2c_rep_start	;wreg free
  4856                           
  4857                           ;external_eeprom.c: 22: i2c_write(0xA1);
  4858  001A3A  0EA1               	movlw	161
  4859  001A3C  ECAA  F00D         	call	_i2c_write
  4860                           
  4861                           ;external_eeprom.c: 23: data = i2c_read();
  4862  001A40  ECB0  F00D         	call	_i2c_read	;wreg free
  4863  001A44  6E03               	movwf	read_external_eeprom@data^0,c
  4864                           
  4865                           ;external_eeprom.c: 24: i2c_stop();
  4866  001A46  ECBA  F00D         	call	_i2c_stop	;wreg free
  4867                           
  4868                           ;external_eeprom.c: 26: return data;
  4869  001A4A  5003               	movf	read_external_eeprom@data^0,w,c
  4870  001A4C  0012               	return		;funcret
  4871  001A4E                     __end_of_read_external_eeprom:
  4872                           	callstack 0
  4873                           
  4874 ;; *************** function _i2c_write *****************
  4875 ;; Defined at:
  4876 ;;		line 54 in file "i2c.c"
  4877 ;; Parameters:    Size  Location     Type
  4878 ;;  data            1    wreg     unsigned char 
  4879 ;; Auto vars:     Size  Location     Type
  4880 ;;  data            1    0[COMRAM] unsigned char 
  4881 ;; Return value:  Size  Location     Type
  4882 ;;                  1    wreg      void 
  4883 ;; Registers used:
  4884 ;;		wreg, cstack
  4885 ;; Tracked objects:
  4886 ;;		On entry : 0/0
  4887 ;;		On exit  : 0/0
  4888 ;;		Unchanged: 0/0
  4889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4890 ;;      Params:         0       0       0       0       0       0       0
  4891 ;;      Locals:         1       0       0       0       0       0       0
  4892 ;;      Temps:          0       0       0       0       0       0       0
  4893 ;;      Totals:         1       0       0       0       0       0       0
  4894 ;;Total ram usage:        1 bytes
  4895 ;; Hardware stack levels used: 1
  4896 ;; Hardware stack levels required when called: 1
  4897 ;; This function calls:
  4898 ;;		_i2c_idle
  4899 ;; This function is called by:
  4900 ;;		_write_ds1307
  4901 ;;		_read_ds1307
  4902 ;;		_write_external_eeprom
  4903 ;;		_read_external_eeprom
  4904 ;; This function uses a non-reentrant model
  4905 ;;
  4906                           
  4907                           	psect	text29
  4908  001B54                     __ptext29:
  4909                           	callstack 0
  4910  001B54                     _i2c_write:
  4911                           	callstack 26
  4912                           
  4913                           ;incstack = 0
  4914                           ;i2c_write@data stored from wreg
  4915  001B54  6E01               	movwf	i2c_write@data^0,c
  4916                           
  4917                           ;i2c.c: 56: SSPBUF = data;
  4918  001B56  C001  FFC9         	movff	i2c_write@data,4041	;volatile
  4919                           
  4920                           ;i2c.c: 57: i2c_idle();
  4921  001B5A  ECCA  F00D         	call	_i2c_idle	;wreg free
  4922  001B5E  0012               	return		;funcret
  4923  001B60                     __end_of_i2c_write:
  4924                           	callstack 0
  4925                           
  4926 ;; *************** function _i2c_stop *****************
  4927 ;; Defined at:
  4928 ;;		line 42 in file "i2c.c"
  4929 ;; Parameters:    Size  Location     Type
  4930 ;;		None
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;		None
  4933 ;; Return value:  Size  Location     Type
  4934 ;;                  1    wreg      void 
  4935 ;; Registers used:
  4936 ;;		cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : 0/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4942 ;;      Params:         0       0       0       0       0       0       0
  4943 ;;      Locals:         0       0       0       0       0       0       0
  4944 ;;      Temps:          0       0       0       0       0       0       0
  4945 ;;      Totals:         0       0       0       0       0       0       0
  4946 ;;Total ram usage:        0 bytes
  4947 ;; Hardware stack levels used: 1
  4948 ;; Hardware stack levels required when called: 1
  4949 ;; This function calls:
  4950 ;;		_i2c_idle
  4951 ;; This function is called by:
  4952 ;;		_write_ds1307
  4953 ;;		_read_ds1307
  4954 ;;		_write_external_eeprom
  4955 ;;		_read_external_eeprom
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text30
  4960  001B74                     __ptext30:
  4961                           	callstack 0
  4962  001B74                     _i2c_stop:
  4963                           	callstack 26
  4964                           
  4965                           ;i2c.c: 44: PEN = 1;
  4966                           
  4967                           ;incstack = 0
  4968  001B74  84C5               	bsf	4037,2,c	;volatile
  4969                           
  4970                           ;i2c.c: 45: i2c_idle();
  4971  001B76  ECCA  F00D         	call	_i2c_idle	;wreg free
  4972  001B7A  0012               	return		;funcret
  4973  001B7C                     __end_of_i2c_stop:
  4974                           	callstack 0
  4975                           
  4976 ;; *************** function _i2c_start *****************
  4977 ;; Defined at:
  4978 ;;		line 36 in file "i2c.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;		None
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;		None
  4983 ;; Return value:  Size  Location     Type
  4984 ;;                  1    wreg      void 
  4985 ;; Registers used:
  4986 ;;		cstack
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4992 ;;      Params:         0       0       0       0       0       0       0
  4993 ;;      Locals:         0       0       0       0       0       0       0
  4994 ;;      Temps:          0       0       0       0       0       0       0
  4995 ;;      Totals:         0       0       0       0       0       0       0
  4996 ;;Total ram usage:        0 bytes
  4997 ;; Hardware stack levels used: 1
  4998 ;; Hardware stack levels required when called: 1
  4999 ;; This function calls:
  5000 ;;		_i2c_idle
  5001 ;; This function is called by:
  5002 ;;		_write_ds1307
  5003 ;;		_read_ds1307
  5004 ;;		_write_external_eeprom
  5005 ;;		_read_external_eeprom
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           	psect	text31
  5010  001B7C                     __ptext31:
  5011                           	callstack 0
  5012  001B7C                     _i2c_start:
  5013                           	callstack 26
  5014                           
  5015                           ;i2c.c: 38: SEN = 1;
  5016                           
  5017                           ;incstack = 0
  5018  001B7C  80C5               	bsf	4037,0,c	;volatile
  5019                           
  5020                           ;i2c.c: 39: i2c_idle();
  5021  001B7E  ECCA  F00D         	call	_i2c_idle	;wreg free
  5022  001B82  0012               	return		;funcret
  5023  001B84                     __end_of_i2c_start:
  5024                           	callstack 0
  5025                           
  5026 ;; *************** function _i2c_rep_start *****************
  5027 ;; Defined at:
  5028 ;;		line 48 in file "i2c.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;		None
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;		None
  5033 ;; Return value:  Size  Location     Type
  5034 ;;                  1    wreg      void 
  5035 ;; Registers used:
  5036 ;;		cstack
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5042 ;;      Params:         0       0       0       0       0       0       0
  5043 ;;      Locals:         0       0       0       0       0       0       0
  5044 ;;      Temps:          0       0       0       0       0       0       0
  5045 ;;      Totals:         0       0       0       0       0       0       0
  5046 ;;Total ram usage:        0 bytes
  5047 ;; Hardware stack levels used: 1
  5048 ;; Hardware stack levels required when called: 1
  5049 ;; This function calls:
  5050 ;;		_i2c_idle
  5051 ;; This function is called by:
  5052 ;;		_read_ds1307
  5053 ;;		_read_external_eeprom
  5054 ;; This function uses a non-reentrant model
  5055 ;;
  5056                           
  5057                           	psect	text32
  5058  001B84                     __ptext32:
  5059                           	callstack 0
  5060  001B84                     _i2c_rep_start:
  5061                           	callstack 26
  5062                           
  5063                           ;i2c.c: 50: RSEN = 1;
  5064                           
  5065                           ;incstack = 0
  5066  001B84  82C5               	bsf	4037,1,c	;volatile
  5067                           
  5068                           ;i2c.c: 51: i2c_idle();
  5069  001B86  ECCA  F00D         	call	_i2c_idle	;wreg free
  5070  001B8A  0012               	return		;funcret
  5071  001B8C                     __end_of_i2c_rep_start:
  5072                           	callstack 0
  5073                           
  5074 ;; *************** function _i2c_read *****************
  5075 ;; Defined at:
  5076 ;;		line 72 in file "i2c.c"
  5077 ;; Parameters:    Size  Location     Type
  5078 ;;		None
  5079 ;; Auto vars:     Size  Location     Type
  5080 ;;		None
  5081 ;; Return value:  Size  Location     Type
  5082 ;;                  1    wreg      unsigned char 
  5083 ;; Registers used:
  5084 ;;		wreg, status,2, cstack
  5085 ;; Tracked objects:
  5086 ;;		On entry : 0/0
  5087 ;;		On exit  : 0/0
  5088 ;;		Unchanged: 0/0
  5089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5090 ;;      Params:         0       0       0       0       0       0       0
  5091 ;;      Locals:         0       0       0       0       0       0       0
  5092 ;;      Temps:          0       0       0       0       0       0       0
  5093 ;;      Totals:         0       0       0       0       0       0       0
  5094 ;;Total ram usage:        0 bytes
  5095 ;; Hardware stack levels used: 1
  5096 ;; Hardware stack levels required when called: 2
  5097 ;; This function calls:
  5098 ;;		_i2c_no_ack
  5099 ;;		_i2c_rx_mode
  5100 ;; This function is called by:
  5101 ;;		_read_ds1307
  5102 ;;		_read_external_eeprom
  5103 ;; This function uses a non-reentrant model
  5104 ;;
  5105                           
  5106                           	psect	text33
  5107  001B60                     __ptext33:
  5108                           	callstack 0
  5109  001B60                     _i2c_read:
  5110                           	callstack 25
  5111                           
  5112                           ;i2c.c: 74: i2c_rx_mode();
  5113                           
  5114                           ;incstack = 0
  5115  001B60  ECC6  F00D         	call	_i2c_rx_mode	;wreg free
  5116                           
  5117                           ;i2c.c: 75: i2c_no_ack();
  5118  001B64  ECCE  F00D         	call	_i2c_no_ack	;wreg free
  5119                           
  5120                           ;i2c.c: 77: return SSPBUF;
  5121  001B68  50C9               	movf	201,w,c	;volatile
  5122  001B6A  0012               	return		;funcret
  5123  001B6C                     __end_of_i2c_read:
  5124                           	callstack 0
  5125                           
  5126 ;; *************** function _i2c_rx_mode *****************
  5127 ;; Defined at:
  5128 ;;		line 60 in file "i2c.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;		None
  5131 ;; Auto vars:     Size  Location     Type
  5132 ;;		None
  5133 ;; Return value:  Size  Location     Type
  5134 ;;                  1    wreg      void 
  5135 ;; Registers used:
  5136 ;;		cstack
  5137 ;; Tracked objects:
  5138 ;;		On entry : 0/0
  5139 ;;		On exit  : 0/0
  5140 ;;		Unchanged: 0/0
  5141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5142 ;;      Params:         0       0       0       0       0       0       0
  5143 ;;      Locals:         0       0       0       0       0       0       0
  5144 ;;      Temps:          0       0       0       0       0       0       0
  5145 ;;      Totals:         0       0       0       0       0       0       0
  5146 ;;Total ram usage:        0 bytes
  5147 ;; Hardware stack levels used: 1
  5148 ;; Hardware stack levels required when called: 1
  5149 ;; This function calls:
  5150 ;;		_i2c_idle
  5151 ;; This function is called by:
  5152 ;;		_i2c_read
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           	psect	text34
  5157  001B8C                     __ptext34:
  5158                           	callstack 0
  5159  001B8C                     _i2c_rx_mode:
  5160                           	callstack 25
  5161                           
  5162                           ;i2c.c: 62: RCEN = 1;
  5163                           
  5164                           ;incstack = 0
  5165  001B8C  86C5               	bsf	4037,3,c	;volatile
  5166                           
  5167                           ;i2c.c: 63: i2c_idle();
  5168  001B8E  ECCA  F00D         	call	_i2c_idle	;wreg free
  5169  001B92  0012               	return		;funcret
  5170  001B94                     __end_of_i2c_rx_mode:
  5171                           	callstack 0
  5172                           
  5173 ;; *************** function _i2c_idle *****************
  5174 ;; Defined at:
  5175 ;;		line 22 in file "i2c.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;		None
  5178 ;; Auto vars:     Size  Location     Type
  5179 ;;		None
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  1    wreg      void 
  5182 ;; Registers used:
  5183 ;;		None
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5189 ;;      Params:         0       0       0       0       0       0       0
  5190 ;;      Locals:         0       0       0       0       0       0       0
  5191 ;;      Temps:          0       0       0       0       0       0       0
  5192 ;;      Totals:         0       0       0       0       0       0       0
  5193 ;;Total ram usage:        0 bytes
  5194 ;; Hardware stack levels used: 1
  5195 ;; This function calls:
  5196 ;;		Nothing
  5197 ;; This function is called by:
  5198 ;;		_i2c_start
  5199 ;;		_i2c_stop
  5200 ;;		_i2c_rep_start
  5201 ;;		_i2c_write
  5202 ;;		_i2c_rx_mode
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           	psect	text35
  5207  001B94                     __ptext35:
  5208                           	callstack 0
  5209  001B94                     _i2c_idle:
  5210                           	callstack 26
  5211                           
  5212                           ;i2c.c: 24: while (!SSPIF);
  5213                           
  5214                           ;incstack = 0
  5215  001B94  A69E               	btfss	3998,3,c	;volatile
  5216  001B96  D7FE               	goto	__ptext35
  5217                           
  5218                           ;i2c.c: 25: SSPIF = 0;
  5219  001B98  969E               	bcf	3998,3,c	;volatile
  5220  001B9A  0012               	return		;funcret
  5221  001B9C                     __end_of_i2c_idle:
  5222                           	callstack 0
  5223                           
  5224 ;; *************** function _i2c_no_ack *****************
  5225 ;; Defined at:
  5226 ;;		line 66 in file "i2c.c"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;		None
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;		None
  5231 ;; Return value:  Size  Location     Type
  5232 ;;                  1    wreg      void 
  5233 ;; Registers used:
  5234 ;;		None
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5240 ;;      Params:         0       0       0       0       0       0       0
  5241 ;;      Locals:         0       0       0       0       0       0       0
  5242 ;;      Temps:          0       0       0       0       0       0       0
  5243 ;;      Totals:         0       0       0       0       0       0       0
  5244 ;;Total ram usage:        0 bytes
  5245 ;; Hardware stack levels used: 1
  5246 ;; This function calls:
  5247 ;;		Nothing
  5248 ;; This function is called by:
  5249 ;;		_i2c_read
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text36
  5254  001B9C                     __ptext36:
  5255                           	callstack 0
  5256  001B9C                     _i2c_no_ack:
  5257                           	callstack 26
  5258                           
  5259                           ;i2c.c: 68: ACKDT = 1;
  5260                           
  5261                           ;incstack = 0
  5262  001B9C  8AC5               	bsf	4037,5,c	;volatile
  5263                           
  5264                           ;i2c.c: 69: ACKEN = 1;
  5265  001B9E  88C5               	bsf	4037,4,c	;volatile
  5266  001BA0  0012               	return		;funcret
  5267  001BA2                     __end_of_i2c_no_ack:
  5268                           	callstack 0
  5269                           
  5270 ;; *************** function _clcd_putch *****************
  5271 ;; Defined at:
  5272 ;;		line 51 in file "clcd.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;  data            1    wreg     const unsigned char 
  5275 ;;  addr            1    7[COMRAM] unsigned char 
  5276 ;; Auto vars:     Size  Location     Type
  5277 ;;  data            1    8[COMRAM] const unsigned char 
  5278 ;; Return value:  Size  Location     Type
  5279 ;;                  1    wreg      void 
  5280 ;; Registers used:
  5281 ;;		wreg, status,2, cstack
  5282 ;; Tracked objects:
  5283 ;;		On entry : 0/0
  5284 ;;		On exit  : 0/0
  5285 ;;		Unchanged: 0/0
  5286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5287 ;;      Params:         1       0       0       0       0       0       0
  5288 ;;      Locals:         1       0       0       0       0       0       0
  5289 ;;      Temps:          0       0       0       0       0       0       0
  5290 ;;      Totals:         2       0       0       0       0       0       0
  5291 ;;Total ram usage:        2 bytes
  5292 ;; Hardware stack levels used: 1
  5293 ;; Hardware stack levels required when called: 1
  5294 ;; This function calls:
  5295 ;;		_clcd_write
  5296 ;; This function is called by:
  5297 ;;		_password
  5298 ;;		_set_time
  5299 ;;		_change_password
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text37
  5304  001AF8                     __ptext37:
  5305                           	callstack 0
  5306  001AF8                     _clcd_putch:
  5307                           	callstack 28
  5308                           
  5309                           ;incstack = 0
  5310                           ;clcd_putch@data stored from wreg
  5311  001AF8  6E09               	movwf	clcd_putch@data^0,c
  5312                           
  5313                           ;clcd.c: 53: clcd_write(addr, 0);
  5314  001AFA  0E00               	movlw	0
  5315  001AFC  6E01               	movwf	clcd_write@control_bit^0,c
  5316  001AFE  5008               	movf	clcd_putch@addr^0,w,c
  5317  001B00  EC27  F00D         	call	_clcd_write
  5318                           
  5319                           ;clcd.c: 54: clcd_write(data, 1);
  5320  001B04  0E01               	movlw	1
  5321  001B06  6E01               	movwf	clcd_write@control_bit^0,c
  5322  001B08  5009               	movf	clcd_putch@data^0,w,c
  5323  001B0A  EC27  F00D         	call	_clcd_write
  5324  001B0E  0012               	return		;funcret
  5325  001B10                     __end_of_clcd_putch:
  5326                           	callstack 0
  5327                           
  5328 ;; *************** function _clcd_print *****************
  5329 ;; Defined at:
  5330 ;;		line 42 in file "clcd.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;  data            2    6[COMRAM] PTR const unsigned char 
  5333 ;;		 -> STR_24(18), STR_23(3), STR_22(3), STR_21(3), 
  5334 ;;		 -> STR_20(3), STR_19(3), STR_18(3), STR_17(3), 
  5335 ;;		 -> STR_16(3), menu(85), STR_15(3), STR_11(8), 
  5336 ;;		 -> STR_10(17), STR_9(12), STR_8(18), STR_7(18), 
  5337 ;;		 -> STR_6(17), STR_5(9), STR_4(15), STR_3(13), 
  5338 ;;		 -> STR_2(17), STR_1(15), str(3), gear(27), 
  5339 ;;		 -> time(9), event(170), 
  5340 ;;  addr            1    8[COMRAM] unsigned char 
  5341 ;; Auto vars:     Size  Location     Type
  5342 ;;		None
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      void 
  5345 ;; Registers used:
  5346 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5352 ;;      Params:         3       0       0       0       0       0       0
  5353 ;;      Locals:         0       0       0       0       0       0       0
  5354 ;;      Temps:          0       0       0       0       0       0       0
  5355 ;;      Totals:         3       0       0       0       0       0       0
  5356 ;;Total ram usage:        3 bytes
  5357 ;; Hardware stack levels used: 1
  5358 ;; Hardware stack levels required when called: 1
  5359 ;; This function calls:
  5360 ;;		_clcd_write
  5361 ;; This function is called by:
  5362 ;;		_password
  5363 ;;		_set_time
  5364 ;;		_change_password
  5365 ;;		_view_log
  5366 ;;		_clear_log
  5367 ;;		_download_log
  5368 ;;		_display_menu
  5369 ;;		_display_time
  5370 ;;		_init_config
  5371 ;;		_main
  5372 ;; This function uses a non-reentrant model
  5373 ;;
  5374                           
  5375                           	psect	text38
  5376  0016F2                     __ptext38:
  5377                           	callstack 0
  5378  0016F2                     _clcd_print:
  5379                           	callstack 28
  5380                           
  5381                           ;clcd.c: 44: clcd_write(addr, 0);
  5382                           
  5383                           ;incstack = 0
  5384  0016F2  0E00               	movlw	0
  5385  0016F4  6E01               	movwf	clcd_write@control_bit^0,c
  5386  0016F6  5009               	movf	clcd_print@addr^0,w,c
  5387  0016F8  EC27  F00D         	call	_clcd_write
  5388                           
  5389                           ;clcd.c: 45: while (*data != '\0')
  5390  0016FC  D016               	goto	l2563
  5391  0016FE                     l2559:
  5392                           
  5393                           ;clcd.c: 46: {;clcd.c: 47: clcd_write(*data++, 1);
  5394  0016FE  0E01               	movlw	1
  5395  001700  6E01               	movwf	clcd_write@control_bit^0,c
  5396  001702  C007  FFF6         	movff	clcd_print@data,tblptrl
  5397  001706  C008  FFF7         	movff	clcd_print@data+1,tblptrh
  5398  00170A  6AF8               	clrf	tblptru,c
  5399  00170C  0E05               	movlw	(high __ramtop+-1)
  5400  00170E  64F7               	cpfsgt	tblptrh,c
  5401  001710  D003               	bra	u1627
  5402  001712  0008               	tblrd		*
  5403  001714  50F5               	movf	tablat,w,c
  5404  001716  D005               	bra	u1620
  5405  001718                     u1627:
  5406  001718  CFF6 FFE9          	movff	tblptrl,fsr0l
  5407  00171C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5408  001720  50EF               	movf	indf0,w,c
  5409  001722                     u1620:
  5410  001722  EC27  F00D         	call	_clcd_write
  5411  001726  4A07               	infsnz	clcd_print@data^0,f,c
  5412  001728  2A08               	incf	(clcd_print@data+1)^0,f,c
  5413  00172A                     l2563:
  5414  00172A  C007  FFF6         	movff	clcd_print@data,tblptrl
  5415  00172E  C008  FFF7         	movff	clcd_print@data+1,tblptrh
  5416  001732  6AF8               	clrf	tblptru,c
  5417  001734  0E05               	movlw	(high __ramtop+-1)
  5418  001736  64F7               	cpfsgt	tblptrh,c
  5419  001738  D003               	bra	u1637
  5420  00173A  0008               	tblrd		*
  5421  00173C  50F5               	movf	tablat,w,c
  5422  00173E  D005               	bra	u1630
  5423  001740                     u1637:
  5424  001740  CFF6 FFE9          	movff	tblptrl,fsr0l
  5425  001744  CFF7 FFEA          	movff	tblptrh,fsr0h
  5426  001748  50EF               	movf	indf0,w,c
  5427  00174A                     u1630:
  5428  00174A  0900               	iorlw	0
  5429  00174C  B4D8               	btfsc	status,2,c
  5430  00174E  0012               	return	
  5431  001750  D7D6               	goto	l2559
  5432  001752                     __end_of_clcd_print:
  5433                           	callstack 0
  5434                           
  5435 ;; *************** function _clcd_write *****************
  5436 ;; Defined at:
  5437 ;;		line 4 in file "clcd.c"
  5438 ;; Parameters:    Size  Location     Type
  5439 ;;  byte            1    wreg     unsigned char 
  5440 ;;  control_bit     1    0[COMRAM] unsigned char 
  5441 ;; Auto vars:     Size  Location     Type
  5442 ;;  byte            1    1[COMRAM] unsigned char 
  5443 ;; Return value:  Size  Location     Type
  5444 ;;                  1    wreg      void 
  5445 ;; Registers used:
  5446 ;;		wreg
  5447 ;; Tracked objects:
  5448 ;;		On entry : 0/0
  5449 ;;		On exit  : 0/0
  5450 ;;		Unchanged: 0/0
  5451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5452 ;;      Params:         1       0       0       0       0       0       0
  5453 ;;      Locals:         1       0       0       0       0       0       0
  5454 ;;      Temps:          0       0       0       0       0       0       0
  5455 ;;      Totals:         2       0       0       0       0       0       0
  5456 ;;Total ram usage:        2 bytes
  5457 ;; Hardware stack levels used: 1
  5458 ;; This function calls:
  5459 ;;		Nothing
  5460 ;; This function is called by:
  5461 ;;		_password
  5462 ;;		_set_time
  5463 ;;		_change_password
  5464 ;;		_view_log
  5465 ;;		_clear_log
  5466 ;;		_download_log
  5467 ;;		_main
  5468 ;;		_init_clcd
  5469 ;;		_clcd_print
  5470 ;;		_clcd_putch
  5471 ;; This function uses a non-reentrant model
  5472 ;;
  5473                           
  5474                           	psect	text39
  5475  001A4E                     __ptext39:
  5476                           	callstack 0
  5477  001A4E                     _clcd_write:
  5478                           	callstack 29
  5479                           
  5480                           ;incstack = 0
  5481                           ;clcd_write@byte stored from wreg
  5482  001A4E  6E02               	movwf	clcd_write@byte^0,c
  5483                           
  5484                           ;clcd.c: 6: RC1 = control_bit;
  5485  001A50  A001               	btfss	clcd_write@control_bit^0,0,c
  5486  001A52  D002               	goto	u1370
  5487  001A54  8282               	bsf	3970,1,c	;volatile
  5488  001A56  D001               	goto	u1385
  5489  001A58                     u1370:
  5490  001A58  9282               	bcf	3970,1,c	;volatile
  5491  001A5A                     u1385:
  5492                           
  5493                           ;clcd.c: 7: PORTD = byte;
  5494  001A5A  C002  FF83         	movff	clcd_write@byte,3971	;volatile
  5495                           
  5496                           ;clcd.c: 10: RC2 = 1;
  5497  001A5E  8482               	bsf	3970,2,c	;volatile
  5498                           
  5499                           ;clcd.c: 11: RC2 = 0;
  5500  001A60  9482               	bcf	3970,2,c	;volatile
  5501                           
  5502                           ;clcd.c: 13: TRISD7 = 0xFF;
  5503  001A62  8E95               	bsf	3989,7,c	;volatile
  5504                           
  5505                           ;clcd.c: 14: RC0 = 1;
  5506  001A64  8082               	bsf	3970,0,c	;volatile
  5507                           
  5508                           ;clcd.c: 15: RC1 = 0;
  5509  001A66  9282               	bcf	3970,1,c	;volatile
  5510  001A68                     l2383:
  5511                           
  5512                           ;clcd.c: 18: {;clcd.c: 19: RC2 = 1;
  5513  001A68  8482               	bsf	3970,2,c	;volatile
  5514                           
  5515                           ;clcd.c: 20: RC2 = 0;
  5516  001A6A  9482               	bcf	3970,2,c	;volatile
  5517                           
  5518                           ;clcd.c: 21: } while (RD7);
  5519  001A6C  BE83               	btfsc	3971,7,c	;volatile
  5520  001A6E  D7FC               	goto	l2383
  5521                           
  5522                           ;clcd.c: 23: RC0 = 0;
  5523  001A70  9082               	bcf	3970,0,c	;volatile
  5524                           
  5525                           ;clcd.c: 24: TRISD7 = 0x00;
  5526  001A72  9E95               	bcf	3989,7,c	;volatile
  5527  001A74  0012               	return		;funcret
  5528  001A76                     __end_of_clcd_write:
  5529                           	callstack 0
  5530                           
  5531 ;; *************** function _add_event *****************
  5532 ;; Defined at:
  5533 ;;		line 39 in file "main.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;		None
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;  j               2   10[COMRAM] int 
  5538 ;;  i               2    8[COMRAM] int 
  5539 ;; Return value:  Size  Location     Type
  5540 ;;                  1    wreg      void 
  5541 ;; Registers used:
  5542 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5543 ;; Tracked objects:
  5544 ;;		On entry : 0/0
  5545 ;;		On exit  : 0/0
  5546 ;;		Unchanged: 0/0
  5547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5548 ;;      Params:         0       0       0       0       0       0       0
  5549 ;;      Locals:         4       0       0       0       0       0       0
  5550 ;;      Temps:          2       0       0       0       0       0       0
  5551 ;;      Totals:         6       0       0       0       0       0       0
  5552 ;;Total ram usage:        6 bytes
  5553 ;; Hardware stack levels used: 1
  5554 ;; Hardware stack levels required when called: 1
  5555 ;; This function calls:
  5556 ;;		___wmul
  5557 ;; This function is called by:
  5558 ;;		_main
  5559 ;; This function uses a non-reentrant model
  5560 ;;
  5561                           
  5562                           	psect	text40
  5563  000C14                     __ptext40:
  5564                           	callstack 0
  5565  000C14                     _add_event:
  5566                           	callstack 29
  5567                           
  5568                           ;main.c: 41: int i = 0 , j = 0;
  5569                           
  5570                           ;incstack = 0
  5571  000C14  0E00               	movlw	0
  5572  000C16  6E0A               	movwf	(add_event@i+1)^0,c
  5573  000C18  0E00               	movlw	0
  5574  000C1A  6E09               	movwf	add_event@i^0,c
  5575                           
  5576                           ;main.c: 43: if(log < 10)
  5577  000C1C  BE31               	btfsc	(_log+1)^0,7,c
  5578  000C1E  D006               	goto	u2130
  5579  000C20  5031               	movf	(_log+1)^0,w,c
  5580  000C22  E103               	bnz	u2131
  5581  000C24  0E0A               	movlw	10
  5582  000C26  5C30               	subwf	_log^0,w,c
  5583  000C28  B0D8               	btfsc	status,0,c
  5584  000C2A                     u2131:
  5585  000C2A  D0E4               	goto	l3005
  5586  000C2C                     u2130:
  5587                           
  5588                           ;main.c: 44: {;main.c: 46: for(j=0 ; time[j] != '\0' ; j++)
  5589  000C2C  0E00               	movlw	0
  5590  000C2E  6E0C               	movwf	(add_event@j+1)^0,c
  5591  000C30  0E00               	movlw	0
  5592  000C32  6E0B               	movwf	add_event@j^0,c
  5593  000C34  D022               	goto	l2971
  5594  000C36                     l2965:
  5595                           
  5596                           ;main.c: 47: {;main.c: 48: event[log][i++] = time[j];
  5597  000C36  500B               	movf	add_event@j^0,w,c
  5598  000C38  0F38               	addlw	low _time
  5599  000C3A  6ED9               	movwf	fsr2l,c
  5600  000C3C  6ADA               	clrf	fsr2h,c
  5601  000C3E  C030  F001         	movff	_log,___wmul@multiplier
  5602  000C42  C031  F002         	movff	_log+1,___wmul@multiplier+1
  5603  000C46  0E00               	movlw	0
  5604  000C48  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  5605  000C4A  0E11               	movlw	17
  5606  000C4C  6E03               	movwf	___wmul@multiplicand^0,c
  5607  000C4E  EC3B  F00D         	call	___wmul	;wreg free
  5608  000C52  0E00               	movlw	low _event
  5609  000C54  6E07               	movwf	??_add_event^0,c
  5610  000C56  0E01               	movlw	high _event
  5611  000C58  6E08               	movwf	(??_add_event+1)^0,c
  5612  000C5A  5001               	movf	?___wmul^0,w,c
  5613  000C5C  2607               	addwf	??_add_event^0,f,c
  5614  000C5E  5002               	movf	(?___wmul+1)^0,w,c
  5615  000C60  2208               	addwfc	(??_add_event+1)^0,f,c
  5616  000C62  5009               	movf	add_event@i^0,w,c
  5617  000C64  2407               	addwf	??_add_event^0,w,c
  5618  000C66  6EE1               	movwf	fsr1l,c
  5619  000C68  500A               	movf	(add_event@i+1)^0,w,c
  5620  000C6A  2008               	addwfc	(??_add_event+1)^0,w,c
  5621  000C6C  6EE2               	movwf	fsr1h,c
  5622  000C6E  CFDF FFE7          	movff	indf2,indf1
  5623  000C72  4A09               	infsnz	add_event@i^0,f,c
  5624  000C74  2A0A               	incf	(add_event@i+1)^0,f,c
  5625  000C76  4A0B               	infsnz	add_event@j^0,f,c
  5626  000C78  2A0C               	incf	(add_event@j+1)^0,f,c
  5627  000C7A                     l2971:
  5628  000C7A  500B               	movf	add_event@j^0,w,c
  5629  000C7C  0F38               	addlw	low _time
  5630  000C7E  6ED9               	movwf	fsr2l,c
  5631  000C80  6ADA               	clrf	fsr2h,c
  5632  000C82  50DF               	movf	indf2,w,c
  5633  000C84  A4D8               	btfss	status,2,c
  5634  000C86  D7D7               	goto	l2965
  5635                           
  5636                           ;main.c: 49: };main.c: 50: event[log][i++] = ' ';
  5637  000C88  C030  F001         	movff	_log,___wmul@multiplier
  5638  000C8C  C031  F002         	movff	_log+1,___wmul@multiplier+1
  5639  000C90  0E00               	movlw	0
  5640  000C92  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  5641  000C94  0E11               	movlw	17
  5642  000C96  6E03               	movwf	___wmul@multiplicand^0,c
  5643  000C98  EC3B  F00D         	call	___wmul	;wreg free
  5644  000C9C  0E00               	movlw	low _event
  5645  000C9E  6E07               	movwf	??_add_event^0,c
  5646  000CA0  0E01               	movlw	high _event
  5647  000CA2  6E08               	movwf	(??_add_event+1)^0,c
  5648  000CA4  5001               	movf	?___wmul^0,w,c
  5649  000CA6  2607               	addwf	??_add_event^0,f,c
  5650  000CA8  5002               	movf	(?___wmul+1)^0,w,c
  5651  000CAA  2208               	addwfc	(??_add_event+1)^0,f,c
  5652  000CAC  5009               	movf	add_event@i^0,w,c
  5653  000CAE  2407               	addwf	??_add_event^0,w,c
  5654  000CB0  6ED9               	movwf	fsr2l,c
  5655  000CB2  500A               	movf	(add_event@i+1)^0,w,c
  5656  000CB4  2008               	addwfc	(??_add_event+1)^0,w,c
  5657  000CB6  6EDA               	movwf	fsr2h,c
  5658  000CB8  0E20               	movlw	32
  5659  000CBA  6EDF               	movwf	indf2,c
  5660  000CBC  4A09               	infsnz	add_event@i^0,f,c
  5661  000CBE  2A0A               	incf	(add_event@i+1)^0,f,c
  5662                           
  5663                           ;main.c: 53: for(j=0 ; gear[count][j] != '\0' ; j++)
  5664  000CC0  0E00               	movlw	0
  5665  000CC2  6E0C               	movwf	(add_event@j+1)^0,c
  5666  000CC4  0E00               	movlw	0
  5667  000CC6  6E0B               	movwf	add_event@j^0,c
  5668  000CC8  D025               	goto	l2985
  5669  000CCA                     l2979:
  5670                           
  5671                           ;main.c: 54: {;main.c: 55: event[log][i++] = gear[count][j];
  5672  000CCA  5032               	movf	_count^0,w,c
  5673  000CCC  0D03               	mullw	3
  5674  000CCE  50F3               	movf	243,w,c
  5675  000CD0  0FB5               	addlw	low _gear
  5676  000CD2  240B               	addwf	add_event@j^0,w,c
  5677  000CD4  6ED9               	movwf	fsr2l,c
  5678  000CD6  6ADA               	clrf	fsr2h,c
  5679  000CD8  C030  F001         	movff	_log,___wmul@multiplier
  5680  000CDC  C031  F002         	movff	_log+1,___wmul@multiplier+1
  5681  000CE0  0E00               	movlw	0
  5682  000CE2  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  5683  000CE4  0E11               	movlw	17
  5684  000CE6  6E03               	movwf	___wmul@multiplicand^0,c
  5685  000CE8  EC3B  F00D         	call	___wmul	;wreg free
  5686  000CEC  0E00               	movlw	low _event
  5687  000CEE  6E07               	movwf	??_add_event^0,c
  5688  000CF0  0E01               	movlw	high _event
  5689  000CF2  6E08               	movwf	(??_add_event+1)^0,c
  5690  000CF4  5001               	movf	?___wmul^0,w,c
  5691  000CF6  2607               	addwf	??_add_event^0,f,c
  5692  000CF8  5002               	movf	(?___wmul+1)^0,w,c
  5693  000CFA  2208               	addwfc	(??_add_event+1)^0,f,c
  5694  000CFC  5009               	movf	add_event@i^0,w,c
  5695  000CFE  2407               	addwf	??_add_event^0,w,c
  5696  000D00  6EE1               	movwf	fsr1l,c
  5697  000D02  500A               	movf	(add_event@i+1)^0,w,c
  5698  000D04  2008               	addwfc	(??_add_event+1)^0,w,c
  5699  000D06  6EE2               	movwf	fsr1h,c
  5700  000D08  CFDF FFE7          	movff	indf2,indf1
  5701  000D0C  4A09               	infsnz	add_event@i^0,f,c
  5702  000D0E  2A0A               	incf	(add_event@i+1)^0,f,c
  5703  000D10  4A0B               	infsnz	add_event@j^0,f,c
  5704  000D12  2A0C               	incf	(add_event@j+1)^0,f,c
  5705  000D14                     l2985:
  5706  000D14  5032               	movf	_count^0,w,c
  5707  000D16  0D03               	mullw	3
  5708  000D18  50F3               	movf	243,w,c
  5709  000D1A  0FB5               	addlw	low _gear
  5710  000D1C  240B               	addwf	add_event@j^0,w,c
  5711  000D1E  6ED9               	movwf	fsr2l,c
  5712  000D20  6ADA               	clrf	fsr2h,c
  5713  000D22  50DF               	movf	indf2,w,c
  5714  000D24  A4D8               	btfss	status,2,c
  5715  000D26  D7D1               	goto	l2979
  5716                           
  5717                           ;main.c: 56: };main.c: 57: event[log][i++] = ' ';
  5718  000D28  C030  F001         	movff	_log,___wmul@multiplier
  5719  000D2C  C031  F002         	movff	_log+1,___wmul@multiplier+1
  5720  000D30  0E00               	movlw	0
  5721  000D32  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  5722  000D34  0E11               	movlw	17
  5723  000D36  6E03               	movwf	___wmul@multiplicand^0,c
  5724  000D38  EC3B  F00D         	call	___wmul	;wreg free
  5725  000D3C  0E00               	movlw	low _event
  5726  000D3E  6E07               	movwf	??_add_event^0,c
  5727  000D40  0E01               	movlw	high _event
  5728  000D42  6E08               	movwf	(??_add_event+1)^0,c
  5729  000D44  5001               	movf	?___wmul^0,w,c
  5730  000D46  2607               	addwf	??_add_event^0,f,c
  5731  000D48  5002               	movf	(?___wmul+1)^0,w,c
  5732  000D4A  2208               	addwfc	(??_add_event+1)^0,f,c
  5733  000D4C  5009               	movf	add_event@i^0,w,c
  5734  000D4E  2407               	addwf	??_add_event^0,w,c
  5735  000D50  6ED9               	movwf	fsr2l,c
  5736  000D52  500A               	movf	(add_event@i+1)^0,w,c
  5737  000D54  2008               	addwfc	(??_add_event+1)^0,w,c
  5738  000D56  6EDA               	movwf	fsr2h,c
  5739  000D58  0E20               	movlw	32
  5740  000D5A  6EDF               	movwf	indf2,c
  5741  000D5C  4A09               	infsnz	add_event@i^0,f,c
  5742  000D5E  2A0A               	incf	(add_event@i+1)^0,f,c
  5743                           
  5744                           ;main.c: 60: for(j=0 ; str[j] != '\0' ; j++)
  5745  000D60  0E00               	movlw	0
  5746  000D62  6E0C               	movwf	(add_event@j+1)^0,c
  5747  000D64  0E00               	movlw	0
  5748  000D66  6E0B               	movwf	add_event@j^0,c
  5749  000D68  D022               	goto	l2999
  5750  000D6A                     l2993:
  5751                           
  5752                           ;main.c: 61: {;main.c: 62: event[log][i++] = str[j];
  5753  000D6A  500B               	movf	add_event@j^0,w,c
  5754  000D6C  0F41               	addlw	low _str
  5755  000D6E  6ED9               	movwf	fsr2l,c
  5756  000D70  6ADA               	clrf	fsr2h,c
  5757  000D72  C030  F001         	movff	_log,___wmul@multiplier
  5758  000D76  C031  F002         	movff	_log+1,___wmul@multiplier+1
  5759  000D7A  0E00               	movlw	0
  5760  000D7C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  5761  000D7E  0E11               	movlw	17
  5762  000D80  6E03               	movwf	___wmul@multiplicand^0,c
  5763  000D82  EC3B  F00D         	call	___wmul	;wreg free
  5764  000D86  0E00               	movlw	low _event
  5765  000D88  6E07               	movwf	??_add_event^0,c
  5766  000D8A  0E01               	movlw	high _event
  5767  000D8C  6E08               	movwf	(??_add_event+1)^0,c
  5768  000D8E  5001               	movf	?___wmul^0,w,c
  5769  000D90  2607               	addwf	??_add_event^0,f,c
  5770  000D92  5002               	movf	(?___wmul+1)^0,w,c
  5771  000D94  2208               	addwfc	(??_add_event+1)^0,f,c
  5772  000D96  5009               	movf	add_event@i^0,w,c
  5773  000D98  2407               	addwf	??_add_event^0,w,c
  5774  000D9A  6EE1               	movwf	fsr1l,c
  5775  000D9C  500A               	movf	(add_event@i+1)^0,w,c
  5776  000D9E  2008               	addwfc	(??_add_event+1)^0,w,c
  5777  000DA0  6EE2               	movwf	fsr1h,c
  5778  000DA2  CFDF FFE7          	movff	indf2,indf1
  5779  000DA6  4A09               	infsnz	add_event@i^0,f,c
  5780  000DA8  2A0A               	incf	(add_event@i+1)^0,f,c
  5781  000DAA  4A0B               	infsnz	add_event@j^0,f,c
  5782  000DAC  2A0C               	incf	(add_event@j+1)^0,f,c
  5783  000DAE                     l2999:
  5784  000DAE  500B               	movf	add_event@j^0,w,c
  5785  000DB0  0F41               	addlw	low _str
  5786  000DB2  6ED9               	movwf	fsr2l,c
  5787  000DB4  6ADA               	clrf	fsr2h,c
  5788  000DB6  50DF               	movf	indf2,w,c
  5789  000DB8  A4D8               	btfss	status,2,c
  5790  000DBA  D7D7               	goto	l2993
  5791                           
  5792                           ;main.c: 63: };main.c: 65: event[log][i] = '\0';
  5793  000DBC  C030  F001         	movff	_log,___wmul@multiplier
  5794  000DC0  C031  F002         	movff	_log+1,___wmul@multiplier+1
  5795  000DC4  0E00               	movlw	0
  5796  000DC6  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  5797  000DC8  0E11               	movlw	17
  5798  000DCA  6E03               	movwf	___wmul@multiplicand^0,c
  5799  000DCC  EC3B  F00D         	call	___wmul	;wreg free
  5800  000DD0  0E00               	movlw	low _event
  5801  000DD2  6E07               	movwf	??_add_event^0,c
  5802  000DD4  0E01               	movlw	high _event
  5803  000DD6  6E08               	movwf	(??_add_event+1)^0,c
  5804  000DD8  5001               	movf	?___wmul^0,w,c
  5805  000DDA  2607               	addwf	??_add_event^0,f,c
  5806  000DDC  5002               	movf	(?___wmul+1)^0,w,c
  5807  000DDE  2208               	addwfc	(??_add_event+1)^0,f,c
  5808  000DE0  5009               	movf	add_event@i^0,w,c
  5809  000DE2  2407               	addwf	??_add_event^0,w,c
  5810  000DE4  6ED9               	movwf	fsr2l,c
  5811  000DE6  500A               	movf	(add_event@i+1)^0,w,c
  5812  000DE8  2008               	addwfc	(??_add_event+1)^0,w,c
  5813  000DEA  6EDA               	movwf	fsr2h,c
  5814  000DEC  0E00               	movlw	0
  5815  000DEE  6EDF               	movwf	indf2,c
  5816                           
  5817                           ;main.c: 66: log++;
  5818  000DF0  4A30               	infsnz	_log^0,f,c
  5819  000DF2  2A31               	incf	(_log+1)^0,f,c
  5820  000DF4                     l3005:
  5821                           
  5822                           ;main.c: 67: };main.c: 70: if(log == 10)
  5823  000DF4  0E0A               	movlw	10
  5824  000DF6  1830               	xorwf	_log^0,w,c
  5825  000DF8  1031               	iorwf	(_log+1)^0,w,c
  5826  000DFA  A4D8               	btfss	status,2,c
  5827  000DFC  0012               	return	
  5828                           
  5829                           ;main.c: 71: log = 0;
  5830  000DFE  0E00               	movlw	0
  5831  000E00  6E31               	movwf	(_log+1)^0,c
  5832  000E02  0E00               	movlw	0
  5833  000E04  6E30               	movwf	_log^0,c
  5834  000E06  0012               	return		;funcret
  5835  000E08                     __end_of_add_event:
  5836                           	callstack 0
  5837                           
  5838 ;; *************** function ___wmul *****************
  5839 ;; Defined at:
  5840 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul16.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;  multiplier      2    0[COMRAM] unsigned int 
  5843 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;  product         2    4[COMRAM] unsigned int 
  5846 ;; Return value:  Size  Location     Type
  5847 ;;                  2    0[COMRAM] unsigned int 
  5848 ;; Registers used:
  5849 ;;		wreg, status,2, status,0, prodl, prodh
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5855 ;;      Params:         4       0       0       0       0       0       0
  5856 ;;      Locals:         2       0       0       0       0       0       0
  5857 ;;      Temps:          0       0       0       0       0       0       0
  5858 ;;      Totals:         6       0       0       0       0       0       0
  5859 ;;Total ram usage:        6 bytes
  5860 ;; Hardware stack levels used: 1
  5861 ;; This function calls:
  5862 ;;		Nothing
  5863 ;; This function is called by:
  5864 ;;		_add_event
  5865 ;;		_view_log
  5866 ;;		_clear_log
  5867 ;;		_download_log
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871                           	psect	text41
  5872  001A76                     __ptext41:
  5873                           	callstack 0
  5874  001A76                     ___wmul:
  5875                           	callstack 28
  5876                           
  5877                           ;incstack = 0
  5878  001A76  5001               	movf	___wmul@multiplier^0,w,c
  5879  001A78  0203               	mulwf	___wmul@multiplicand^0,c
  5880  001A7A  CFF3 F005          	movff	prodl,___wmul@product
  5881  001A7E  CFF4 F006          	movff	prodh,___wmul@product+1
  5882  001A82  5001               	movf	___wmul@multiplier^0,w,c
  5883  001A84  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  5884  001A86  50F3               	movf	243,w,c
  5885  001A88  2606               	addwf	(___wmul@product+1)^0,f,c
  5886  001A8A  5002               	movf	(___wmul@multiplier+1)^0,w,c
  5887  001A8C  0203               	mulwf	___wmul@multiplicand^0,c
  5888  001A8E  50F3               	movf	243,w,c
  5889  001A90  2606               	addwf	(___wmul@product+1)^0,f,c
  5890  001A92  C005  F001         	movff	___wmul@product,?___wmul
  5891  001A96  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5892  001A9A  0012               	return		;funcret
  5893  001A9C                     __end_of___wmul:
  5894                           	callstack 0
  5895                           
  5896 ;; *************** function ___lwdiv *****************
  5897 ;; Defined at:
  5898 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
  5899 ;; Parameters:    Size  Location     Type
  5900 ;;  dividend        2    7[COMRAM] unsigned int 
  5901 ;;  divisor         2    9[COMRAM] unsigned int 
  5902 ;; Auto vars:     Size  Location     Type
  5903 ;;  quotient        2   11[COMRAM] unsigned int 
  5904 ;;  counter         1   13[COMRAM] unsigned char 
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  2    7[COMRAM] unsigned int 
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5914 ;;      Params:         4       0       0       0       0       0       0
  5915 ;;      Locals:         3       0       0       0       0       0       0
  5916 ;;      Temps:          0       0       0       0       0       0       0
  5917 ;;      Totals:         7       0       0       0       0       0       0
  5918 ;;Total ram usage:        7 bytes
  5919 ;; Hardware stack levels used: 1
  5920 ;; This function calls:
  5921 ;;		Nothing
  5922 ;; This function is called by:
  5923 ;;		_main
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927                           	psect	text42
  5928  0017FA                     __ptext42:
  5929                           	callstack 0
  5930  0017FA                     ___lwdiv:
  5931                           	callstack 30
  5932                           
  5933                           ;incstack = 0
  5934  0017FA  0E00               	movlw	0
  5935  0017FC  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  5936  0017FE  0E00               	movlw	0
  5937  001800  6E0C               	movwf	___lwdiv@quotient^0,c
  5938  001802  500A               	movf	___lwdiv@divisor^0,w,c
  5939  001804  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5940  001806  B4D8               	btfsc	status,2,c
  5941  001808  D01C               	goto	l1039
  5942  00180A  0E01               	movlw	1
  5943  00180C  6E0E               	movwf	___lwdiv@counter^0,c
  5944  00180E  D004               	goto	l3299
  5945  001810                     l3297:
  5946  001810  90D8               	bcf	status,0,c
  5947  001812  360A               	rlcf	___lwdiv@divisor^0,f,c
  5948  001814  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5949  001816  2A0E               	incf	___lwdiv@counter^0,f,c
  5950  001818                     l3299:
  5951  001818  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  5952  00181A  D7FA               	goto	l3297
  5953  00181C                     u2600:
  5954  00181C  90D8               	bcf	status,0,c
  5955  00181E  360C               	rlcf	___lwdiv@quotient^0,f,c
  5956  001820  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5957  001822  500A               	movf	___lwdiv@divisor^0,w,c
  5958  001824  5C08               	subwf	___lwdiv@dividend^0,w,c
  5959  001826  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  5960  001828  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5961  00182A  A0D8               	btfss	status,0,c
  5962  00182C  D005               	goto	l3309
  5963  00182E  500A               	movf	___lwdiv@divisor^0,w,c
  5964  001830  5E08               	subwf	___lwdiv@dividend^0,f,c
  5965  001832  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  5966  001834  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5967  001836  800C               	bsf	___lwdiv@quotient^0,0,c
  5968  001838                     l3309:
  5969  001838  90D8               	bcf	status,0,c
  5970  00183A  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5971  00183C  320A               	rrcf	___lwdiv@divisor^0,f,c
  5972  00183E  2E0E               	decfsz	___lwdiv@counter^0,f,c
  5973  001840  D7ED               	goto	u2600
  5974  001842                     l1039:
  5975  001842  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  5976  001846  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5977  00184A  0012               	return		;funcret
  5978  00184C                     __end_of___lwdiv:
  5979                           	callstack 0
  5980                           
  5981 ;; *************** function ___awmod *****************
  5982 ;; Defined at:
  5983 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awmod.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;  dividend        2    0[COMRAM] int 
  5986 ;;  divisor         2    2[COMRAM] int 
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;  sign            1    5[COMRAM] unsigned char 
  5989 ;;  counter         1    4[COMRAM] unsigned char 
  5990 ;; Return value:  Size  Location     Type
  5991 ;;                  2    0[COMRAM] int 
  5992 ;; Registers used:
  5993 ;;		wreg, status,2, status,0
  5994 ;; Tracked objects:
  5995 ;;		On entry : 0/0
  5996 ;;		On exit  : 0/0
  5997 ;;		Unchanged: 0/0
  5998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5999 ;;      Params:         4       0       0       0       0       0       0
  6000 ;;      Locals:         2       0       0       0       0       0       0
  6001 ;;      Temps:          0       0       0       0       0       0       0
  6002 ;;      Totals:         6       0       0       0       0       0       0
  6003 ;;Total ram usage:        6 bytes
  6004 ;; Hardware stack levels used: 1
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		_main
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           	psect	text43
  6013  0015B6                     __ptext43:
  6014                           	callstack 0
  6015  0015B6                     ___awmod:
  6016                           	callstack 30
  6017                           
  6018                           ;incstack = 0
  6019  0015B6  0E00               	movlw	0
  6020  0015B8  6E06               	movwf	___awmod@sign^0,c
  6021  0015BA  AE02               	btfss	(___awmod@dividend+1)^0,7,c
  6022  0015BC  D006               	goto	l3263
  6023  0015BE  6C01               	negf	___awmod@dividend^0,c
  6024  0015C0  1E02               	comf	(___awmod@dividend+1)^0,f,c
  6025  0015C2  B0D8               	btfsc	status,0,c
  6026  0015C4  2A02               	incf	(___awmod@dividend+1)^0,f,c
  6027  0015C6  0E01               	movlw	1
  6028  0015C8  6E06               	movwf	___awmod@sign^0,c
  6029  0015CA                     l3263:
  6030  0015CA  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  6031  0015CC  D004               	goto	l3267
  6032  0015CE  6C03               	negf	___awmod@divisor^0,c
  6033  0015D0  1E04               	comf	(___awmod@divisor+1)^0,f,c
  6034  0015D2  B0D8               	btfsc	status,0,c
  6035  0015D4  2A04               	incf	(___awmod@divisor+1)^0,f,c
  6036  0015D6                     l3267:
  6037  0015D6  5003               	movf	___awmod@divisor^0,w,c
  6038  0015D8  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  6039  0015DA  B4D8               	btfsc	status,2,c
  6040  0015DC  D018               	goto	l3283
  6041  0015DE  0E01               	movlw	1
  6042  0015E0  6E05               	movwf	___awmod@counter^0,c
  6043  0015E2  D004               	goto	l3273
  6044  0015E4                     l3271:
  6045  0015E4  90D8               	bcf	status,0,c
  6046  0015E6  3603               	rlcf	___awmod@divisor^0,f,c
  6047  0015E8  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  6048  0015EA  2A05               	incf	___awmod@counter^0,f,c
  6049  0015EC                     l3273:
  6050  0015EC  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  6051  0015EE  D7FA               	goto	l3271
  6052  0015F0                     u2560:
  6053  0015F0  5003               	movf	___awmod@divisor^0,w,c
  6054  0015F2  5C01               	subwf	___awmod@dividend^0,w,c
  6055  0015F4  5004               	movf	(___awmod@divisor+1)^0,w,c
  6056  0015F6  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  6057  0015F8  A0D8               	btfss	status,0,c
  6058  0015FA  D004               	goto	l3279
  6059  0015FC  5003               	movf	___awmod@divisor^0,w,c
  6060  0015FE  5E01               	subwf	___awmod@dividend^0,f,c
  6061  001600  5004               	movf	(___awmod@divisor+1)^0,w,c
  6062  001602  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  6063  001604                     l3279:
  6064  001604  90D8               	bcf	status,0,c
  6065  001606  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  6066  001608  3203               	rrcf	___awmod@divisor^0,f,c
  6067  00160A  2E05               	decfsz	___awmod@counter^0,f,c
  6068  00160C  D7F1               	goto	u2560
  6069  00160E                     l3283:
  6070  00160E  5006               	movf	___awmod@sign^0,w,c
  6071  001610  B4D8               	btfsc	status,2,c
  6072  001612  D004               	goto	l3287
  6073  001614  6C01               	negf	___awmod@dividend^0,c
  6074  001616  1E02               	comf	(___awmod@dividend+1)^0,f,c
  6075  001618  B0D8               	btfsc	status,0,c
  6076  00161A  2A02               	incf	(___awmod@dividend+1)^0,f,c
  6077  00161C                     l3287:
  6078  00161C  C001  F001         	movff	___awmod@dividend,?___awmod
  6079  001620  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  6080  001624  0012               	return		;funcret
  6081  001626                     __end_of___awmod:
  6082                           	callstack 0
  6083                           
  6084 ;; *************** function ___awdiv *****************
  6085 ;; Defined at:
  6086 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awdiv.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  dividend        2    0[COMRAM] int 
  6089 ;;  divisor         2    2[COMRAM] int 
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;  quotient        2    6[COMRAM] int 
  6092 ;;  sign            1    5[COMRAM] unsigned char 
  6093 ;;  counter         1    4[COMRAM] unsigned char 
  6094 ;; Return value:  Size  Location     Type
  6095 ;;                  2    0[COMRAM] int 
  6096 ;; Registers used:
  6097 ;;		wreg, status,2, status,0
  6098 ;; Tracked objects:
  6099 ;;		On entry : 0/0
  6100 ;;		On exit  : 0/0
  6101 ;;		Unchanged: 0/0
  6102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6103 ;;      Params:         4       0       0       0       0       0       0
  6104 ;;      Locals:         4       0       0       0       0       0       0
  6105 ;;      Temps:          0       0       0       0       0       0       0
  6106 ;;      Totals:         8       0       0       0       0       0       0
  6107 ;;Total ram usage:        8 bytes
  6108 ;; Hardware stack levels used: 1
  6109 ;; This function calls:
  6110 ;;		Nothing
  6111 ;; This function is called by:
  6112 ;;		_main
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           	psect	text44
  6117  00144A                     __ptext44:
  6118                           	callstack 0
  6119  00144A                     ___awdiv:
  6120                           	callstack 30
  6121                           
  6122                           ;incstack = 0
  6123  00144A  0E00               	movlw	0
  6124  00144C  6E06               	movwf	___awdiv@sign^0,c
  6125  00144E  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  6126  001450  D006               	goto	l3219
  6127  001452  6C03               	negf	___awdiv@divisor^0,c
  6128  001454  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  6129  001456  B0D8               	btfsc	status,0,c
  6130  001458  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  6131  00145A  0E01               	movlw	1
  6132  00145C  6E06               	movwf	___awdiv@sign^0,c
  6133  00145E                     l3219:
  6134  00145E  AE02               	btfss	(___awdiv@dividend+1)^0,7,c
  6135  001460  D006               	goto	l3225
  6136  001462  6C01               	negf	___awdiv@dividend^0,c
  6137  001464  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  6138  001466  B0D8               	btfsc	status,0,c
  6139  001468  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  6140  00146A  0E01               	movlw	1
  6141  00146C  1A06               	xorwf	___awdiv@sign^0,f,c
  6142  00146E                     l3225:
  6143  00146E  0E00               	movlw	0
  6144  001470  6E08               	movwf	(___awdiv@quotient+1)^0,c
  6145  001472  0E00               	movlw	0
  6146  001474  6E07               	movwf	___awdiv@quotient^0,c
  6147  001476  5003               	movf	___awdiv@divisor^0,w,c
  6148  001478  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  6149  00147A  B4D8               	btfsc	status,2,c
  6150  00147C  D01C               	goto	l3247
  6151  00147E  0E01               	movlw	1
  6152  001480  6E05               	movwf	___awdiv@counter^0,c
  6153  001482  D004               	goto	l3233
  6154  001484                     l3231:
  6155  001484  90D8               	bcf	status,0,c
  6156  001486  3603               	rlcf	___awdiv@divisor^0,f,c
  6157  001488  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  6158  00148A  2A05               	incf	___awdiv@counter^0,f,c
  6159  00148C                     l3233:
  6160  00148C  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  6161  00148E  D7FA               	goto	l3231
  6162  001490                     u2500:
  6163  001490  90D8               	bcf	status,0,c
  6164  001492  3607               	rlcf	___awdiv@quotient^0,f,c
  6165  001494  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  6166  001496  5003               	movf	___awdiv@divisor^0,w,c
  6167  001498  5C01               	subwf	___awdiv@dividend^0,w,c
  6168  00149A  5004               	movf	(___awdiv@divisor+1)^0,w,c
  6169  00149C  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  6170  00149E  A0D8               	btfss	status,0,c
  6171  0014A0  D005               	goto	l3243
  6172  0014A2  5003               	movf	___awdiv@divisor^0,w,c
  6173  0014A4  5E01               	subwf	___awdiv@dividend^0,f,c
  6174  0014A6  5004               	movf	(___awdiv@divisor+1)^0,w,c
  6175  0014A8  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  6176  0014AA  8007               	bsf	___awdiv@quotient^0,0,c
  6177  0014AC                     l3243:
  6178  0014AC  90D8               	bcf	status,0,c
  6179  0014AE  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  6180  0014B0  3203               	rrcf	___awdiv@divisor^0,f,c
  6181  0014B2  2E05               	decfsz	___awdiv@counter^0,f,c
  6182  0014B4  D7ED               	goto	u2500
  6183  0014B6                     l3247:
  6184  0014B6  5006               	movf	___awdiv@sign^0,w,c
  6185  0014B8  B4D8               	btfsc	status,2,c
  6186  0014BA  D004               	goto	l3251
  6187  0014BC  6C07               	negf	___awdiv@quotient^0,c
  6188  0014BE  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  6189  0014C0  B0D8               	btfsc	status,0,c
  6190  0014C2  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  6191  0014C4                     l3251:
  6192  0014C4  C007  F001         	movff	___awdiv@quotient,?___awdiv
  6193  0014C8  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  6194  0014CC  0012               	return		;funcret
  6195  0014CE                     __end_of___awdiv:
  6196                           	callstack 0
  6197                           
  6198                           	psect	rparam
  6199  0000                     
  6200                           	psect	config
  6201                           
  6202                           ; Padding undefined space
  6203  300000                     	org	3145728
  6204  300000  FF                 	db	255
  6205                           
  6206                           ;Config register CONFIG1H @ 0x300001
  6207                           ;	Oscillator Selection bits
  6208                           ;	OSC = XT, XT oscillator
  6209                           ;	Fail-Safe Clock Monitor Enable bit
  6210                           ;	FCMEN = 0x0, unprogrammed default
  6211                           ;	Internal/External Oscillator Switchover bit
  6212                           ;	IESO = 0x0, unprogrammed default
  6213  300001                     	org	3145729
  6214  300001  01                 	db	1
  6215                           
  6216                           ;Config register CONFIG2L @ 0x300002
  6217                           ;	Power-up Timer Enable bit
  6218                           ;	PWRT = 0x1, unprogrammed default
  6219                           ;	Brown-out Reset Enable bits
  6220                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  6221                           ;	Brown-out Reset Voltage bits
  6222                           ;	BORV = 0x3, unprogrammed default
  6223  300002                     	org	3145730
  6224  300002  19                 	db	25
  6225                           
  6226                           ;Config register CONFIG2H @ 0x300003
  6227                           ;	Watchdog Timer Enable bit
  6228                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  6229                           ;	Watchdog Timer Postscale Select bits
  6230                           ;	WDTPS = 0xF, unprogrammed default
  6231  300003                     	org	3145731
  6232  300003  1E                 	db	30
  6233                           
  6234                           ; Padding undefined space
  6235  300004                     	org	3145732
  6236  300004  FF                 	db	255
  6237                           
  6238                           ;Config register CONFIG3H @ 0x300005
  6239                           ;	PORTB A/D Enable bit
  6240                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  6241                           ;	Low-Power Timer 1 Oscillator Enable bit
  6242                           ;	LPT1OSC = 0x0, unprogrammed default
  6243                           ;	MCLR Pin Enable bit
  6244                           ;	MCLRE = 0x1, unprogrammed default
  6245  300005                     	org	3145733
  6246  300005  80                 	db	128
  6247                           
  6248                           ;Config register CONFIG4L @ 0x300006
  6249                           ;	Stack Full/Underflow Reset Enable bit
  6250                           ;	STVREN = 0x1, unprogrammed default
  6251                           ;	Single-Supply ICSP Enable bit
  6252                           ;	LVP = OFF, Single-Supply ICSP disabled
  6253                           ;	Boot Block Size Select bit
  6254                           ;	BBSIZ = 0x0, unprogrammed default
  6255                           ;	Extended Instruction Set Enable bit
  6256                           ;	XINST = 0x0, unprogrammed default
  6257                           ;	Background Debugger Enable bit
  6258                           ;	DEBUG = 0x1, unprogrammed default
  6259  300006                     	org	3145734
  6260  300006  81                 	db	129
  6261                           
  6262                           ; Padding undefined space
  6263  300007                     	org	3145735
  6264  300007  FF                 	db	255
  6265                           tosu	equ	0xFFF
  6266                           tosh	equ	0xFFE
  6267                           tosl	equ	0xFFD
  6268                           stkptr	equ	0xFFC
  6269                           pclatu	equ	0xFFB
  6270                           pclath	equ	0xFFA
  6271                           pcl	equ	0xFF9
  6272                           tblptru	equ	0xFF8
  6273                           tblptrh	equ	0xFF7
  6274                           tblptrl	equ	0xFF6
  6275                           tablat	equ	0xFF5
  6276                           prodh	equ	0xFF4
  6277                           prodl	equ	0xFF3
  6278                           indf0	equ	0xFEF
  6279                           postinc0	equ	0xFEE
  6280                           postdec0	equ	0xFED
  6281                           preinc0	equ	0xFEC
  6282                           plusw0	equ	0xFEB
  6283                           fsr0h	equ	0xFEA
  6284                           fsr0l	equ	0xFE9
  6285                           wreg	equ	0xFE8
  6286                           indf1	equ	0xFE7
  6287                           postinc1	equ	0xFE6
  6288                           postdec1	equ	0xFE5
  6289                           preinc1	equ	0xFE4
  6290                           plusw1	equ	0xFE3
  6291                           fsr1h	equ	0xFE2
  6292                           fsr1l	equ	0xFE1
  6293                           bsr	equ	0xFE0
  6294                           indf2	equ	0xFDF
  6295                           postinc2	equ	0xFDE
  6296                           postdec2	equ	0xFDD
  6297                           preinc2	equ	0xFDC
  6298                           plusw2	equ	0xFDB
  6299                           fsr2h	equ	0xFDA
  6300                           fsr2l	equ	0xFD9
  6301                           status	equ	0xFD8

Data Sizes:
    Strings     198
    Constant    0
    Data        120
    BSS         202
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     35      76
    BANK0           160      0     112
    BANK1           256      0     170
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    clcd_print@data	PTR const unsigned char  size(2) Largest target is 170
		 -> STR_24(CODE[18]), STR_23(CODE[3]), STR_22(CODE[3]), STR_21(CODE[3]), 
		 -> STR_20(CODE[3]), STR_19(CODE[3]), STR_18(CODE[3]), STR_17(CODE[3]), 
		 -> STR_16(CODE[3]), menu(BANK0[85]), STR_15(CODE[3]), STR_11(CODE[8]), 
		 -> STR_10(CODE[17]), STR_9(CODE[12]), STR_8(CODE[18]), STR_7(CODE[18]), 
		 -> STR_6(CODE[17]), STR_5(CODE[9]), STR_4(CODE[15]), STR_3(CODE[13]), 
		 -> STR_2(CODE[17]), STR_1(CODE[15]), str(COMRAM[3]), gear(BANK0[27]), 
		 -> time(COMRAM[9]), event(BANK1[170]), 

    puts@s	PTR const unsigned char  size(2) Largest target is 170
		 -> STR_14(CODE[3]), STR_13(CODE[14]), STR_12(CODE[22]), event(BANK1[170]), 

    my_strcmp@str2	PTR unsigned char  size(1) Largest target is 5
		 -> password@str_pass(COMRAM[5]), 

    my_strcmp@str1	PTR unsigned char  size(1) Largest target is 5
		 -> str_user(COMRAM[5]), 


Critical Paths under _main in COMRAM

    _main->_display_menu
    _password->_clcd_print
    _password->_clcd_putch
    _init_config->_clcd_print
    _init_ds1307->_read_ds1307
    _init_ds1307->_write_ds1307
    _init_clcd->_clcd_write
    _get_time->_read_ds1307
    _display_time->_clcd_print
    _display_menu->_set_time
    _view_log->_clcd_print
    _set_time->_convertval
    _write_ds1307->_i2c_write
    _read_ds1307->_i2c_write
    _convertval->___lbdiv
    _convertval->___lbmod
    ___lbmod->_read_ds1307
    ___lbdiv->_read_ds1307
    _download_log->_clcd_print
    _puts->___wmul
    _clear_log->_clcd_print
    _change_password->_clcd_print
    _change_password->_clcd_putch
    _write_external_eeprom->_i2c_write
    _read_external_eeprom->_i2c_write
    _clcd_putch->___lbdiv
    _clcd_putch->___lbmod
    _clcd_print->___wmul
    _add_event->___wmul
    ___lwdiv->_read_adc

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  110931
                                             32 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
                            ___lwdiv
                          _add_event
                         _clcd_print
                         _clcd_write
                       _display_menu
                       _display_time
                           _get_time
                        _init_config
                           _password
                           _read_adc
                      _read_switches
 ---------------------------------------------------------------------------------
 (1) _read_adc                                             7     5      2      45
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _password                                            18    16      2   12031
                                              9 COMRAM    18    16      2
                         _clcd_print
                         _clcd_putch
                         _clcd_write
                          _my_strcmp
                      _read_switches
 ---------------------------------------------------------------------------------
 (2) _my_strcmp                                            4     2      2     330
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0    9401
                         _clcd_print
                           _init_adc
                          _init_clcd
                        _init_ds1307
                           _init_i2c
                 _init_matrix_keypad
 ---------------------------------------------------------------------------------
 (2) _init_matrix_keypad                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_i2c                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ds1307                                          1     1      0     734
                                              3 COMRAM     1     1      0
                        _read_ds1307
                       _write_ds1307
 ---------------------------------------------------------------------------------
 (2) _init_clcd                                            0     0      0    1640
                         _clcd_write
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             0     0      0      67
                        _read_ds1307
 ---------------------------------------------------------------------------------
 (1) _display_time                                         0     0      0    7027
                         _clcd_print
 ---------------------------------------------------------------------------------
 (1) _display_menu                                         5     5      0   69663
                                             27 COMRAM     5     5      0
                    _change_password
                         _clcd_print
                          _clear_log
                       _download_log
                      _read_switches
                           _set_time
                           _view_log
 ---------------------------------------------------------------------------------
 (2) _view_log                                             2     2      0   11209
                                              9 COMRAM     2     2      0
                             ___wmul
                         _clcd_print
                         _clcd_write
                      _read_switches
 ---------------------------------------------------------------------------------
 (2) _set_time                                            34    34      0   15627
                                             10 COMRAM    17    17      0
                            ___lbdiv
                            ___lbmod
                         _clcd_print
                         _clcd_putch
                         _clcd_write
                         _convertval
                        _read_ds1307
                      _read_switches
                       _write_ds1307
 ---------------------------------------------------------------------------------
 (3) _write_ds1307                                         2     1      1     598
                                              1 COMRAM     2     1      1
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (3) _read_ds1307                                          2     2      0      67
                                              1 COMRAM     2     2      0
                           _i2c_read
                      _i2c_rep_start
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (3) _convertval                                           3     3      0    1521
                                              7 COMRAM     3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              4     3      1     691
                                              3 COMRAM     4     3      1
                        _read_ds1307 (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     694
                                              3 COMRAM     4     3      1
                        _read_ds1307 (ARG)
 ---------------------------------------------------------------------------------
 (2) _download_log                                         3     3      0   11600
                                              9 COMRAM     3     3      0
                             ___wmul
                         _clcd_print
                         _clcd_write
                               _puts
                      _read_switches
 ---------------------------------------------------------------------------------
 (3) _puts                                                 2     0      2     371
                                              6 COMRAM     2     0      2
                             ___wmul (ARG)
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _clear_log                                            7     7      0   11297
                                              9 COMRAM     7     7      0
                             ___wmul
                         _clcd_print
                         _clcd_write
                      _read_switches
 ---------------------------------------------------------------------------------
 (2) _change_password                                      5     5      0   12385
                                              9 COMRAM     5     5      0
                         _clcd_print
                         _clcd_putch
                         _clcd_write
               _read_external_eeprom
                      _read_switches
              _write_external_eeprom
 ---------------------------------------------------------------------------------
 (3) _write_external_eeprom                                2     1      1     674
                                              1 COMRAM     2     1      1
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (1) _read_switches                                        1     1      0      44
                                              0 COMRAM     1     1      0
                           _scan_key
 ---------------------------------------------------------------------------------
 (2) _scan_key                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _read_external_eeprom                                 2     2      0      67
                                              1 COMRAM     2     2      0
                           _i2c_read
                      _i2c_rep_start
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (4) _i2c_write                                            1     1      0      22
                                              0 COMRAM     1     1      0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (4) _i2c_stop                                             0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (4) _i2c_start                                            0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (4) _i2c_rep_start                                        0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (4) _i2c_read                                             0     0      0       0
                         _i2c_no_ack
                        _i2c_rx_mode
 ---------------------------------------------------------------------------------
 (5) _i2c_rx_mode                                          0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (5) _i2c_idle                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_no_ack                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clcd_putch                                           2     1      1    2596
                                              7 COMRAM     2     1      1
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                         _clcd_write
 ---------------------------------------------------------------------------------
 (2) _clcd_print                                           3     0      3    7027
                                              6 COMRAM     3     0      3
                             ___wmul (ARG)
                         _clcd_write
 ---------------------------------------------------------------------------------
 (2) _clcd_write                                           2     1      1    1640
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _add_event                                            6     6      0    2704
                                              6 COMRAM     6     6      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2427
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     314
                                              7 COMRAM     7     3      4
                           _read_adc (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___awmod
   ___lwdiv
     _read_adc (ARG)
   _add_event
     ___wmul
   _clcd_print
     ___wmul (ARG)
     _clcd_write (ARG)
   _clcd_write
   _display_menu
     _change_password
       _clcd_print
       _clcd_putch
         ___lbdiv (ARG)
           _read_ds1307 (ARG)
             _i2c_read
               _i2c_no_ack
               _i2c_rx_mode
                 _i2c_idle
             _i2c_rep_start
               _i2c_idle
             _i2c_start
               _i2c_idle
             _i2c_stop
               _i2c_idle
             _i2c_write
               _i2c_idle
         ___lbmod (ARG)
           _read_ds1307 (ARG)
         _clcd_write (ARG)
       _clcd_write
       _read_external_eeprom
         _i2c_read
         _i2c_rep_start
         _i2c_start
         _i2c_stop
         _i2c_write
       _read_switches
         _scan_key
       _write_external_eeprom
         _i2c_start
         _i2c_stop
         _i2c_write
     _clcd_print
     _clear_log
       ___wmul
       _clcd_print
       _clcd_write
       _read_switches
     _download_log
       ___wmul
       _clcd_print
       _clcd_write
       _puts
         ___wmul (ARG)
         _putch (ARG)
       _read_switches
     _read_switches
     _set_time
       ___lbdiv
       ___lbmod
       _clcd_print
       _clcd_putch
       _clcd_write
       _convertval
         ___lbdiv
         ___lbmod
       _read_ds1307
       _read_switches
       _write_ds1307
         _i2c_start
         _i2c_stop
         _i2c_write
     _view_log
       ___wmul
       _clcd_print
       _clcd_write
       _read_switches
   _display_time
     _clcd_print
   _get_time
     _read_ds1307
   _init_config
     _clcd_print
     _init_adc
     _init_clcd
       _clcd_write
     _init_ds1307
       _read_ds1307
       _write_ds1307
     _init_i2c
     _init_matrix_keypad
   _password
     _clcd_print
     _clcd_putch
     _clcd_write
     _my_strcmp
     _read_switches
   _read_adc
   _read_switches

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      26        0.0%
BITBIGSFRlll       281      0       0      24        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      AA       7       66.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      70       5       70.0%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     23      4C       1       80.0%
BITBIGSFRhhhhhl     27      0       0      17        0.0%
BITBIGSFRllh         F      0       0      23        0.0%
BITBIGSFRhhhhhh      E      0       0      16        0.0%
BITBIGSFRlhhhl       9      0       0      20        0.0%
BITBIGSFRlhhhhl      8      0       0      19        0.0%
BITBIGSFRlhhhhh      7      0       0      18        0.0%
BITBIGSFRlhl         7      0       0      22        0.0%
BITBIGSFRlhhl        2      0       0      21        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     166      25        0.0%
DATA                 0      0     166       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sat Apr 22 11:15:39 2023

        _write_external_eeprom 1ADA                 clcd_print@addr 0009                 clcd_print@data 0007  
                my_strcmp@str1 0001                  my_strcmp@str2 0002                             l36 18E8  
                           _GO 007E11                   ___awdiv@sign 0006            ___wmul@multiplicand 0003  
           _init_matrix_keypad 1B26                            l401 1512                            l404 152A  
                          l406 1532                            l407 1542                            l408 153A  
                          l349 113C                            l391 14F4                            l392 14E4  
                          l394 14EC                            l397 1502                            l389 14DC  
                          l398 151A                            l399 150A                            _CKE 007E3E  
                          _RB1 007C09                            _RB2 007C0A                            _RC0 007C10  
                          _RC1 007C11                            _RB3 007C0B                            _RB4 007C0C  
                          _RC2 007C12                            _RB5 007C0D                            _RB6 007C0E  
                          _RB7 007C0F                  ?_display_menu 0001                            _RD7 007C1F  
                          _PEN 007E2A                            _SEN 007E28                            _SMP 007E3F  
                ?_display_time 0001                            _key 0037                            _log 0030  
               clcd_putch@addr 0008                            _str 0041                 clcd_putch@data 0009  
                 ___awmod@sign 0006                            wreg 000FE8            ?_init_matrix_keypad 0001  
                         l1039 1842                           l3005 0DF4                           l3013 0E1C  
                         l3121 0812                           l3041 0EA8                           l3027 0E6C  
                         l3035 0E90                           l2501 1A1C                           l3141 08DA  
                         l3109 0764                           l3231 1484                           l3135 0890  
                         l3119 07CE                           l3233 148C                           l3225 146E  
                         l3137 08D4                           l3057 0F02                           l3065 0F2E  
                         l3251 14C4                           l3243 14AC                           l3219 145E  
                         l2603 17AA                           l3171 0954                           l3075 0F5C  
                         l3315 1102                           l3309 1838                           l2461 1B4A  
                         l2701 0A6E                           l3165 093E                           l3085 06D0  
                         l3325 1148                           l3247 14B6                           l3271 15E4  
                         l3263 15CA                           l2383 1A68                           l2543 18B4  
                         l2607 17D2                           l2471 191E                           l3159 0928  
                         l3095 0724                           l3351 11DC                           l3273 15EC  
                         l2553 18CC                           l2721 0AC2                           l3177 096A  
                         l3361 1202                           l3353 11E0                           l3345 11C0  
                         l3283 160E                           l3267 15D6                           l2563 172A  
                         l2547 18C0                           l2811 1086                           l2803 1060  
                         l2483 193A                           l2475 1924                           l2715 0AAA  
                         l2707 0A8A                           l2821 10A8                           l2493 1A04  
                         l2741 0B24                           l3189 164A                           l3287 161C  
                         l3279 1604                           l2559 16FE                           l2815 109A  
                         l2807 1072                           l2487 1942                           l2751 0B6A  
                         l2727 0ADC                           l2655 178A                           l3359 11FE  
                         l3297 1810                           l2737 0B10                           l2681 0A0E  
                         l2841 13B2                           l2649 1754                           l2657 178E  
                         l3299 1818                           l2835 10EA                           l2915 12A0  
                         l2851 13D8                           l2791 1030                           l2783 1008  
                         l2695 0A54                           l2863 140C                           l2793 103C  
                         l2769 0FC4                           l2873 130C                           l2971 0C7A  
                         l2787 101C                           l2779 0FF6                           l2859 13F8  
                         l2965 0C36                           l2797 1046                           l2893 138E  
                         l2879 1314                           l2993 0D6A                           l2985 0D14  
                         l2979 0CCA                           l2999 0DAE                           _ADFM 007E07  
                         _ADON 007E10                           STR_1 066E                           STR_2 065D  
                         STR_3 069A                           STR_4 067D                           STR_5 06B3  
                         STR_6 063B                           STR_7 0617                           STR_8 0629  
                         STR_9 06A7                           u2100 12E8                           u2130 0C2C  
                         u2131 0C2A                           _CSRC 007D67                           u2070 135C  
                         u2080 1370                           u2320 075C                           u1370 1A58  
                         u2250 0F24                           u2500 1490                           u1620 1722  
                         u1540 1928                           u2260 0F80                           u2181 0E16  
                         u1630 174A                           u2190 0E34                           u2600 181C  
                         u1385 1A5A                           u1650 17CA                           u1627 1718  
                         u1660 17F2                           u2620 1134                           u1637 1740  
                         u2560 15F0                           u1680 1768                           u1657 17C0  
        ?_read_external_eeprom 0001                           u1667 17E8                           u1860 0B00  
                         u2660 11D8                           u2680 11F8                           u1890 0FDC  
                         _RCEN 007E2B                           _RBPU 007F8F                           _SPEN 007D5F  
                         _RSEN 007E29                           _TXIE 007CEC                           _TXIF 007CF4  
                         _gear 00B5                           _main 10FE                           _menu 0060  
                         _time 0038                           fsr0h 000FEA                           fsr1h 000FE2  
                         indf0 000FEF                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf1 000FE7                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           _puts 17A8                           prodh 000FF4  
                         prodl 000FF3                           start 0000           ??_init_matrix_keypad 0001  
                 ___param_bank 000000                 clcd_write@byte 0002                  _i2c_rep_start 1B84  
                ??_i2c_rx_mode 0001                   ?_init_ds1307 0001                 ??_display_menu 001C  
                        _ADCS0 007E00                          _ADCS1 007E01                          _ADCS2 007E02  
                        ?_main 0001                   ?_read_ds1307 0001                          _ACKEN 007E2C  
                        _ACKDT 007E2D                 ??_display_time 000A                          _BCLIF 007D0B  
                        _ACQT0 007E03                          _ACQT1 007E04                          _ACQT2 007E05  
              __end_of___awdiv 14CE                __end_of___lbdiv 1946                          STR_10 064C  
                        STR_11 06BC                          STR_20 06C4                          STR_12 0601  
                        STR_21 0649                          STR_13 068C                          STR_14 0697  
                        STR_22 0649                          STR_23 06C4                          STR_15 06C4  
                        STR_16 0649                          STR_24 0629                          STR_17 06C4  
                        STR_18 0649                          STR_19 06C4                __end_of___awmod 1626  
              __end_of___lbmod 1A24                          ?_puts 0007                ___awdiv@divisor 0003  
              __end_of___lwdiv 184C                   ?_init_config 0001                ___awdiv@counter 0005  
                        _VCFG0 007E0C                          _VCFG1 007E0D                          _RCREG 000FAE  
                        _SPBRG 000FAF                          _PORTB 000F81                          _PORTD 000F83  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
                        _SSPIF 007CF3                          _TXREG 000FAD      write_external_eeprom@data 0002  
                        _delay 0034                          _count 0032                          _event 0100  
                        _putch 1B48                          main@i 0022                _change_password 0F96  
               __pbitbssCOMRAM 0260                          tablat 000FF5                          puts@s 0007  
                        status 000FD8                ___lbdiv@divisor 0004                ___lbdiv@counter 0006  
             init_ds1307@dummy 0004                     _i2c_no_ack 1B9C                __initialization 168E  
               ?_i2c_rep_start 0001         ?_write_external_eeprom 0002                   __end_of_main 1246  
                 __end_of_puts 17FA               __end_of_i2c_idle 1B9C               __end_of_i2c_read 1B6C  
             __end_of_i2c_stop 1B7C                  ?_download_log 0001                         ??_main 0021  
                       ??_puts 0009                  __activetblptr 000002            __end_of_i2c_rx_mode 1B94  
                       _ADCON0 000FC2                         _ADCON1 000FC1                         _ABDOVF 007DC7  
             read_switches@key 0036         ??_read_external_eeprom 0002                         _ADRESH 000FC4  
                       _ADRESL 000FC3               ___awdiv@dividend 0001                         ?_putch 0001  
                       _GODONE 007E11                   _write_ds1307 1ABC                         _SSPADD 000FC8  
                       _TRISC3 007CA3                         _TRISC4 007CA4                         _TRISD7 007CAF  
                       _SSPBUF 000FC9               __end_of_get_time 168E                         ___wmul 1A76  
                    ??___awdiv 0005                      ??___lbdiv 0005                      ??___awmod 0005  
                    ??___lbmod 0005                      ??___lwdiv 000C               __end_of_init_i2c 1B26  
             __end_of_init_adc 1ABC               __end_of_read_adc 190C                         clear_0 16D4  
                       clear_1 16E2                 ??_download_log 000A               ___awdiv@quotient 0007  
              ___awmod@divisor 0003          change_password@change 000D                         isa$std 000001  
             __end_of_scan_key 1546                ___awmod@counter 0005               __end_of_password 0F96  
                 __pdataCOMRAM 0044        __end_of_change_password 10FE               __end_of_set_time 0C14  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                  display_menu@i 001F               __end_of_view_log 144A  
             ___lbdiv@dividend 0005                ___lbmod@divisor 0004                     __accesstop 0060  
      __end_of__initialization 16E8                ___lbmod@counter 0006           __end_of_display_menu 0974  
         __end_of_display_time 1B48                  ___rparam_used 000001                ??_i2c_rep_start 0001  
                  ?_i2c_no_ack 0001                 __pcstackCOMRAM 0001                   __pidataBANK0 1546  
                  _i2c_rx_mode 1B8C                  __end_of_putch 1B54               ___lbdiv@quotient 0007  
            __end_of_i2c_start 1B84              __end_of_i2c_write 1B60                        ??_putch 0001  
                   __pbssBANK1 0100                      ?_i2c_idle 0001                      ?_i2c_read 0001  
                    ?_i2c_stop 0001                     _clcd_print 16F2                     _clcd_putch 1AF8  
                   _clcd_write 1A4E   write_external_eeprom@address 0003                read_ds1307@data 0003  
                   add_event@i 0009                     add_event@j 000B                        ?___wmul 0001  
            read_switches@once 0046                        _ACKSTAT 007E2E              __end_of_add_event 0E08  
             ?_change_password 0001                    password@key 0019                        _SSPCON1 000FC6  
                    ?_get_time 0001                  _read_switches 1892                     ??_i2c_idle 0001  
                   ??_i2c_read 0001                     ??_i2c_stop 0001                      ?_init_i2c 0001  
         __end_of_download_log 1304                      ?_init_adc 0001                      ?_read_adc 0001  
                   _convertval 19D0              __end_of_clear_log 13AA                      ?_scan_key 0001  
      ??_write_external_eeprom 0003                        __Hparam 0000                      ?_password 000A  
                      __Lparam 0000                      ?_set_time 0001                        ___awdiv 144A  
                      ___lbdiv 190C                        ___awmod 15B6                        ___lbmod 19FA  
                    ?_view_log 0001                        ___lwdiv 17FA                   __psmallconst 0600  
                      __pcinit 168E                        __ramtop 0600                        __ptext0 10FE  
                      __ptext1 18D0                        __ptext2 0E08                        __ptext3 1752  
                      __ptext4 197C                        __ptext5 1B26                        __ptext6 1B10  
                      __ptext7 184C                        __ptext8 1946                        __ptext9 1A9C  
             set_time@wait_209 000C              __end_of_init_clcd 197C               ___awmod@dividend 0001  
               ?_read_switches 0001                     ??_get_time 0004           end_of_initialization 16E8  
                  set_time@MIN 0012                    set_time@SEC 0011                     clear_log@i 000D  
                   clear_log@j 000F                    set_time@key 0014                     ??_init_i2c 0001  
                   ??_init_adc 0001                  __Lmediumconst 0000                     ??_read_adc 0003  
                convertval@rem 0008                  convertval@val 000A                  convertval@num 0009  
       change_password@pwd_key 000C                     ??_scan_key 0001                    ?_clcd_print 0007  
                  ?_clcd_putch 0008                    ?_clcd_write 0001              __end_of_my_strcmp 17A8  
                   ??_password 000C                     ??_set_time 000B                        postdec1 000FE5  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
                   ??_view_log 000A                read_adc@channel 0007                   _display_menu 06C8  
                 _display_time 1B38                  i2c_write@data 0001               ___lbmod@dividend 0005  
              read_adc@reg_val 0005                    ___lbmod@rem 0007                    ?_convertval 0001  
     read_external_eeprom@data 0003                   ??_i2c_no_ack 0001                   ?_i2c_rx_mode 0001  
               __end_of___wmul 1A9C                  __pidataCOMRAM 1B6C                    _adc_reg_val 002C  
          start_initialization 168E                ??_read_switches 0001                      _i2c_start 1B7C  
                    _i2c_write 1B54             __end_of_i2c_no_ack 1BA2               change_password@j 000A  
        __end_of_i2c_rep_start 1B8C                       ??___wmul 0005                 set_time@prekey 0010  
                ??_init_ds1307 0004                    __pdataBANK0 0060                  ??_read_ds1307 0002  
                 _download_log 1246    read_switches@detection_type 0001                  ??_init_config 000A  
                  __pbssCOMRAM 0024                     ?_i2c_start 0001                     ?_i2c_write 0001  
                    _add_event 0C14               ___lwdiv@dividend 0008  __end_of_write_external_eeprom 1AF8  
                    _clear_log 1304                       ?___awdiv 0001                       ?___lbdiv 0004  
                     ?___awmod 0001                       ?___lbmod 0004             read_ds1307@address 0002  
                     ?___lwdiv 0008                      _clock_reg 0029                    __smallconst 0600  
          __end_of_init_ds1307 1892            __end_of_read_ds1307 19D0                     ?_add_event 0001  
             ___lwdiv@quotient 000C                      _init_clcd 1946            __end_of_init_config 19A6  
                ?_write_ds1307 0002                 ___wmul@product 0005    read_external_eeprom@address 0002  
                 ??_clcd_print 000A                   ??_clcd_putch 0009     __end_of_init_matrix_keypad 1B38  
                 ??_clcd_write 0002                     ?_clear_log 0001                      _my_strcmp 1752  
                 password@flag 0260                   password@wait 0011                  download_log@i 000B  
        clcd_write@control_bit 0001              ___wmul@multiplier 0001                    ??_i2c_start 0001  
           __end_of_clcd_print 1752                    ??_i2c_write 0001             __end_of_clcd_putch 1B10  
           __end_of_clcd_write 1A76                     ?_init_clcd 0001                      copy_data0 16A2  
                    copy_data1 16C2                 ??_write_ds1307 0003                       _i2c_idle 1B94  
                     _i2c_read 1B60                       _i2c_stop 1B74                   ??_convertval 0008  
                 clear_log@clr 000C                       __Hrparam 0000                       __Lrparam 0000  
                   ?_my_strcmp 0001   __end_of_read_external_eeprom 1A4E                    _init_ds1307 184C  
                  _read_ds1307 19A6                    _init_config 197C             __end_of_convertval 19FA  
          write_ds1307@address 0003                ___lwdiv@divisor 000A                ___lwdiv@counter 000E  
                     __ptext10 1626                       __ptext11 1B38                       __ptext20 1246  
                     __ptext12 06C8                       __ptext21 17A8                       __ptext13 13AA  
                     __ptext30 1B74                       __ptext22 1B48                       __ptext14 0974  
                     __ptext31 1B7C                       __ptext23 1304                       __ptext15 1ABC  
                     __ptext40 0C14                       __ptext32 1B84                       __ptext24 0F96  
                     __ptext16 19A6                       __ptext41 1A76                       __ptext33 1B60  
                     __ptext25 1ADA                       __ptext17 19D0                       __ptext42 17FA  
                     __ptext34 1B8C                       __ptext26 1892                       __ptext18 19FA  
                     __ptext43 15B6                       __ptext35 1B94                       __ptext27 14CE  
                     __ptext19 190C                       __ptext44 144A                       __ptext36 1B9C  
                     __ptext28 1A24                       __ptext37 1AF8                       __ptext29 1B54  
                     __ptext38 16F2                       __ptext39 1A4E                    ??_add_event 0007  
                     _get_time 1626                      password@i 001A                       _init_i2c 1B10  
                     _init_adc 1A9C                       _read_adc 18D0                       _scan_key 14CE  
                     _password 0E08                    ??_clear_log 000A              ??_change_password 000A  
                     _set_time 0974                       isa$xinst 000000               display_menu@flag 0044  
                     _view_log 13AA               display_menu@lkey 001D                       _str_user 0047  
                    view_log@i 000A                   set_time@HOUR 0013                      putch@byte 0001  
                 set_time@flag 0018                   set_time@hour 0017                   set_time@mins 0016  
                 set_time@secs 0015                    ??_init_clcd 0003          __end_of_read_switches 18D0  
             password@wait_189 0015                 password@F10404 0024                display_menu@key 001E  
                  ??_my_strcmp 0003               password@str_pass 000C           __end_of_write_ds1307 1ADA  
                  _returnvalue 002E               write_ds1307@data 0002           _read_external_eeprom 1A24  
              download_log@key 000A  
